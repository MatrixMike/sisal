DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + LEVEL;
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY QUEEN_LIST[]
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 5; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5db6b7.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-981eb9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 16; 0; 0; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 1; 0; 5; 16; 0; 2; 1; 5; -1])
WITNESS:1
SIZE 1 :- (3,5 aka [13; 0; 1; 0; 5; 13; 0; 4; 1; 5; -1])
WITNESS:5
SIZE 1 :- (3,3 aka [13; 0; 2; 0; 5; 13; 0; 3; 1; 5; -1])
WITNESS:3
SIZE 1 :- (3,12 aka [12; 0; 1; 0; 5; 12; 0; 4; 1; 5; -1])
WITNESS:12
SIZE 1 :- (3,10 aka [12; 0; 2; 0; 5; 12; 0; 3; 1; 5; -1])
WITNESS:10
-------------------
At Height:3
SIZE 1 :- (2,7 aka [16; 3; 0; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:7
SIZE 1 :- (2,14 aka [16; 10; 0; 0; 5; 16; 12; 0; 1; 5; -1])
WITNESS:14
-------------------
At Height:4
SIZE 1 :- (1,9 aka [14; 1; 0; 0; 5; 14; 7; 0; 1; 5; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,16 aka [14; 9; 0; 0; 5; 14; 14; 0; 1; 5; -1])
WITNESS:16
Val-nums
16 -> 16
14 -> 14
12 -> 12
10 -> 10
9 -> 9
7 -> 7
5 -> 5
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-6864c1.dot
Val-nums
Output Dot in /tmp/graph-6c9166.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c522d9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 8; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e32876.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 1; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [12; 0; 0; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [5; 2; 0; 0; 5; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,5 aka [41; 3; 0; 0; 8; -1])
WITNESS:5
Val-nums
5 -> 5
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c55a51.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; 34; 0; 2; 2; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4c9d01.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-3286a8.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-f2bb4b.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-9a6a19.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 1; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-4fa3aa.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-ea0d12.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 1; 1; -1])
WITNESS:0
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 1; 0; 5; 5; 0; 2; 1; 5; 5; 0; 3; 2; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,7 aka [6; 1; 0; 0; 1; -1])
WITNESS:7
Val-nums
7 -> 7
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d6579e.dot
Val-nums
Output Dot in /tmp/graph-2fb693.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (1,2 aka [13; 1; 0; 0; 5; 13; 0; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (1,7 aka [42; 6; 0; 0; 8; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
4 -> 4
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-04b73a.dot
Val-nums
Output Dot in /tmp/graph-2a1320.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-fb382c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-289974.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-32f999.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [31; 1; 0; 0; 5; 31; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-757747.dot
Val-nums
Output Dot in /tmp/graph-891c63.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 8; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
Output Dot in /tmp/graph-ada836.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [16; 0; 0; 0; 5; 16; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-41a6a3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c6f836.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-1da31e.dot
Val-nums
Output Dot in /tmp/graph-c8abd5.dot
Result graph
Graph {
----NODES----
2 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      2 EQUAL [||] [||]
      1 "1"
      BOUNDARY [[(0,0,LEVEL)], []]
      ----EDGES----
      2:0 -> 0:0 5
      1:0 -> 2:1 5
      0:0 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    2 0 %na=BODY0
      Graph {
      ----NODES----
      4 ASETL [||] [|0|]
      3 "1"
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          2 ABUILD [||] [|0|]
          1 "1"
          BOUNDARY [[(0,0,ROW)], [(2,0)]]
          ----EDGES----
          2:0 -> 0:0 7
          1:0 -> 2:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          INTEGRAL;ROW;(3,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(0,0)
          ARRAY 5;ASSIGNMENT;(2,0)
          } 4
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "4"
          1 "1"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 8
          0:1 -> 1:1 7
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          } 2
        BOUNDARY [[], []]
        GLOBAL-SYM: 
        INTEGRAL;LEVEL;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[], [(4,0)]]
      ----EDGES----
      4:0 -> 0:0 8
      3:0 -> 4:0 8
      1:1 -> 4:0 8
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 6
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          7 ASETL [||] [|0|]
          6 "1"
          4 0 %na=FORALL
            Graph {
            ----NODES----
            3 0 %na=BODY
              Graph {
              ----NODES----
              7 NOT [||] [|0|]
              4 0 %na=SELECT
                Graph {
                ----NODES----
                3 0 %na=PREDICATE0
                  Graph {
                  ----NODES----
                  BOUNDARY [[(0,0,ISCHECK)], []]
                  ----EDGES----
                  0:0 -> 0:0 1
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  LOCAL-SYM: 
                  BOOLEAN;ISCHECK;(0,0)
                  } 2
                2 0 %na=BODY0
                  Graph {
                  ----NODES----
                  1 ABUILD [||] [|0|]
                  BOUNDARY [[], [(1,0)]]
                  ----EDGES----
                  1:0 -> 0:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  } 3
                1 0 %na=ELSE0
                  Graph {
                  ----NODES----
                  1 ABUILD [||] [||]
                  BOUNDARY [[], []]
                  ----EDGES----
                  1:0 -> 0:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  } 3
                BOUNDARY [[(0,1,)], [(2,0);(1,0);(3,0)]]
                ----EDGES----
                3:0 -> 0:0 1
                2:0 -> 0:2 7
                1:0 -> 0:1 7
                0:1 -> 3:0 5
                GLOBAL-SYM: 
                INTEGRAL;ROW;(0,1)
                ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                INTEGRAL;LEVEL;(0,0)
                BOOLEAN;ISCHECK;(1,0)
                INTEGRAL;COLUMN;(0,2)
                } 4 3,2,1,3
              1 INVOCATION [||] [||] %na=IN_CHECK
              BOUNDARY [[(0,3,PARTIAL_ASSIGNMENT);(0,2,COLUMN);(0,1,ROW);(0,0,LEVEL)], [(7,0);(4,0)]]
              ----EDGES----
              7:0 -> 0:1 1
              4:0 -> 0:0 7
              1:0 -> 7:0 1
              0:3 -> 1:2 7
              0:2 -> 1:1 5
              0:1 -> 1:0 5
              GLOBAL-SYM: 
              INTEGRAL;ROW;(3,0)
              ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(2,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(0,1)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
              INTEGRAL;LEVEL;(0,0)
              BOOLEAN;ISCHECK;(1,0)
              INTEGRAL;COLUMN;(0,2)
              ARRAY 5;ASSIGNMENT;(4,0)
              } 8
            2 0 %na=GENERATOR
              Graph {
              ----NODES----
              3 RANGEGEN [||] [|0|]
              2 "8"
              1 "1"
              BOUNDARY [[(0,0,LEVEL)], [(3,0)]]
              ----EDGES----
              3:0 -> 0:1 5
              2:0 -> 3:1 5
              1:0 -> 3:0 5
              GLOBAL-SYM: 
              ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(2,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(3,0)
              INTEGRAL;LEVEL;(0,0)
              } 4
            1 0 %na=RETURN
              Graph {
              ----NODES----
              1 AGATHER [||] [|0|]
              BOUNDARY [[(0,2,);(0,1,);(0,0,)], [(1,0)]]
              ----EDGES----
              1:0 -> 0:0 8
              0:2 -> 1:2 1
              0:1 -> 1:1 7
              0:0 -> 1:0 5
              GLOBAL-SYM: 
              ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(2,0)
              } 2
            BOUNDARY [[(0,3,PARTIAL_ASSIGNMENT);(0,2,COLUMN);(0,0,LEVEL)], []]
            GLOBAL-SYM: 
            ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
            INTEGRAL;LEVEL;(0,0)
            INTEGRAL;COLUMN;(2,0)
            LOCAL-SYM: 
            ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
            INTEGRAL;LEVEL;(0,0)
            INTEGRAL;COLUMN;(0,2)
            } 4 3,2,3,1
          2 ADD [||] [||]
          1 "1"
          BOUNDARY [[(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], [(7,0)]]
          ----EDGES----
          7:0 -> 0:0 8
          6:0 -> 7:0 8
          4:1 -> 7:0 8
          2:0 -> 4:2 5
          1:0 -> 2:0 5
          0:1 -> 4:3 7
          0:0 -> 4:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
          ARRAY 7;NEW_ASSIGNMENT;(7,0)
          INTEGRAL;LEVEL;(0,0)
          INTEGRAL;COLUMN;(2,0)
          } 9
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          5 ASCATTER [||] [|0|]
          3 INVOCATION [||] [||] %na=MAIN
          2 SUBTRACT [||] [||]
          1 "1"
          BOUNDARY [[(0,0,LEVEL)], [(5,0)]]
          ----EDGES----
          5:0 -> 0:1 7
          3:0 -> 5:0 8
          2:0 -> 3:0 5
          1:0 -> 2:1 5
          0:0 -> 2:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          } 6
        1 0 %na=RETURN
          Graph {
          ----NODES----
          2 "catenate"
          1 REDUCE [||] [|0|]
          BOUNDARY [[(0,1,)], [(1,0)]]
          ----EDGES----
          2:0 -> 1:0 2
          1:0 -> 0:0 8
          0:1 -> 1:1 8
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          } 3
        BOUNDARY [[(0,0,LEVEL)], []]
        GLOBAL-SYM: 
        INTEGRAL;LEVEL;(0,0)
        LOCAL-SYM: 
        INTEGRAL;LEVEL;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,0,LEVEL)], []]
      ----EDGES----
      1:1 -> 0:0 8
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    BOUNDARY [[(0,0,)], [(2,0);(1,1);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 0:2 8
    1:1 -> 0:1 8
    0:0 -> 3:0 5
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;LEVEL;(0,0)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 8
  LOCAL-SYM: 
  INTEGRAL;LEVEL;(0,0)
  } 3
1 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      16 OR [||] [|0|]
      14 EQUAL [||] [||]
      12 SUBTRACT [||] [||]
      10 SUBTRACT [||] [||]
      9 OR [||] [||]
      7 EQUAL [||] [||]
      5 ADD [||] [||]
      3 ADD [||] [||]
      1 EQUAL [||] [||]
      BOUNDARY [[(0,4,C);(0,3,COLUMN);(0,2,ROW);(0,1,R);(0,0,QUEENS)], [(16,0)]]
      ----EDGES----
      16:0 -> 0:0 5
      14:0 -> 16:1 5
      12:0 -> 14:1 5
      10:0 -> 14:0 5
      9:0 -> 16:0 5
      7:0 -> 9:1 5
      5:0 -> 7:1 5
      3:0 -> 7:0 5
      1:0 -> 9:0 5
      0:4 -> 12:1 5
      0:1 -> 12:0 5
      0:3 -> 10:1 5
      0:2 -> 10:0 5
      0:4 -> 5:1 5
      0:1 -> 5:0 5
      0:3 -> 3:1 5
      0:2 -> 3:0 5
      0:2 -> 1:1 5
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;ROW;(1,0)
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 17
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0,0|]
      BOUNDARY [[(0,0,QUEENS)], [(1,1);(1,0)]]
      ----EDGES----
      1:1 -> 0:1 5
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,2)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(1,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "sum"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 5
      0:1 -> 1:1 5
      GLOBAL-SYM: 
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,2)
      INTEGRAL;C;(0,1)
      } 3
    BOUNDARY [[(0,4,C);(0,1,R);(0,0,QUEENS)], []]
    GLOBAL-SYM: 
    INTEGRAL;R;(0,0)
    ARRAY 5;QUEENS;(0,2)
    INTEGRAL;C;(0,1)
    LOCAL-SYM: 
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;C;(0,4)
    } 4 3,2,3,1
  BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(1,1)], %na=IN_CHECK]
  ----EDGES----
  1:1 -> 0:0 5
  0:2 -> 1:0 7
  0:1 -> 1:4 5
  0:0 -> 1:1 5
  LOCAL-SYM: 
  INTEGRAL;R;(0,0)
  ARRAY 5;QUEENS;(0,2)
  INTEGRAL;C;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
16 FUNCTION_TYPE MAIN (ARGS: 15) (RETURNS:14)
15 TUPLE {Type label:5; Next label:0}
14 TUPLE {Type label:8; Next label:0}
13 FUNCTION_TYPE IN_CHECK (ARGS: 12) (RETURNS:9)
12 TUPLE {Type label:5; Next label:11}
11 TUPLE {Type label:5; Next label:10}
10 TUPLE {Type label:7; Next label:0}
9 TUPLE {Type label:1; Next label:0}
8 ARRAY 7
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
SOLUTION_LIST:8
REAL:3
QUEEN_LIST:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + LEVEL;
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY QUEEN_LIST[]
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
Output Dot in out.dot
