DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + LEVEL;
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY QUEEN_LIST[]
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 1; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-69db37.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-892c9a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 16; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 1; 0; 5; 16; 0; 2; 1; 5; -1])
WITNESS:1
SIZE 1 :- (3,5 aka [13; 0; 1; 0; 5; 13; 0; 4; 1; 5; -1])
WITNESS:5
SIZE 1 :- (3,3 aka [13; 0; 2; 0; 5; 13; 0; 3; 1; 5; -1])
WITNESS:3
SIZE 1 :- (3,12 aka [12; 0; 1; 0; 5; 12; 0; 4; 1; 5; -1])
WITNESS:12
SIZE 1 :- (3,10 aka [12; 0; 2; 0; 5; 12; 0; 3; 1; 5; -1])
WITNESS:10
-------------------
At Height:3
SIZE 1 :- (2,7 aka [16; 3; 0; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:7
SIZE 1 :- (2,14 aka [16; 10; 0; 0; 5; 16; 12; 0; 1; 5; -1])
WITNESS:14
-------------------
At Height:4
SIZE 1 :- (1,9 aka [14; 1; 0; 0; 1; 14; 7; 0; 1; 1; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,16 aka [14; 9; 0; 0; 1; 14; 14; 0; 1; 1; -1])
WITNESS:16
Val-nums
16 -> 16
14 -> 14
12 -> 12
10 -> 10
9 -> 9
7 -> 7
5 -> 5
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c66078.dot
Val-nums
Output Dot in /tmp/graph-19746a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-18fa86.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 8; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-a280a3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 1; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [12; 0; 0; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [5; 2; 0; 0; 5; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,5 aka [41; 3; 0; 0; 8; -1])
WITNESS:5
Val-nums
5 -> 5
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-858101.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; 34; 0; 2; 2; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d29791.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-3de629.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-132b3b.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-ce8a1d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 1; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-8b6d95.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-00cef8.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 1; 1; -1])
WITNESS:0
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 1; 0; 5; 5; 0; 2; 1; 5; 5; 0; 3; 2; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,7 aka [6; 1; 0; 0; 1; -1])
WITNESS:7
Val-nums
7 -> 7
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-51f167.dot
Val-nums
Output Dot in /tmp/graph-ba2d0e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (1,2 aka [13; 1; 0; 0; 5; 13; 0; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (1,7 aka [42; 6; 0; 0; 8; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
4 -> 4
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-35d92d.dot
Val-nums
Output Dot in /tmp/graph-4a2bb0.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-189eb8.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-953b72.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-3fb4b5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [31; 1; 0; 0; 5; 31; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-37dd46.dot
Val-nums
Output Dot in /tmp/graph-e50901.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 8; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
Output Dot in /tmp/graph-8b99d2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [16; 0; 0; 0; 5; 16; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5d1bf8.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-edd7f0.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-385520.dot
Val-nums
Output Dot in /tmp/graph-9d02bb.dot
Result graph
Graph {
----NODES----
2 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      2 EQUAL [||] [||]
      1 "1"
      BOUNDARY [[(0,0,LEVEL)], []]
      ----EDGES----
      2:0 -> 0:0 1
      1:0 -> 2:1 5
      0:0 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    2 0 %na=BODY0
      Graph {
      ----NODES----
      4 ASETL [||] [|0|]
      3 "1"
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          2 ABUILD [||] [|0|]
          1 "1"
          BOUNDARY [[(0,0,ROW)], [(2,0)]]
          ----EDGES----
          2:0 -> 0:0 7
          1:0 -> 2:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          INTEGRAL;ROW;(3,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(0,0)
          ARRAY 5;ASSIGNMENT;(2,0)
          } 4
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "4"
          1 "1"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 8
          0:1 -> 1:1 7
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          INTEGRAL;ROW;(0,0)
          INTEGRAL;LEVEL;(0,0)
          ARRAY 5;ASSIGNMENT;(2,0)
          } 2
        BOUNDARY [[], []]
        GLOBAL-SYM: 
        INTEGRAL;ROW;(0,0)
        INTEGRAL;LEVEL;(0,0)
        ARRAY 5;ASSIGNMENT;(2,0)
        } 4 3,2,3,1
      BOUNDARY [[], [(4,0)]]
      ----EDGES----
      4:0 -> 0:0 8
      3:0 -> 4:0 8
      1:1 -> 4:0 8
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 6
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          7 ASETL [||] [|0|]
          6 "1"
          4 0 %na=FORALL
            Graph {
            ----NODES----
            3 0 %na=BODY
              Graph {
              ----NODES----
              7 NOT [||] [|0|]
              4 0 %na=SELECT
                Graph {
                ----NODES----
                3 0 %na=PREDICATE0
                  Graph {
                  ----NODES----
                  BOUNDARY [[(0,0,ISCHECK)], []]
                  ----EDGES----
                  0:0 -> 0:0 1
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  LOCAL-SYM: 
                  BOOLEAN;ISCHECK;(0,0)
                  } 2
                2 0 %na=BODY0
                  Graph {
                  ----NODES----
                  1 ABUILD [||] [|0|]
                  BOUNDARY [[], [(1,0)]]
                  ----EDGES----
                  1:0 -> 0:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  } 3
                1 0 %na=ELSE0
                  Graph {
                  ----NODES----
                  1 ABUILD [||] [|0|]
                  BOUNDARY [[], [(1,0)]]
                  ----EDGES----
                  1:0 -> 0:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,2)
                  } 3
                BOUNDARY [[(0,1,)], [(2,0);(1,0);(3,0)]]
                ----EDGES----
                3:0 -> 0:0 1
                2:0 -> 0:2 7
                1:0 -> 0:1 7
                0:1 -> 3:0 5
                GLOBAL-SYM: 
                INTEGRAL;ROW;(0,1)
                ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
                INTEGRAL;LEVEL;(0,0)
                BOOLEAN;ISCHECK;(1,0)
                INTEGRAL;COLUMN;(0,2)
                } 4 3,2,1,3
              1 INVOCATION [||] [||] %na=IN_CHECK
              BOUNDARY [[(0,3,PARTIAL_ASSIGNMENT);(0,2,COLUMN);(0,1,ROW);(0,0,LEVEL)], [(7,0);(4,0)]]
              ----EDGES----
              7:0 -> 0:1 1
              4:0 -> 0:0 7
              1:0 -> 7:0 1
              0:3 -> 1:2 7
              0:2 -> 1:1 5
              0:1 -> 1:0 5
              GLOBAL-SYM: 
              INTEGRAL;ROW;(3,0)
              ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(2,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(0,1)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
              INTEGRAL;LEVEL;(0,0)
              BOOLEAN;ISCHECK;(1,0)
              INTEGRAL;COLUMN;(0,2)
              ARRAY 5;ASSIGNMENT;(4,0)
              } 8
            2 0 %na=GENERATOR
              Graph {
              ----NODES----
              3 RANGEGEN [||] [|0|]
              2 "8"
              1 "1"
              BOUNDARY [[(0,0,LEVEL)], [(3,0)]]
              ----EDGES----
              3:0 -> 0:1 5
              2:0 -> 3:1 5
              1:0 -> 3:0 5
              GLOBAL-SYM: 
              ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(2,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(3,0)
              INTEGRAL;LEVEL;(0,0)
              } 4
            1 0 %na=RETURN
              Graph {
              ----NODES----
              1 AGATHER [||] [|0|]
              BOUNDARY [[(0,2,);(0,1,);(0,0,)], [(1,0)]]
              ----EDGES----
              1:0 -> 0:0 8
              0:2 -> 1:2 1
              0:1 -> 1:1 7
              0:0 -> 1:0 5
              GLOBAL-SYM: 
              INTEGRAL;ROW;(0,1)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
              INTEGRAL;LEVEL;(0,0)
              BOOLEAN;ISCHECK;(1,0)
              INTEGRAL;COLUMN;(0,2)
              ARRAY 5;ASSIGNMENT;(4,0)
              } 2
            BOUNDARY [[(0,3,PARTIAL_ASSIGNMENT);(0,2,COLUMN);(0,0,LEVEL)], []]
            GLOBAL-SYM: 
            INTEGRAL;ROW;(0,1)
            ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
            INTEGRAL;LEVEL;(0,0)
            BOOLEAN;ISCHECK;(1,0)
            INTEGRAL;COLUMN;(0,2)
            ARRAY 5;ASSIGNMENT;(4,0)
            LOCAL-SYM: 
            ARRAY 5;PARTIAL_ASSIGNMENT;(0,3)
            INTEGRAL;LEVEL;(0,0)
            INTEGRAL;COLUMN;(0,2)
            } 4 3,2,3,1
          2 ADD [||] [||]
          1 "1"
          BOUNDARY [[(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], [(7,0)]]
          ----EDGES----
          7:0 -> 0:0 8
          6:0 -> 7:0 8
          4:1 -> 7:0 8
          2:0 -> 4:2 5
          1:0 -> 2:0 5
          0:1 -> 4:3 7
          0:0 -> 4:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
          ARRAY 7;NEW_ASSIGNMENT;(7,0)
          INTEGRAL;LEVEL;(0,0)
          INTEGRAL;COLUMN;(2,0)
          } 9
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          5 ASCATTER [||] [|0|]
          3 INVOCATION [||] [||] %na=MAIN
          2 SUBTRACT [||] [||]
          1 "1"
          BOUNDARY [[(0,0,LEVEL)], [(5,0)]]
          ----EDGES----
          5:0 -> 0:1 7
          3:0 -> 5:0 8
          2:0 -> 3:0 5
          1:0 -> 2:1 5
          0:0 -> 2:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          } 6
        1 0 %na=RETURN
          Graph {
          ----NODES----
          2 "catenate"
          1 REDUCE [||] [|0|]
          BOUNDARY [[(0,1,)], [(1,0)]]
          ----EDGES----
          2:0 -> 1:0 2
          1:0 -> 0:0 8
          0:1 -> 1:1 8
          GLOBAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
          ARRAY 7;NEW_ASSIGNMENT;(7,0)
          INTEGRAL;LEVEL;(0,0)
          INTEGRAL;COLUMN;(2,0)
          } 3
        BOUNDARY [[(0,0,LEVEL)], []]
        GLOBAL-SYM: 
        ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
        ARRAY 7;NEW_ASSIGNMENT;(7,0)
        INTEGRAL;LEVEL;(0,0)
        INTEGRAL;COLUMN;(2,0)
        LOCAL-SYM: 
        INTEGRAL;LEVEL;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,0,LEVEL)], [(1,1)]]
      ----EDGES----
      1:1 -> 0:0 8
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    BOUNDARY [[(0,0,)], [(2,0);(1,1);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 8
    1:1 -> 0:1 8
    0:0 -> 3:0 5
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;LEVEL;(0,0)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 8
  LOCAL-SYM: 
  INTEGRAL;LEVEL;(0,0)
  } 3
1 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      16 OR [||] [|0|]
      14 EQUAL [||] [||]
      12 SUBTRACT [||] [||]
      10 SUBTRACT [||] [||]
      9 OR [||] [||]
      7 EQUAL [||] [||]
      5 ADD [||] [||]
      3 ADD [||] [||]
      1 EQUAL [||] [||]
      BOUNDARY [[(0,4,C);(0,3,COLUMN);(0,2,ROW);(0,1,R);(0,0,QUEENS)], [(16,0)]]
      ----EDGES----
      16:0 -> 0:0 1
      14:0 -> 16:1 1
      12:0 -> 14:1 5
      10:0 -> 14:0 5
      9:0 -> 16:0 1
      7:0 -> 9:1 1
      5:0 -> 7:1 5
      3:0 -> 7:0 5
      1:0 -> 9:0 1
      0:4 -> 12:1 5
      0:1 -> 12:0 5
      0:3 -> 10:1 5
      0:2 -> 10:0 5
      0:4 -> 5:1 5
      0:1 -> 5:0 5
      0:3 -> 3:1 5
      0:2 -> 3:0 5
      0:2 -> 1:1 5
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;ROW;(1,0)
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 17
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0,0|]
      BOUNDARY [[(0,0,QUEENS)], [(1,1);(1,0)]]
      ----EDGES----
      1:1 -> 0:1 5
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,2)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(1,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "sum"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 1
      0:1 -> 1:1 1
      GLOBAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 3
    BOUNDARY [[(0,4,C);(0,1,R);(0,0,QUEENS)], []]
    GLOBAL-SYM: 
    INTEGRAL;ROW;(0,2)
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;COLUMN;(0,3)
    INTEGRAL;C;(0,4)
    LOCAL-SYM: 
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;C;(0,4)
    } 4 3,2,3,1
  BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(1,1)], %na=IN_CHECK]
  ----EDGES----
  1:1 -> 0:0 1
  0:2 -> 1:0 7
  0:1 -> 1:4 5
  0:0 -> 1:1 5
  LOCAL-SYM: 
  INTEGRAL;R;(0,0)
  ARRAY 5;QUEENS;(0,2)
  INTEGRAL;C;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
16 FUNCTION_TYPE MAIN (ARGS: 15) (RETURNS:14)
15 TUPLE {Type label:5; Next label:0}
14 TUPLE {Type label:8; Next label:0}
13 FUNCTION_TYPE IN_CHECK (ARGS: 12) (RETURNS:9)
12 TUPLE {Type label:5; Next label:11}
11 TUPLE {Type label:5; Next label:10}
10 TUPLE {Type label:7; Next label:0}
9 TUPLE {Type label:1; Next label:0}
8 ARRAY 7
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
SOLUTION_LIST:8
REAL:3
QUEEN_LIST:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + LEVEL;
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY QUEEN_LIST[]
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE AAREAL = ARRAY [REAL]
FUNCTION MAIN (RETURNS AAREAL)
  LET
    RH:AAREAL := ARRAY  [1:1.18,7.23,3.18,10.6] IN
  LET
    PH:AAREAL := ARRAY  [1:2.18,4.23,6.18,12.6] IN
  RH [ 1:RH[2];2:RH[3] ] || PH
  END LET
  END LET
END FUNCTION
-------------------
At Height:1
WITNESS:1
WITNESS:2
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
SIZE 1 :- (1,8 aka [8; -1])
WITNESS:8
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
SIZE 1 :- (1,10 aka [10; -1])
WITNESS:10
SIZE 1 :- (1,11 aka [11; -1])
WITNESS:11
SIZE 1 :- (1,13 aka [13; -1])
WITNESS:13
SIZE 1 :- (1,15 aka [15; -1])
WITNESS:15
SIZE 1 :- (1,17 aka [17; -1])
WITNESS:17
SIZE 1 :- (1,19 aka [19; -1])
WITNESS:19
-------------------
At Height:2
SIZE 1 :- (2,6 aka [31; 1; 0; 0; 5; 31; 2; 0; 1; 3; 31; 3; 0; 2; 3; 31; 4; 0; 3; 3; 31; 5; 0; 4; 3; -1])
WITNESS:6
SIZE 1 :- (2,12 aka [31; 7; 0; 0; 5; 31; 8; 0; 1; 3; 31; 9; 0; 2; 3; 31; 10; 0; 3; 3; 31; 11; 0; 4; 3; -1])
WITNESS:12
-------------------
At Height:3
SIZE 1 :- (7,14 aka [32; 6; 0; 0; 7; 32; 13; 0; 1; 5; -1])
WITNESS:14
SIZE 1 :- (7,18 aka [32; 6; 0; 0; 7; 32; 17; 0; 1; 5; -1])
WITNESS:18
-------------------
At Height:4
SIZE 1 :- (1,16 aka [38; 6; 0; 0; 7; 38; 15; 0; 1; 5; 38; 14; 0; 2; 3; -1])
WITNESS:16
-------------------
At Height:5
SIZE 1 :- (1,20 aka [38; 16; 0; 0; 7; 38; 19; 0; 1; 5; 38; 18; 0; 2; 3; -1])
WITNESS:20
-------------------
At Height:6
SIZE 1 :- (1,21 aka [8; 20; 0; 0; 7; 8; 12; 0; 1; 7; -1])
WITNESS:21
Val-nums
21 -> 21
20 -> 20
19 -> 19
18 -> 18
17 -> 17
16 -> 16
15 -> 15
14 -> 14
13 -> 13
12 -> 12
11 -> 11
10 -> 10
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-c84667.dot
Val-nums
Output Dot in /tmp/graph-07ae83.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  21 ACATENATE [||] [|0|]
  20 AREPLACE [||] [||]
  19 "2"
  18 AELEMENT [||] [||]
  17 "3"
  16 AREPLACE [||] [||]
  15 "1"
  14 AELEMENT [||] [||]
  13 "2"
  12 ABUILD [||] [||]
  11 "12.6"
  10 "6.18"
  9 "4.23"
  8 "2.18"
  7 "1"
  6 ABUILD [||] [||]
  5 "10.6"
  4 "3.18"
  3 "7.23"
  2 "1.18"
  1 "1"
  BOUNDARY [[], [(21,0)]]
  ----EDGES----
  21:0 -> 0:0 7
  20:0 -> 21:0 7
  19:0 -> 20:1 5
  18:0 -> 20:2 3
  17:0 -> 18:1 5
  16:0 -> 20:0 7
  15:0 -> 16:1 5
  14:0 -> 16:2 3
  13:0 -> 14:1 5
  12:0 -> 21:1 7
  11:0 -> 12:4 3
  10:0 -> 12:3 3
  9:0 -> 12:2 3
  8:0 -> 12:1 3
  7:0 -> 12:0 5
  6:0 -> 18:0 7
  6:0 -> 16:0 7
  6:0 -> 14:0 7
  5:0 -> 6:4 3
  4:0 -> 6:3 3
  3:0 -> 6:2 3
  2:0 -> 6:1 3
  1:0 -> 6:0 5
  } 24
BOUNDARY [[], []]
----TYPEMAP----
10 ARRAY 5
9 FUNCTION_TYPE  (ARGS: 0) (RETURNS:8)
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 3
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AAREAL:7
} 2
DEFINE MAIN
TYPE AAREAL = ARRAY [REAL]
FUNCTION MAIN (RETURNS AAREAL)
  LET
    RH:AAREAL := ARRAY  [1:1.18,7.23,3.18,10.6] IN
  LET
    PH:AAREAL := ARRAY  [1:2.18,4.23,6.18,12.6] IN
  RH [ 1:RH[2];2:RH[3] ] || PH
  END LET
  END LET
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e9384e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b1a051.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-27c1a1.dot
Val-nums
Output Dot in /tmp/graph-dab8da.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-2e8bc3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 9; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (3,4 aka [5; 1; 0; 0; 7; -1])
WITNESS:4
SIZE 1 :- (3,7 aka [5; 1; 2; 0; 7; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,6 aka [8; 4; 0; 0; 7; 8; 1; 1; 1; 7; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,9 aka [8; 6; 0; 0; 7; 8; 7; 0; 1; 7; -1])
WITNESS:9
Val-nums
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b14570.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [20; 1; 0; 0; 5; 20; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-48184b.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-8602c2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; 0; 6; 1; 1; 7; 0; 8; 2; 2; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:3 FOR 3 TREES :- (6,3 aka [36; 0; 0; 0; 7; -1]);(6,5 aka [36; 0; 0; 0; 7; -1]);(6,7 aka [36; 0; 0; 0; 7; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:4 FOR 3 TREES :- (6,4 aka [42; 3; 0; 1; 5; -1]);(6,6 aka [42; 5; 0; 1; 5; -1]);(6,8 aka [42; 7; 0; 1; 5; -1])
Val-nums
9 -> 9
8 -> 4
7 -> 3
6 -> 4
5 -> 3
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-422d10.dot
Val-nums
Output Dot in /tmp/graph-e60ceb.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  9 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 GREATER [||] [||]
      2 "2"
      1 ASIZE [||] [||]
      BOUNDARY [[(0,0,DATA)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      9 ACATENATE [||] [|0|]
      7 INVOCATION [||] [||] %na=MAIN
      6 ACATENATE [||] [||]
      4 INVOCATION [||] [||] %na=MAIN
      1 INVOCATION [||] [||] %na=SPLIT
      BOUNDARY [[(0,0,DATA)], [(9,0)]]
      ----EDGES----
      9:0 -> 0:0 7
      7:0 -> 9:1 7
      6:0 -> 9:0 7
      4:0 -> 6:0 7
      1:2 -> 7:0 7
      1:1 -> 6:1 7
      1:0 -> 4:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 12
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,DATA)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 7
    1:0 -> 0:1 7
    0:0 -> 3:0 7
    0:1 -> 2:0 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,1,3
  8 ASETL [||] [|0|]
  7 ALIML [||] [||] %na=ALimL
  6 ASETL [||] [|0|]
  5 ALIML [||] [||] %na=ALimL
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(9,0);(8,2);(6,1);(4,0)], %na=SPLIT ,%na=MAIN]
  ----EDGES----
  9:0 -> 0:3 7
  4:2 -> 0:2 7
  4:1 -> 0:1 7
  4:0 -> 0:0 7
  3:0 -> 8:1 5
  3:0 -> 6:1 5
  3:0 -> 4:1 5
  1:1 -> 8:0 7
  1:1 -> 6:0 7
  1:1 -> 4:0 7
  0:0 -> 7:0 7
  0:0 -> 5:0 7
  0:0 -> 3:0 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;DATA;(0,0)
  } 11
BOUNDARY [[], []]
----TYPEMAP----
15 FUNCTION_TYPE SPLIT (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:7; Next label:0}
13 TUPLE {Type label:7; Next label:12}
12 TUPLE {Type label:7; Next label:11}
11 TUPLE {Type label:7; Next label:0}
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
INFO:7
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE ONEDIM = ARRAY [INTEGER]
FUNCTION BUBBLE (N:INTEGER;AIN:ONEDIM RETURNS ONEDIM)
  FOR INITIAL      A,LIMIT := AIN,N
    WHILE LIMIT > 1
      REPEAT
      LIMIT := OLD LIMIT - 1;
      A := FOR INITIAL              J := 0;
        A1 := OLD A
            WHILE J < LIMIT
              REPEAT
          J := OLD J + 1;
          A1 := IF OLD A1[J] > OLD A1[J + 1] THEN
OLD A1 [ J:OLD A1[J + 1],OLD A1[J] ]
          ELSE OLD A1
          END IF
      RETURNS VALUE OF A1
            END FOR
  RETURNS VALUE OF A
    END FOR
END FUNCTION
FUNCTION MAIN (A:ONEDIM RETURNS ONEDIM)
  BUBBLE(ARRAY_SIZE(A),A)
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
SIZE 1 :- (1,1 aka [50; 0; 1; 0; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7a39f0.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [50; 0; 1; 0; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-daf15d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-cfdb4a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [13; 0; 0; 0; 5; 13; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (1,4 aka [32; 0; 0; 0; 7; 32; 0; 0; 1; 5; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,3 aka [32; 0; 0; 0; 7; 32; 2; 0; 1; 5; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,5 aka [38; 0; 0; 0; 7; 38; 0; 0; 1; 5; 38; 3; 0; 2; 5; 38; 4; 0; 3; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-17aa7f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [13; 0; 0; 0; 5; 13; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,1 aka [32; 0; 0; 0; 7; 32; 0; 0; 1; 5; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,4 aka [32; 0; 0; 0; 7; 32; 3; 0; 1; 5; -1])
WITNESS:4
-------------------
At Height:4
SIZE 1 :- (1,5 aka [20; 1; 0; 0; 5; 20; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-07dc44.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c52fda.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
Val-nums
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d71636.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [18; 0; 3; 0; 5; 18; 0; 2; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7f4368.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-7c81de.dot
Val-nums
Output Dot in /tmp/graph-9fe25a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,2 aka [12; 0; 2; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
4 -> 4
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-ea4a67.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [20; 0; 2; 0; 5; 20; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-cfdba2.dot
Val-nums
Output Dot in /tmp/graph-552a2a.dot
Val-nums
Output Dot in /tmp/graph-df490e.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-6f7f2b.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,2 aka [5; 1; 0; 0; 5; 5; 0; 0; 1; 7; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3ba372.dot
Val-nums
Output Dot in /tmp/graph-b328cc.dot
Result graph
Graph {
----NODES----
2 0
  Graph {
  ----NODES----
  2 INVOCATION [||] [|0|] %na=BUBBLE
  1 ASIZE [||] [||]
  BOUNDARY [[(0,0,)], [(2,0)], %na=MAIN]
  ----EDGES----
  2:0 -> 0:0 7
  1:0 -> 2:0 5
  0:0 -> 2:1 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;A;(0,0)
  } 4
1 0
  Graph {
  ----NODES----
  1 0 %na=LoopB
    Graph {
    ----NODES----
    4 0 %na=INIT
      Graph {
      ----NODES----
      BOUNDARY [[(0,1,N);(0,0,AIN)], []]
      GLOBAL-SYM: 
      INTEGRAL;N;(0,0)
      ARRAY 5;AIN;(0,1)
      LOCAL-SYM: 
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(0,1)
      ARRAY 5;AIN;(0,0)
      ARRAY 5;A;(0,0)
      } 2
    3 0 %na=TEST
      Graph {
      ----NODES----
      2 GREATER [||] [|0|]
      1 "1"
      BOUNDARY [[(0,2,LIMIT);(0,1,N);(0,0,AIN)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:0 1
      1:0 -> 2:1 5
      0:2 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(0,1)
      ARRAY 5;AIN;(0,0)
      ARRAY 5;A;(0,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(0,2)
      ARRAY 5;AIN;(0,0)
      } 4
    2 0 %na=BODY
      Graph {
      ----NODES----
      4 0 %na=LoopB
        Graph {
        ----NODES----
        4 0 %na=INIT
          Graph {
          ----NODES----
          1 "0"
          BOUNDARY [[(0,2,LIMIT);(0,1,N);(0,0,AIN)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:3 5
          GLOBAL-SYM: 
          INTEGRAL;OLD LIMIT;(0,2)
          ARRAY 5;OLD A;(0,0)
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(2,0)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A;(0,0)
          LOCAL-SYM: 
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(1,0)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A1;(0,0)
          } 4
        3 0 %na=TEST
          Graph {
          ----NODES----
          1 LESSER [||] [|0|]
          BOUNDARY [[(0,3,J);(0,2,LIMIT);(0,1,N);(0,0,AIN)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 1
          0:3 -> 1:0 5
          0:2 -> 1:1 5
          GLOBAL-SYM: 
          INTEGRAL;OLD LIMIT;(0,2)
          ARRAY 5;OLD A;(0,0)
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(1,0)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A1;(0,0)
          ARRAY 5;A;(0,0)
          LOCAL-SYM: 
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(0,3)
          ARRAY 5;AIN;(0,0)
          } 3
        2 0 %na=BODY
          Graph {
          ----NODES----
          4 0 %na=SELECT
            Graph {
            ----NODES----
            3 0 %na=PREDICATE0
              Graph {
              ----NODES----
              5 GREATER [||] [||]
              4 AELEMENT [||] [||]
              3 ADD [||] [||]
              2 "1"
              1 AELEMENT [||] [||]
              BOUNDARY [[(0,0,J)], []]
              ----EDGES----
              5:0 -> 0:0 1
              4:0 -> 5:1 5
              3:0 -> 4:1 5
              2:0 -> 3:1 5
              1:0 -> 5:0 5
              0:0 -> 4:0 7
              0:0 -> 3:0 5
              0:0 -> 1:1 5
              0:0 -> 1:0 7
              GLOBAL-SYM: 
              INTEGRAL;OLD LIMIT;(0,2)
              INTEGRAL;OLD J;(0,3)
              ARRAY 5;OLD A1;(0,0)
              ARRAY 5;OLD A;(0,0)
              INTEGRAL;N;(0,1)
              INTEGRAL;LIMIT;(0,2)
              INTEGRAL;J;(2,0)
              ARRAY 5;AIN;(0,0)
              ARRAY 5;A1;(0,0)
              ARRAY 5;A;(0,0)
              LOCAL-SYM: 
              INTEGRAL;J;(0,0)
              } 7
            2 0 %na=BODY0
              Graph {
              ----NODES----
              5 AREPLACE [||] [|0|]
              4 AELEMENT [||] [||]
              3 AELEMENT [||] [||]
              2 ADD [||] [||]
              1 "1"
              BOUNDARY [[(0,0,J)], [(5,0)]]
              ----EDGES----
              5:0 -> 0:0 7
              4:0 -> 5:3 5
              3:0 -> 5:2 5
              2:0 -> 3:1 5
              1:0 -> 2:1 5
              0:0 -> 5:1 5
              0:0 -> 5:0 7
              0:0 -> 4:1 5
              0:0 -> 4:0 7
              0:0 -> 3:0 7
              0:0 -> 2:0 5
              GLOBAL-SYM: 
              INTEGRAL;OLD LIMIT;(0,2)
              INTEGRAL;OLD J;(0,3)
              ARRAY 5;OLD A1;(0,0)
              ARRAY 5;OLD A;(0,0)
              INTEGRAL;N;(0,1)
              INTEGRAL;LIMIT;(0,2)
              INTEGRAL;J;(2,0)
              ARRAY 5;AIN;(0,0)
              ARRAY 5;A1;(0,0)
              ARRAY 5;A;(0,0)
              LOCAL-SYM: 
              INTEGRAL;J;(0,0)
              } 7
            1 0 %na=ELSE0
              Graph {
              ----NODES----
              BOUNDARY [[(0,0,)], [(0,0)]]
              ----EDGES----
              0:0 -> 0:0 7
              GLOBAL-SYM: 
              INTEGRAL;OLD LIMIT;(0,2)
              INTEGRAL;OLD J;(0,3)
              ARRAY 5;OLD A1;(0,0)
              ARRAY 5;OLD A;(0,0)
              INTEGRAL;N;(0,1)
              INTEGRAL;LIMIT;(0,2)
              INTEGRAL;J;(2,0)
              ARRAY 5;AIN;(0,0)
              ARRAY 5;A1;(0,0)
              ARRAY 5;A;(0,0)
              } 2
            BOUNDARY [[(0,1,)], [(2,0);(1,0);(3,0)]]
            ----EDGES----
            3:0 -> 0:0 1
            2:0 -> 0:2 7
            1:0 -> 0:1 7
            0:1 -> 3:4 7
            0:1 -> 3:3 7
            0:1 -> 3:2 7
            0:1 -> 3:1 7
            0:1 -> 3:0 7
            0:1 -> 2:4 7
            0:1 -> 2:3 7
            0:1 -> 2:2 7
            0:1 -> 2:1 7
            0:1 -> 2:0 7
            0:1 -> 1:4 7
            0:1 -> 1:3 7
            0:1 -> 1:2 7
            0:1 -> 1:1 7
            0:1 -> 1:0 7
            GLOBAL-SYM: 
            INTEGRAL;OLD LIMIT;(0,2)
            INTEGRAL;OLD J;(0,3)
            ARRAY 5;OLD A;(0,0)
            INTEGRAL;N;(0,1)
            INTEGRAL;LIMIT;(0,2)
            INTEGRAL;J;(2,0)
            ARRAY 5;AIN;(0,0)
            ARRAY 5;A1;(0,0)
            ARRAY 5;A;(0,0)
            } 4 3,2,1,3
          2 ADD [||] [||]
          1 "1"
          BOUNDARY [[(0,3,J);(0,2,LIMIT);(0,1,N);(0,0,AIN)], [(4,0)]]
          ----EDGES----
          4:0 -> 0:0 7
          1:0 -> 2:1 5
          0:3 -> 2:0 5
          GLOBAL-SYM: 
          INTEGRAL;OLD LIMIT;(0,2)
          ARRAY 5;OLD A;(0,0)
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(0,3)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A1;(0,0)
          ARRAY 5;A;(0,0)
          LOCAL-SYM: 
          INTEGRAL;OLD J;(0,3)
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(2,0)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A1;(4,0)
          } 7
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 FINALVALUE [||] [|0|]
          BOUNDARY [[(0,1,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 1
          0:1 -> 1:0 1
          GLOBAL-SYM: 
          INTEGRAL;OLD LIMIT;(0,2)
          INTEGRAL;OLD J;(0,3)
          ARRAY 5;OLD A;(0,0)
          INTEGRAL;N;(0,1)
          INTEGRAL;LIMIT;(0,2)
          INTEGRAL;J;(2,0)
          ARRAY 5;AIN;(0,0)
          ARRAY 5;A1;(4,0)
          ARRAY 5;A;(0,0)
          } 2
        BOUNDARY [[(0,2,LIMIT);(0,1,N);(0,0,AIN)], []]
        GLOBAL-SYM: 
        INTEGRAL;OLD LIMIT;(0,2)
        INTEGRAL;OLD J;(0,3)
        ARRAY 5;OLD A;(0,0)
        INTEGRAL;N;(0,1)
        INTEGRAL;LIMIT;(0,2)
        INTEGRAL;J;(2,0)
        ARRAY 5;AIN;(0,0)
        ARRAY 5;A1;(4,0)
        ARRAY 5;A;(0,0)
        LOCAL-SYM: 
        INTEGRAL;N;(0,1)
        INTEGRAL;LIMIT;(0,2)
        ARRAY 5;AIN;(0,0)
        } 5 4,4,3,2,1
      2 SUBTRACT [||] [||]
      1 "1"
      BOUNDARY [[(0,2,LIMIT);(0,1,N);(0,0,AIN)], [(4,1)]]
      ----EDGES----
      4:1 -> 0:0 1
      2:0 -> 4:2 5
      1:0 -> 2:1 5
      0:1 -> 4:1 5
      0:0 -> 4:0 7
      0:2 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(0,2)
      ARRAY 5;AIN;(0,0)
      ARRAY 5;A;(0,0)
      LOCAL-SYM: 
      INTEGRAL;OLD LIMIT;(0,2)
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(2,0)
      ARRAY 5;AIN;(0,0)
      BOOLEAN;A;(4,1)
      } 7
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 FINALVALUE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:0 1
      GLOBAL-SYM: 
      INTEGRAL;OLD LIMIT;(0,2)
      INTEGRAL;N;(0,1)
      INTEGRAL;LIMIT;(2,0)
      ARRAY 5;AIN;(0,0)
      BOOLEAN;A;(4,1)
      } 2
    BOUNDARY [[], []]
    GLOBAL-SYM: 
    INTEGRAL;OLD LIMIT;(0,2)
    INTEGRAL;N;(0,1)
    INTEGRAL;LIMIT;(2,0)
    ARRAY 5;AIN;(0,0)
    BOOLEAN;A;(4,1)
    } 5 4,4,3,2,1
  BOUNDARY [[], [(1,1)], %na=BUBBLE]
  ----EDGES----
  1:1 -> 0:0 1
  LOCAL-SYM: 
  INTEGRAL;N;(0,0)
  ARRAY 5;AIN;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
14 FUNCTION_TYPE MAIN (ARGS: 13) (RETURNS:12)
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:7; Next label:0}
11 FUNCTION_TYPE BUBBLE (ARGS: 10) (RETURNS:8)
10 TUPLE {Type label:5; Next label:9}
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONEDIM:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
DEFINE MAIN
TYPE ONEDIM = ARRAY [INTEGER]
FUNCTION BUBBLE (N:INTEGER;AIN:ONEDIM RETURNS ONEDIM)
  FOR INITIAL      A,LIMIT := AIN,N
    WHILE LIMIT > 1
      REPEAT
      LIMIT := OLD LIMIT - 1;
      A := FOR INITIAL              J := 0;
        A1 := OLD A
            WHILE J < LIMIT
              REPEAT
          J := OLD J + 1;
          A1 := IF OLD A1[J] > OLD A1[J + 1] THEN
OLD A1 [ J:OLD A1[J + 1],OLD A1[J] ]
          ELSE OLD A1
          END IF
      RETURNS VALUE OF A1
            END FOR
  RETURNS VALUE OF A
    END FOR
END FUNCTION
FUNCTION MAIN (A:ONEDIM RETURNS ONEDIM)
  BUBBLE(ARRAY_SIZE(A),A)
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE STRING = ARRAY [CHARACTER]
FUNCTION CHARTOSTRING (C:CHARACTER RETURNS STRING)
  ARRAY  [1:C]
END FUNCTION
FUNCTION CRYPTO (PASSWORD,TRIAL:STRING RETURNS BOOLEAN)
  IF ARRAY_SIZE(PASSWORD) ~= ARRAY_SIZE(TRIAL) THEN
FALSE
  ELSE FOR A IN PASSWORD DOT B IN TRIAL
    RETURNS
      VALUE OF PRODUCT A = B
  END FOR
  END IF
END FUNCTION
FUNCTION FIRSTTRUE (FLAGS:ARRAY [BOOLEAN] RETURNS INTEGER)
  FOR INITIAL      I := ARRAY_LIML(FLAGS);
    N := ARRAY_LIMH(FLAGS)
    WHILE (I <= N & ~FLAGS[I])
      REPEAT
      I := OLD I + 1
  RETURNS VALUE OF I
    END FOR
END FUNCTION
FUNCTION MAIN (PASSWORD:STRING RETURNS STRING)
  LET
    POSSIBLE := FOR L0 IN 0,25 CROSS L1 IN 0,25
              TRIAL := FOR L2 IN 0,25
          RETURNS
            ARRAY OF ARRAY  [1:CHARACTER(97 + L0),CHARACTER(97 + L1),CHARACTER(97 + L2)]
        END FOR
      RETURNS
        VALUE OF CATENATE TRIAL
    END FOR;
    FLAGS := FOR TRIAL IN POSSIBLE
      RETURNS
        ARRAY OF CRYPTO(PASSWORD,TRIAL)
    END FOR;
    INDEX := FIRSTTRUE(FLAGS) IN
  POSSIBLE[INDEX]
  END LET
END FUNCTION
-------
Graph {
----NODES----
BOUNDARY [[], []]
GLOBAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L2;(0,2)
INTEGRAL;L1;(0,1)
INTEGRAL;L0;(0,0)
----TYPEMAP----
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 1
GOT 24
-------
Graph {
----NODES----
4 ASETL [||] [||]
3 "0"
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    11 ABUILD [||] [|0|]
    10 MULTIARITY [||] [||] %na=LET
    9 ADD [||] [||]
    8 "97"
    7 MULTIARITY [||] [||] %na=LET
    6 ADD [||] [||]
    5 "97"
    4 MULTIARITY [||] [||] %na=LET
    3 ADD [||] [||]
    2 "97"
    1 "1"
    BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
    ----EDGES----
    11:0 -> 0:0 11
    9:0 -> 11:3 5
    9:0 -> 10:0 5
    8:0 -> 9:0 5
    6:0 -> 11:2 5
    6:0 -> 7:0 5
    5:0 -> 6:0 5
    3:0 -> 11:1 5
    3:0 -> 4:0 5
    2:0 -> 3:0 5
    1:0 -> 11:0 5
    0:2 -> 9:1 5
    0:1 -> 6:1 5
    0:0 -> 3:1 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(3,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 12
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(3,0)
    } 4
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 24
    0:1 -> 1:1 11
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 2
  BOUNDARY [[(0,1,L1);(0,0,L0)], []]
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L2;(0,2)
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  LOCAL-SYM: 
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  } 4 3,2,3,1
BOUNDARY [[], []]
GLOBAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L1;(3,0)
INTEGRAL;L0;(3,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 5
GOT 24
-------
Graph {
----NODES----
4 ASETL [||] [||]
3 "0"
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    11 ABUILD [||] [|0|]
    10 MULTIARITY [||] [||] %na=LET
    9 ADD [||] [||]
    8 "97"
    7 MULTIARITY [||] [||] %na=LET
    6 ADD [||] [||]
    5 "97"
    4 MULTIARITY [||] [||] %na=LET
    3 ADD [||] [||]
    2 "97"
    1 "1"
    BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
    ----EDGES----
    11:0 -> 0:0 11
    9:0 -> 11:3 5
    9:0 -> 10:0 5
    8:0 -> 9:0 5
    6:0 -> 11:2 5
    6:0 -> 7:0 5
    5:0 -> 6:0 5
    3:0 -> 11:1 5
    3:0 -> 4:0 5
    2:0 -> 3:0 5
    1:0 -> 11:0 5
    0:2 -> 9:1 5
    0:1 -> 6:1 5
    0:0 -> 3:1 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(3,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 12
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(3,0)
    } 4
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 24
    0:1 -> 1:1 11
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 2
  BOUNDARY [[(0,1,L1);(0,0,L0)], []]
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L2;(0,2)
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  LOCAL-SYM: 
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  } 4 3,2,3,1
BOUNDARY [[], []]
----EDGES----
1:1 -> 4:0 24
GLOBAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L1;(3,0)
INTEGRAL;L0;(3,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 5
GOT 24
-------
Graph {
----NODES----
5 MULTIARITY [||] [||] %na=LET
4 ASETL [||] [||]
3 "0"
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    11 ABUILD [||] [|0|]
    10 MULTIARITY [||] [||] %na=LET
    9 ADD [||] [||]
    8 "97"
    7 MULTIARITY [||] [||] %na=LET
    6 ADD [||] [||]
    5 "97"
    4 MULTIARITY [||] [||] %na=LET
    3 ADD [||] [||]
    2 "97"
    1 "1"
    BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
    ----EDGES----
    11:0 -> 0:0 11
    9:0 -> 11:3 5
    9:0 -> 10:0 5
    8:0 -> 9:0 5
    6:0 -> 11:2 5
    6:0 -> 7:0 5
    5:0 -> 6:0 5
    3:0 -> 11:1 5
    3:0 -> 4:0 5
    2:0 -> 3:0 5
    1:0 -> 11:0 5
    0:2 -> 9:1 5
    0:1 -> 6:1 5
    0:0 -> 3:1 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(3,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 12
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(3,0)
    INTEGRAL;L0;(3,0)
    LOCAL-SYM: 
    INTEGRAL;L2;(3,0)
    } 4
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 24
    0:1 -> 1:1 11
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L2;(0,2)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    } 2
  BOUNDARY [[(0,1,L1);(0,0,L0)], []]
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L2;(0,2)
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  LOCAL-SYM: 
  INTEGRAL;L1;(0,1)
  INTEGRAL;L0;(0,0)
  } 4 3,2,3,1
BOUNDARY [[(0,1,L1);(0,0,L0)], []]
----EDGES----
4:0 -> 2:0 24
3:0 -> 4:0 24
1:1 -> 4:0 24
0:1 -> 1:1 5
0:0 -> 1:0 5
GLOBAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L1;(3,0)
INTEGRAL;L0;(3,0)
LOCAL-SYM: 
INTEGRAL;L1;(0,1)
INTEGRAL;L0;(0,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 6
GOT 24
-------
Graph {
----NODES----
2 "catenate"
1 REDUCE [||] [||]
BOUNDARY [[], []]
----EDGES----
2:0 -> 1:0 2
GLOBAL-SYM: 
ARRAY 11;TRIAL;(4,0)
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L1;(0,1)
INTEGRAL;L0;(0,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
GOT 24
-------
Graph {
----NODES----
3 "catenate"
2 REDUCE [||] [||]
1 0 %na=GENERATOR
  Graph {
  ----NODES----
  3 RANGEGEN [||] [|0|]
  2 "25"
  1 "0"
  BOUNDARY [[], [(3,0)]]
  ----EDGES----
  3:0 -> 0:0 5
  2:0 -> 3:1 5
  1:0 -> 3:0 5
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  LOCAL-SYM: 
  INTEGRAL;L0;(3,0)
  } 4
BOUNDARY [[], []]
----EDGES----
3:0 -> 2:0 2
GLOBAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;L0;(3,0)
----TYPEMAP----
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 4
GOT 24
-------
Graph {
----NODES----
3 MULTIARITY [||] [||] %na=LET
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      5 MULTIARITY [||] [||] %na=LET
      4 ASETL [||] [|0|]
      3 "0"
      2 MULTIARITY [||] [||] %na=multiARITY_1
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          11 ABUILD [||] [|0|]
          10 MULTIARITY [||] [||] %na=LET
          9 ADD [||] [||]
          8 "97"
          7 MULTIARITY [||] [||] %na=LET
          6 ADD [||] [||]
          5 "97"
          4 MULTIARITY [||] [||] %na=LET
          3 ADD [||] [||]
          2 "97"
          1 "1"
          BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
          ----EDGES----
          11:0 -> 0:0 11
          9:0 -> 11:3 5
          9:0 -> 10:0 5
          8:0 -> 9:0 5
          6:0 -> 11:2 5
          6:0 -> 7:0 5
          5:0 -> 6:0 5
          3:0 -> 11:1 5
          3:0 -> 4:0 5
          2:0 -> 3:0 5
          1:0 -> 11:0 5
          0:2 -> 9:1 5
          0:1 -> 6:1 5
          0:0 -> 3:1 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(3,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 12
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "25"
          1 "0"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 24
          0:1 -> 1:1 11
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 2
        BOUNDARY [[(0,1,L1);(0,0,L0)], []]
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L2;(0,2)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        LOCAL-SYM: 
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,1,L1);(0,0,L0)], [(4,0)]]
      ----EDGES----
      4:0 -> 5:0 24
      4:0 -> 2:0 24
      4:0 -> 0:0 24
      3:0 -> 4:0 24
      1:1 -> 4:0 24
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(3,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 6
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      INTEGRAL;L1;(3,0)
      } 4
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "catenate"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 24
      0:1 -> 1:1 24
      GLOBAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 3
    BOUNDARY [[(0,0,L0)], []]
    GLOBAL-SYM: 
    ARRAY 11;TRIAL;(4,0)
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(0,0)
    } 4 3,2,3,1
  2 0 %na=RETURN
    Graph {
    ----NODES----
    3 "catenate"
    2 REDUCE [||] [|0|]
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(3,0)
      } 4
    BOUNDARY [[(0,1,)], [(2,0)]]
    ----EDGES----
    3:0 -> 2:0 2
    2:0 -> 0:0 24
    0:1 -> 2:1 24
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L0;(3,0)
    } 4
  1 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(3,0)
    } 4
  BOUNDARY [[], [(3,0)]]
  ----EDGES----
  3:0 -> 0:0 24
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L0;(3,0)
  } 4 3,1,3,2
BOUNDARY [[], [], %na=MAIN]
----EDGES----
1:1 -> 2:0 24
LOCAL-SYM: 
ARRAY 2;PASSWORD;(0,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 4
GOT 24
-------
Graph {
----NODES----
1 ASCATTER [||] [||]
BOUNDARY [[(0,0,POSSIBLE)], []]
GLOBAL-SYM: 
ARRAY 11;POSSIBLE;(1,1)
ARRAY 2;PASSWORD;(0,0)
LOCAL-SYM: 
ARRAY 11;POSSIBLE;(0,0)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
-------
Graph {
----NODES----
BOUNDARY [[], []]
GLOBAL-SYM: 
ARRAY 5;TRIAL;(0,2)
ARRAY 11;POSSIBLE;(0,0)
ARRAY 2;PASSWORD;(0,1)
----TYPEMAP----
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 1
GOT 24
-------
Graph {
----NODES----
6 ALIML [||] [||] %na=ALimL
5 MULTIARITY [||] [||] %na=multiARITY_1
4 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    2 MULTIARITY [||] [||] %na=CRYPTO
    1 INVOCATION [||] [|0|] %na=CRYPTO
    BOUNDARY [[(0,2,TRIAL);(0,1,PASSWORD);(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 2:0 1
    1:0 -> 0:0 1
    0:2 -> 1:1 11
    0:1 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 3
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    1 ASCATTER [||] [|0|]
    BOUNDARY [[(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:1 11
    0:0 -> 1:0 24
    GLOBAL-SYM: 
    ARRAY 11;POSSIBLE;(1,1)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    } 2
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 25
    0:1 -> 1:1 0
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 2
  BOUNDARY [[(0,1,PASSWORD);(0,0,POSSIBLE)], []]
  GLOBAL-SYM: 
  ARRAY 5;TRIAL;(0,2)
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  LOCAL-SYM: 
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  } 4 3,2,3,1
3 MULTIARITY [||] [||] %na=LET
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      5 MULTIARITY [||] [||] %na=LET
      4 ASETL [||] [|0|]
      3 "0"
      2 MULTIARITY [||] [||] %na=multiARITY_1
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          11 ABUILD [||] [|0|]
          10 MULTIARITY [||] [||] %na=LET
          9 ADD [||] [||]
          8 "97"
          7 MULTIARITY [||] [||] %na=LET
          6 ADD [||] [||]
          5 "97"
          4 MULTIARITY [||] [||] %na=LET
          3 ADD [||] [||]
          2 "97"
          1 "1"
          BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
          ----EDGES----
          11:0 -> 0:0 11
          9:0 -> 11:3 5
          9:0 -> 10:0 5
          8:0 -> 9:0 5
          6:0 -> 11:2 5
          6:0 -> 7:0 5
          5:0 -> 6:0 5
          3:0 -> 11:1 5
          3:0 -> 4:0 5
          2:0 -> 3:0 5
          1:0 -> 11:0 5
          0:2 -> 9:1 5
          0:1 -> 6:1 5
          0:0 -> 3:1 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(3,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 12
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "25"
          1 "0"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 24
          0:1 -> 1:1 11
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 2
        BOUNDARY [[(0,1,L1);(0,0,L0)], []]
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L2;(0,2)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        LOCAL-SYM: 
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,1,L1);(0,0,L0)], [(4,0)]]
      ----EDGES----
      4:0 -> 5:0 24
      4:0 -> 2:0 24
      4:0 -> 0:0 24
      3:0 -> 4:0 24
      1:1 -> 4:0 24
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(3,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 6
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      INTEGRAL;L1;(3,0)
      } 4
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "catenate"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 24
      0:1 -> 1:1 24
      GLOBAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 3
    BOUNDARY [[(0,0,L0)], []]
    GLOBAL-SYM: 
    ARRAY 11;TRIAL;(4,0)
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(0,0)
    } 4 3,2,3,1
  2 0 %na=RETURN
    Graph {
    ----NODES----
    3 "catenate"
    2 REDUCE [||] [|0|]
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(3,0)
      } 4
    BOUNDARY [[(0,1,)], [(2,0)]]
    ----EDGES----
    3:0 -> 2:0 2
    2:0 -> 0:0 24
    0:1 -> 2:1 24
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L0;(3,0)
    } 4
  1 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(3,0)
    } 4
  BOUNDARY [[], [(3,0)]]
  ----EDGES----
  3:0 -> 0:0 24
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L0;(3,0)
  } 4 3,1,3,2
BOUNDARY [[], [], %na=MAIN]
----EDGES----
1:1 -> 3:0 24
1:1 -> 2:0 24
LOCAL-SYM: 
ARRAY 11;POSSIBLE;(1,1)
ARRAY 2;PASSWORD;(0,0)
----TYPEMAP----
25 ARRAY 0
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 7
GOT 24
-------
Graph {
----NODES----
7 ASETL [||] [||]
6 ALIML [||] [||] %na=ALimL
5 MULTIARITY [||] [||] %na=multiARITY_1
4 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    2 MULTIARITY [||] [||] %na=CRYPTO
    1 INVOCATION [||] [|0|] %na=CRYPTO
    BOUNDARY [[(0,2,TRIAL);(0,1,PASSWORD);(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 2:0 1
    1:0 -> 0:0 1
    0:2 -> 1:1 11
    0:1 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 3
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    1 ASCATTER [||] [|0|]
    BOUNDARY [[(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:1 11
    0:0 -> 1:0 24
    GLOBAL-SYM: 
    ARRAY 11;POSSIBLE;(1,1)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    } 2
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 25
    0:1 -> 1:1 0
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 2
  BOUNDARY [[(0,1,PASSWORD);(0,0,POSSIBLE)], []]
  GLOBAL-SYM: 
  ARRAY 5;TRIAL;(0,2)
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  LOCAL-SYM: 
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  } 4 3,2,3,1
3 MULTIARITY [||] [||] %na=LET
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      5 MULTIARITY [||] [||] %na=LET
      4 ASETL [||] [|0|]
      3 "0"
      2 MULTIARITY [||] [||] %na=multiARITY_1
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          11 ABUILD [||] [|0|]
          10 MULTIARITY [||] [||] %na=LET
          9 ADD [||] [||]
          8 "97"
          7 MULTIARITY [||] [||] %na=LET
          6 ADD [||] [||]
          5 "97"
          4 MULTIARITY [||] [||] %na=LET
          3 ADD [||] [||]
          2 "97"
          1 "1"
          BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
          ----EDGES----
          11:0 -> 0:0 11
          9:0 -> 11:3 5
          9:0 -> 10:0 5
          8:0 -> 9:0 5
          6:0 -> 11:2 5
          6:0 -> 7:0 5
          5:0 -> 6:0 5
          3:0 -> 11:1 5
          3:0 -> 4:0 5
          2:0 -> 3:0 5
          1:0 -> 11:0 5
          0:2 -> 9:1 5
          0:1 -> 6:1 5
          0:0 -> 3:1 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(3,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 12
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "25"
          1 "0"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 24
          0:1 -> 1:1 11
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 2
        BOUNDARY [[(0,1,L1);(0,0,L0)], []]
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L2;(0,2)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        LOCAL-SYM: 
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,1,L1);(0,0,L0)], [(4,0)]]
      ----EDGES----
      4:0 -> 5:0 24
      4:0 -> 2:0 24
      4:0 -> 0:0 24
      3:0 -> 4:0 24
      1:1 -> 4:0 24
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(3,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 6
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      INTEGRAL;L1;(3,0)
      } 4
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "catenate"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 24
      0:1 -> 1:1 24
      GLOBAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 3
    BOUNDARY [[(0,0,L0)], []]
    GLOBAL-SYM: 
    ARRAY 11;TRIAL;(4,0)
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(0,0)
    } 4 3,2,3,1
  2 0 %na=RETURN
    Graph {
    ----NODES----
    3 "catenate"
    2 REDUCE [||] [|0|]
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(3,0)
      } 4
    BOUNDARY [[(0,1,)], [(2,0)]]
    ----EDGES----
    3:0 -> 2:0 2
    2:0 -> 0:0 24
    0:1 -> 2:1 24
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L0;(3,0)
    } 4
  1 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(3,0)
    } 4
  BOUNDARY [[], [(3,0)]]
  ----EDGES----
  3:0 -> 0:0 24
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L0;(3,0)
  } 4 3,1,3,2
BOUNDARY [[(0,0,)], [], %na=MAIN]
----EDGES----
7:0 -> 5:0 25
6:0 -> 7:1 5
4:1 -> 7:0 25
1:1 -> 3:0 24
1:1 -> 2:0 24
0:0 -> 6:0 24
LOCAL-SYM: 
ARRAY 11;POSSIBLE;(1,1)
ARRAY 2;PASSWORD;(0,0)
----TYPEMAP----
25 ARRAY 0
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 8
GOT 24
-------
Graph {
----NODES----
12 AELEMENT [||] [||]
11 MULTIARITY [||] [||] %na=LET
10 MULTIARITY [||] [||] %na=FIRSTTRUE
9 INVOCATION [||] [||] %na=FIRSTTRUE
8 MULTIARITY [||] [||] %na=LET
7 ASETL [||] [||]
6 ALIML [||] [||] %na=ALimL
5 MULTIARITY [||] [||] %na=multiARITY_1
4 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=BODY
    Graph {
    ----NODES----
    2 MULTIARITY [||] [||] %na=CRYPTO
    1 INVOCATION [||] [|0|] %na=CRYPTO
    BOUNDARY [[(0,2,TRIAL);(0,1,PASSWORD);(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 2:0 1
    1:0 -> 0:0 1
    0:2 -> 1:1 11
    0:1 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 3
  2 0 %na=GENERATOR
    Graph {
    ----NODES----
    1 ASCATTER [||] [|0|]
    BOUNDARY [[(0,0,POSSIBLE)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:1 11
    0:0 -> 1:0 24
    GLOBAL-SYM: 
    ARRAY 11;POSSIBLE;(1,1)
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    ARRAY 5;TRIAL;(1,0)
    ARRAY 11;POSSIBLE;(0,0)
    } 2
  1 0 %na=RETURN
    Graph {
    ----NODES----
    1 AGATHER [||] [|0|]
    BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
    ----EDGES----
    1:0 -> 0:0 25
    0:1 -> 1:1 0
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 2
  BOUNDARY [[(0,1,PASSWORD);(0,0,POSSIBLE)], []]
  GLOBAL-SYM: 
  ARRAY 5;TRIAL;(0,2)
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  LOCAL-SYM: 
  ARRAY 11;POSSIBLE;(0,0)
  ARRAY 2;PASSWORD;(0,1)
  } 4 3,2,3,1
3 MULTIARITY [||] [||] %na=LET
2 MULTIARITY [||] [||] %na=multiARITY_1
1 0 %na=FORALL
  Graph {
  ----NODES----
  3 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      5 MULTIARITY [||] [||] %na=LET
      4 ASETL [||] [|0|]
      3 "0"
      2 MULTIARITY [||] [||] %na=multiARITY_1
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          11 ABUILD [||] [|0|]
          10 MULTIARITY [||] [||] %na=LET
          9 ADD [||] [||]
          8 "97"
          7 MULTIARITY [||] [||] %na=LET
          6 ADD [||] [||]
          5 "97"
          4 MULTIARITY [||] [||] %na=LET
          3 ADD [||] [||]
          2 "97"
          1 "1"
          BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
          ----EDGES----
          11:0 -> 0:0 11
          9:0 -> 11:3 5
          9:0 -> 10:0 5
          8:0 -> 9:0 5
          6:0 -> 11:2 5
          6:0 -> 7:0 5
          5:0 -> 6:0 5
          3:0 -> 11:1 5
          3:0 -> 4:0 5
          2:0 -> 3:0 5
          1:0 -> 11:0 5
          0:2 -> 9:1 5
          0:1 -> 6:1 5
          0:0 -> 3:1 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(3,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 12
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "25"
          1 "0"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L1;(3,0)
          INTEGRAL;L0;(3,0)
          LOCAL-SYM: 
          INTEGRAL;L2;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 24
          0:1 -> 1:1 11
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 2
        BOUNDARY [[(0,1,L1);(0,0,L0)], []]
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L2;(0,2)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        LOCAL-SYM: 
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,1,L1);(0,0,L0)], [(4,0)]]
      ----EDGES----
      4:0 -> 5:0 24
      4:0 -> 2:0 24
      4:0 -> 0:0 24
      3:0 -> 4:0 24
      1:1 -> 4:0 24
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(3,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 6
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L0;(3,0)
      LOCAL-SYM: 
      INTEGRAL;L1;(3,0)
      } 4
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "catenate"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 24
      0:1 -> 1:1 24
      GLOBAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      } 3
    BOUNDARY [[(0,0,L0)], []]
    GLOBAL-SYM: 
    ARRAY 11;TRIAL;(4,0)
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L1;(0,1)
    INTEGRAL;L0;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(0,0)
    } 4 3,2,3,1
  2 0 %na=RETURN
    Graph {
    ----NODES----
    3 "catenate"
    2 REDUCE [||] [|0|]
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(3,0)
      } 4
    BOUNDARY [[(0,1,)], [(2,0)]]
    ----EDGES----
    3:0 -> 2:0 2
    2:0 -> 0:0 24
    0:1 -> 2:1 24
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L0;(3,0)
    } 4
  1 0 %na=GENERATOR
    Graph {
    ----NODES----
    3 RANGEGEN [||] [|0|]
    2 "25"
    1 "0"
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 5
    2:0 -> 3:1 5
    1:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    LOCAL-SYM: 
    INTEGRAL;L0;(3,0)
    } 4
  BOUNDARY [[], [(3,0)]]
  ----EDGES----
  3:0 -> 0:0 24
  GLOBAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  INTEGRAL;L0;(3,0)
  } 4 3,1,3,2
BOUNDARY [[(0,0,)], [], %na=MAIN]
----EDGES----
9:0 -> 12:1 5
9:0 -> 11:0 5
9:0 -> 10:0 5
7:0 -> 9:0 25
7:0 -> 8:0 25
7:0 -> 5:0 25
6:0 -> 7:1 5
4:1 -> 7:0 25
1:1 -> 4:0 24
1:1 -> 3:0 24
1:1 -> 2:0 24
0:0 -> 6:0 24
0:0 -> 4:1 7
LOCAL-SYM: 
ARRAY 11;POSSIBLE;(1,1)
ARRAY 2;PASSWORD;(0,0)
INTEGRAL;INDEX;(9,0)
ARRAY 0;FLAGS;(7,0)
----TYPEMAP----
25 ARRAY 0
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 13
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 11; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [31; 1; 0; 0; 5; 31; 0; 0; 1; 2; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d2ae2b.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 1; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1f37a9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 2; 0; 2; 0; 2; 2; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (3,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
SIZE 1 :- (3,2 aka [41; 0; 1; 0; 7; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4716a2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 2; 0; 2; 16; 0; 3; 1; 2; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c3db71.dot
Val-nums
Output Dot in /tmp/graph-038b77.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-a65bbb.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-5453ab.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (3,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
SIZE 1 :- (3,2 aka [43; 0; 1; 0; 7; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [15; 1; 0; 0; 5; 15; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-fc9b41.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-153d9b.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-5ba08d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [50; 0; 1; 0; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-0d6f9a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [13; 0; 1; 0; 5; 13; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2c2c22.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [17; 0; 1; 0; 5; 17; 0; 2; 1; 5; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [32; 0; 0; 0; 16; 32; 0; 1; 1; 5; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [6; 2; 0; 0; 1; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,4 aka [9; 1; 0; 0; 1; 9; 3; 0; 1; 1; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e1db87.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; 0; 3; 0; 2; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [36; 0; 0; 0; 16; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [37; 0; 0; 0; 16; -1])
WITNESS:3
Val-nums
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5087b0.dot
Val-nums
Output Dot in /tmp/graph-398584.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-952c15.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-ac750e.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-126d8a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 24; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,2 aka [45; 3; 0; 0; 2; 45; 0; 1; 1; 24; -1])
WITNESS:2
Val-nums
3 -> 3
2 -> 2
0 -> 0
Output Dot in /tmp/graph-e3ca7d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 24; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 24; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-75908b.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-d5110e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 24; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 11; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-197503.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-70e814.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 11; 0; 0; 11; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
SIZE 1 :- (1,8 aka [8; -1])
WITNESS:8
-------------------
At Height:2
SIZE 1 :- (2,3 aka [13; 2; 0; 0; 5; 13; 0; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (2,6 aka [13; 5; 0; 0; 5; 13; 0; 1; 1; 5; -1])
WITNESS:6
SIZE 1 :- (2,9 aka [13; 8; 0; 0; 5; 13; 0; 2; 1; 5; -1])
WITNESS:9
-------------------
At Height:3
SIZE 1 :- (1,11 aka [31; 1; 0; 0; 5; 31; 3; 0; 1; 5; 31; 6; 0; 2; 5; 31; 9; 0; 3; 5; -1])
WITNESS:11
Val-nums
11 -> 11
9 -> 9
8 -> 8
6 -> 6
5 -> 5
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2995a3.dot
Val-nums
Output Dot in /tmp/graph-851d1e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 24; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 24; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-38be79.dot
Val-nums
Output Dot in /tmp/graph-064d58.dot
-------------------
At Height:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
Output Dot in /tmp/graph-bbd105.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 25; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 0; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-6f6319.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 11; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 24; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-05699d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 1; 0; 7; 5; 0; 2; 1; 11; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-900288.dot
Val-nums
Output Dot in /tmp/graph-9087fd.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 12; 0; 0; 11; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,6 aka [36; 0; 0; 0; 24; -1])
WITNESS:6
-------------------
At Height:3
SIZE 1 :- (1,7 aka [42; 6; 0; 1; 5; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,9 aka [5; 7; 0; 0; 25; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,12 aka [32; 9; 0; 1; 5; -1])
WITNESS:12
Val-nums
12 -> 12
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-0988fc.dot
Val-nums
Output Dot in /tmp/graph-a936f6.dot
Result graph
Graph {
----NODES----
4 0
  Graph {
  ----NODES----
  12 AELEMENT [||] [|0|]
  9 INVOCATION [||] [||] %na=FIRSTTRUE
  7 ASETL [||] [||]
  6 ALIML [||] [||] %na=ALimL
  4 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      1 INVOCATION [||] [|0|] %na=CRYPTO
      BOUNDARY [[(0,2,TRIAL);(0,1,PASSWORD);(0,0,POSSIBLE)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 1
      0:2 -> 1:1 11
      0:1 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;TRIAL;(1,0)
      ARRAY 11;POSSIBLE;(0,0)
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      ARRAY 5;TRIAL;(0,2)
      ARRAY 11;POSSIBLE;(0,0)
      ARRAY 2;PASSWORD;(0,1)
      } 3
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,POSSIBLE)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 11
      0:0 -> 1:0 24
      GLOBAL-SYM: 
      ARRAY 11;POSSIBLE;(1,1)
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      ARRAY 5;TRIAL;(1,0)
      ARRAY 11;POSSIBLE;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 25
      0:1 -> 1:1 0
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 5;TRIAL;(0,2)
      ARRAY 11;POSSIBLE;(0,0)
      ARRAY 2;PASSWORD;(0,1)
      } 2
    BOUNDARY [[(0,1,PASSWORD);(0,0,POSSIBLE)], []]
    GLOBAL-SYM: 
    ARRAY 5;TRIAL;(0,2)
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    LOCAL-SYM: 
    ARRAY 11;POSSIBLE;(0,0)
    ARRAY 2;PASSWORD;(0,1)
    } 4 3,2,3,1
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=FORALL
      Graph {
      ----NODES----
      3 0 %na=BODY
        Graph {
        ----NODES----
        4 ASETL [||] [|0|]
        3 "0"
        1 0 %na=FORALL
          Graph {
          ----NODES----
          3 0 %na=BODY
            Graph {
            ----NODES----
            11 ABUILD [||] [|0|]
            9 ADD [||] [||]
            8 "97"
            6 ADD [||] [||]
            5 "97"
            3 ADD [||] [||]
            2 "97"
            1 "1"
            BOUNDARY [[(0,2,L2);(0,1,L1);(0,0,L0)], [(11,0)]]
            ----EDGES----
            11:0 -> 0:0 11
            9:0 -> 11:3 5
            8:0 -> 9:0 5
            6:0 -> 11:2 5
            5:0 -> 6:0 5
            3:0 -> 11:1 5
            2:0 -> 3:0 5
            1:0 -> 11:0 5
            0:2 -> 9:1 5
            0:1 -> 6:1 5
            0:0 -> 3:1 5
            GLOBAL-SYM: 
            ARRAY 2;PASSWORD;(0,0)
            INTEGRAL;L2;(3,0)
            INTEGRAL;L1;(3,0)
            INTEGRAL;L0;(3,0)
            LOCAL-SYM: 
            INTEGRAL;L2;(0,2)
            INTEGRAL;L1;(0,1)
            INTEGRAL;L0;(0,0)
            } 12
          2 0 %na=GENERATOR
            Graph {
            ----NODES----
            3 RANGEGEN [||] [|0|]
            2 "25"
            1 "0"
            BOUNDARY [[], [(3,0)]]
            ----EDGES----
            3:0 -> 0:0 5
            2:0 -> 3:1 5
            1:0 -> 3:0 5
            GLOBAL-SYM: 
            ARRAY 2;PASSWORD;(0,0)
            INTEGRAL;L1;(3,0)
            INTEGRAL;L0;(3,0)
            LOCAL-SYM: 
            INTEGRAL;L2;(3,0)
            } 4
          1 0 %na=RETURN
            Graph {
            ----NODES----
            1 AGATHER [||] [|0|]
            BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
            ----EDGES----
            1:0 -> 0:0 24
            0:1 -> 1:1 11
            0:0 -> 1:0 5
            GLOBAL-SYM: 
            ARRAY 2;PASSWORD;(0,0)
            INTEGRAL;L2;(0,2)
            INTEGRAL;L1;(0,1)
            INTEGRAL;L0;(0,0)
            } 2
          BOUNDARY [[(0,1,L1);(0,0,L0)], []]
          GLOBAL-SYM: 
          ARRAY 2;PASSWORD;(0,0)
          INTEGRAL;L2;(0,2)
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          LOCAL-SYM: 
          INTEGRAL;L1;(0,1)
          INTEGRAL;L0;(0,0)
          } 4 3,2,3,1
        BOUNDARY [[(0,1,L1);(0,0,L0)], [(4,0)]]
        ----EDGES----
        4:0 -> 0:0 24
        3:0 -> 4:0 24
        1:1 -> 4:0 24
        0:1 -> 1:1 5
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L1;(3,0)
        INTEGRAL;L0;(3,0)
        LOCAL-SYM: 
        ARRAY 11;TRIAL;(4,0)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 6
      2 0 %na=GENERATOR
        Graph {
        ----NODES----
        3 RANGEGEN [||] [|0|]
        2 "25"
        1 "0"
        BOUNDARY [[], [(3,0)]]
        ----EDGES----
        3:0 -> 0:0 5
        2:0 -> 3:1 5
        1:0 -> 3:0 5
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L0;(3,0)
        LOCAL-SYM: 
        INTEGRAL;L1;(3,0)
        } 4
      1 0 %na=RETURN
        Graph {
        ----NODES----
        2 "catenate"
        1 REDUCE [||] [|0|]
        BOUNDARY [[(0,1,)], [(1,0)]]
        ----EDGES----
        2:0 -> 1:0 2
        1:0 -> 0:0 24
        0:1 -> 1:1 24
        GLOBAL-SYM: 
        ARRAY 11;TRIAL;(4,0)
        ARRAY 2;PASSWORD;(0,0)
        INTEGRAL;L1;(0,1)
        INTEGRAL;L0;(0,0)
        } 3
      BOUNDARY [[(0,0,L0)], []]
      GLOBAL-SYM: 
      ARRAY 11;TRIAL;(4,0)
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L1;(0,1)
      INTEGRAL;L0;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(0,0)
      } 4 3,2,3,1
    2 0 %na=RETURN
      Graph {
      ----NODES----
      3 "catenate"
      2 REDUCE [||] [|0|]
      1 0 %na=GENERATOR
        Graph {
        ----NODES----
        3 RANGEGEN [||] [|0|]
        2 "25"
        1 "0"
        BOUNDARY [[], [(3,0)]]
        ----EDGES----
        3:0 -> 0:0 5
        2:0 -> 3:1 5
        1:0 -> 3:0 5
        GLOBAL-SYM: 
        ARRAY 2;PASSWORD;(0,0)
        LOCAL-SYM: 
        INTEGRAL;L0;(3,0)
        } 4
      BOUNDARY [[(0,1,)], [(2,0)]]
      ----EDGES----
      3:0 -> 2:0 2
      2:0 -> 0:0 24
      0:1 -> 2:1 24
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      INTEGRAL;L0;(3,0)
      } 4
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      3 RANGEGEN [||] [|0|]
      2 "25"
      1 "0"
      BOUNDARY [[], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      INTEGRAL;L0;(3,0)
      } 4
    BOUNDARY [[], [(3,0)]]
    ----EDGES----
    3:0 -> 0:0 24
    GLOBAL-SYM: 
    ARRAY 2;PASSWORD;(0,0)
    INTEGRAL;L0;(3,0)
    } 4 3,1,3,2
  BOUNDARY [[(0,0,)], [(12,0)], %na=MAIN]
  ----EDGES----
  12:0 -> 0:0 11
  9:0 -> 12:1 5
  7:0 -> 9:0 25
  6:0 -> 7:1 5
  4:1 -> 7:0 25
  1:1 -> 12:0 24
  1:1 -> 4:0 24
  0:0 -> 6:0 24
  0:0 -> 4:1 7
  LOCAL-SYM: 
  ARRAY 2;PASSWORD;(0,0)
  } 14
3 0
  Graph {
  ----NODES----
  1 0 %na=LoopB
    Graph {
    ----NODES----
    4 0 %na=INIT
      Graph {
      ----NODES----
      3 ALIMH [||] [|0|]
      1 ALIML [||] [|0|]
      BOUNDARY [[(0,0,FLAGS)], [(3,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 5
      1:0 -> 0:1 5
      0:0 -> 3:0 16
      0:0 -> 1:0 16
      GLOBAL-SYM: 
      ARRAY 1;FLAGS;(0,0)
      LOCAL-SYM: 
      INTEGRAL;N;(3,0)
      INTEGRAL;I;(1,0)
      ARRAY 1;FLAGS;(0,0)
      } 5
    3 0 %na=TEST
      Graph {
      ----NODES----
      4 AND [||] [|0|]
      3 NOT [||] [||]
      2 AELEMENT [||] [||]
      1 LESSER_EQUAL [||] [||]
      BOUNDARY [[(0,2,N);(0,1,I);(0,0,FLAGS)], [(4,0)]]
      ----EDGES----
      4:0 -> 0:0 1
      3:0 -> 4:1 1
      2:0 -> 3:0 1
      1:0 -> 4:0 1
      0:1 -> 2:1 5
      0:0 -> 2:0 16
      0:2 -> 1:1 5
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;N;(3,0)
      INTEGRAL;I;(1,0)
      ARRAY 1;FLAGS;(0,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,2)
      INTEGRAL;I;(0,1)
      ARRAY 1;FLAGS;(0,0)
      } 7
    2 0 %na=BODY
      Graph {
      ----NODES----
      2 ADD [||] [||]
      1 "1"
      BOUNDARY [[(0,2,N);(0,1,I);(0,0,FLAGS)], []]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:1 5
      0:1 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;N;(0,2)
      INTEGRAL;I;(0,1)
      ARRAY 1;FLAGS;(0,0)
      LOCAL-SYM: 
      INTEGRAL;OLD I;(0,1)
      INTEGRAL;N;(0,2)
      INTEGRAL;I;(2,0)
      ARRAY 1;FLAGS;(0,0)
      } 4
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 FINALVALUE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:0 1
      GLOBAL-SYM: 
      INTEGRAL;OLD I;(0,1)
      INTEGRAL;N;(0,2)
      INTEGRAL;I;(2,0)
      ARRAY 1;FLAGS;(0,0)
      } 2
    BOUNDARY [[], []]
    GLOBAL-SYM: 
    INTEGRAL;OLD I;(0,1)
    INTEGRAL;N;(0,2)
    INTEGRAL;I;(2,0)
    ARRAY 1;FLAGS;(0,0)
    } 5 4,4,3,2,1
  BOUNDARY [[], [(1,1)], %na=FIRSTTRUE]
  ----EDGES----
  1:1 -> 0:0 1
  LOCAL-SYM: 
  ARRAY 1;FLAGS;(0,0)
  } 3
2 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 NOT_EQUAL [||] [||]
      2 ASIZE [||] [||]
      1 ASIZE [||] [||]
      BOUNDARY [[(0,1,TRIAL);(0,0,PASSWORD)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:1 -> 2:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 2;TRIAL;(0,1)
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      ARRAY 2;TRIAL;(0,1)
      ARRAY 2;PASSWORD;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      1 "False"
      BOUNDARY [[], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 1
      GLOBAL-SYM: 
      ARRAY 2;TRIAL;(0,1)
      ARRAY 2;PASSWORD;(0,0)
      } 3
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          1 EQUAL [||] [|0|]
          BOUNDARY [[(0,3,B);(0,2,A);(0,1,TRIAL);(0,0,PASSWORD)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 1
          0:3 -> 1:1 2
          0:2 -> 1:0 2
          GLOBAL-SYM: 
          ARRAY 2;TRIAL;(0,1)
          ARRAY 2;PASSWORD;(0,0)
          CHARACTER;B;(2,0)
          CHARACTER;A;(1,0)
          LOCAL-SYM: 
          ARRAY 2;TRIAL;(0,1)
          ARRAY 2;PASSWORD;(0,0)
          CHARACTER;B;(0,3)
          CHARACTER;A;(0,2)
          } 2
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          2 ASCATTER [||] [|0|]
          1 ASCATTER [||] [|0|]
          BOUNDARY [[(0,1,TRIAL);(0,0,PASSWORD)], [(2,0);(1,0)]]
          ----EDGES----
          2:0 -> 0:2 2
          1:0 -> 0:1 2
          0:1 -> 2:0 7
          0:0 -> 1:0 7
          GLOBAL-SYM: 
          ARRAY 2;TRIAL;(0,1)
          ARRAY 2;PASSWORD;(0,0)
          LOCAL-SYM: 
          ARRAY 2;TRIAL;(0,1)
          ARRAY 2;PASSWORD;(0,0)
          CHARACTER;B;(2,0)
          CHARACTER;A;(1,0)
          } 3
        1 0 %na=RETURN
          Graph {
          ----NODES----
          2 "product"
          1 REDUCE [||] [|0|]
          BOUNDARY [[(0,1,)], [(1,0)]]
          ----EDGES----
          2:0 -> 1:0 2
          1:0 -> 0:0 1
          0:1 -> 1:1 1
          GLOBAL-SYM: 
          ARRAY 2;TRIAL;(0,1)
          ARRAY 2;PASSWORD;(0,0)
          CHARACTER;B;(0,3)
          CHARACTER;A;(0,2)
          } 3
        BOUNDARY [[(0,1,TRIAL);(0,0,PASSWORD)], []]
        GLOBAL-SYM: 
        ARRAY 2;TRIAL;(0,1)
        ARRAY 2;PASSWORD;(0,0)
        CHARACTER;B;(0,3)
        CHARACTER;A;(0,2)
        LOCAL-SYM: 
        ARRAY 2;TRIAL;(0,1)
        ARRAY 2;PASSWORD;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,1,TRIAL);(0,0,PASSWORD)], [(1,1)]]
      ----EDGES----
      1:1 -> 0:0 1
      0:1 -> 1:1 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 2;TRIAL;(0,1)
      ARRAY 2;PASSWORD;(0,0)
      LOCAL-SYM: 
      ARRAY 2;TRIAL;(0,1)
      ARRAY 2;PASSWORD;(0,0)
      } 4
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,1);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 1
    1:1 -> 0:1 1
    0:1 -> 3:1 7
    0:0 -> 3:0 7
    0:1 -> 1:1 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 2;TRIAL;(0,1)
    ARRAY 2;PASSWORD;(0,0)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=CRYPTO]
  ----EDGES----
  1:0 -> 0:0 1
  LOCAL-SYM: 
  ARRAY 2;TRIAL;(0,1)
  ARRAY 2;PASSWORD;(0,0)
  } 3
1 11
  Graph {
  ----NODES----
  2 ABUILD [||] [|0|]
  1 "1"
  BOUNDARY [[(0,0,)], [(2,0)], %na=CHARTOSTRING]
  ----EDGES----
  2:0 -> 0:0 11
  1:0 -> 2:0 5
  0:0 -> 2:1 2
  LOCAL-SYM: 
  CHARACTER;C;(0,0)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
25 ARRAY 0
24 ARRAY 11
23 FUNCTION_TYPE MAIN (ARGS: 22) (RETURNS:21)
22 TUPLE {Type label:7; Next label:0}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE FIRSTTRUE (ARGS: 19) (RETURNS:17)
19 TUPLE {Type label:18; Next label:0}
18 ARRAY 1
17 TUPLE {Type label:5; Next label:0}
16 ARRAY 1
15 FUNCTION_TYPE CRYPTO (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:7; Next label:13}
13 TUPLE {Type label:7; Next label:0}
12 TUPLE {Type label:1; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE CHARTOSTRING (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:2; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 5
DEFINE MAIN
TYPE STRING = ARRAY [CHARACTER]
FUNCTION CHARTOSTRING (C:CHARACTER RETURNS STRING)
  ARRAY  [1:C]
END FUNCTION
FUNCTION CRYPTO (PASSWORD,TRIAL:STRING RETURNS BOOLEAN)
  IF ARRAY_SIZE(PASSWORD) ~= ARRAY_SIZE(TRIAL) THEN
FALSE
  ELSE FOR A IN PASSWORD DOT B IN TRIAL
    RETURNS
      VALUE OF PRODUCT A = B
  END FOR
  END IF
END FUNCTION
FUNCTION FIRSTTRUE (FLAGS:ARRAY [BOOLEAN] RETURNS INTEGER)
  FOR INITIAL      I := ARRAY_LIML(FLAGS);
    N := ARRAY_LIMH(FLAGS)
    WHILE (I <= N & ~FLAGS[I])
      REPEAT
      I := OLD I + 1
  RETURNS VALUE OF I
    END FOR
END FUNCTION
FUNCTION MAIN (PASSWORD:STRING RETURNS STRING)
  LET
    POSSIBLE := FOR L0 IN 0,25 CROSS L1 IN 0,25
              TRIAL := FOR L2 IN 0,25
          RETURNS
            ARRAY OF ARRAY  [1:CHARACTER(97 + L0),CHARACTER(97 + L1),CHARACTER(97 + L2)]
        END FOR
      RETURNS
        VALUE OF CATENATE TRIAL
    END FOR;
    FLAGS := FOR TRIAL IN POSSIBLE
      RETURNS
        ARRAY OF CRYPTO(PASSWORD,TRIAL)
    END FOR;
    INDEX := FIRSTTRUE(FLAGS) IN
  POSSIBLE[INDEX]
  END LET
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (X,EPS:REAL RETURNS REAL)
  FOR INITIAL      ROOT := X / 2.
  

        REPEAT
      ROOT := (X / OLD ROOT + OLD ROOT) / 2.
  UNTIL (X - (ROOT * ROOT)) < EPS
  RETURNS VALUE OF ROOT
    END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
SIZE 1 :- (1,1 aka [50; 0; 1; 0; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d3d82f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 1; 3; -1])
WITNESS:0
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,1 aka [10; 0; 0; 0; 3; 10; 0; 1; 1; 3; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,2 aka [13; 1; 0; 0; 3; 13; 0; 1; 1; 3; -1])
WITNESS:2
-------------------
At Height:4
SIZE 1 :- (1,5 aka [10; 2; 0; 0; 3; 10; 4; 0; 1; 3; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-58eea7.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [11; 0; 1; 0; 3; 11; 0; 1; 1; 3; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [12; 0; 0; 0; 3; 12; 1; 0; 1; 3; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,5 aka [18; 3; 0; 0; 3; 18; 0; 2; 1; 3; -1])
WITNESS:5
Val-nums
5 -> 5
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b9a412.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 3; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [10; 0; 0; 0; 3; 10; 1; 0; 1; 3; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-26dde9.dot
Val-nums
Output Dot in /tmp/graph-53333f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-bef63c.dot
Val-nums
Output Dot in /tmp/graph-a46c12.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=LoopA
    Graph {
    ----NODES----
    4 0 %na=INIT
      Graph {
      ----NODES----
      2 DIVIDE [||] [|0|]
      1 "2."
      BOUNDARY [[(0,0,X)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 3
      1:0 -> 2:1 3
      0:0 -> 2:0 3
      GLOBAL-SYM: 
      REAL;X;(0,0)
      REAL;EPS;(0,1)
      LOCAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(2,0)
      } 4
    3 0 %na=TEST
      Graph {
      ----NODES----
      5 LESSER [||] [|0|]
      3 SUBTRACT [||] [||]
      1 TIMES [||] [||]
      BOUNDARY [[(0,2,EPS);(0,1,ROOT);(0,0,X)], [(5,0)]]
      ----EDGES----
      5:0 -> 0:0 1
      3:0 -> 5:0 3
      1:0 -> 3:1 3
      0:2 -> 5:1 3
      0:0 -> 3:0 3
      0:1 -> 1:1 3
      0:1 -> 1:0 3
      GLOBAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(2,0)
      REAL;EPS;(0,1)
      LOCAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(0,1)
      REAL;EPS;(0,2)
      } 7
    2 0 %na=BODY
      Graph {
      ----NODES----
      5 DIVIDE [||] [||]
      4 "2."
      2 ADD [||] [||]
      1 DIVIDE [||] [||]
      BOUNDARY [[(0,2,EPS);(0,1,ROOT);(0,0,X)], []]
      ----EDGES----
      5:0 -> 0:1 3
      4:0 -> 5:1 3
      2:0 -> 5:0 3
      1:0 -> 2:0 3
      0:1 -> 2:1 3
      0:1 -> 1:1 3
      0:0 -> 1:0 3
      GLOBAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(0,1)
      REAL;EPS;(0,2)
      LOCAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(5,0)
      REAL;OLD ROOT;(0,1)
      REAL;EPS;(0,2)
      } 7
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 FINALVALUE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:0 1
      GLOBAL-SYM: 
      REAL;X;(0,0)
      REAL;ROOT;(5,0)
      REAL;OLD ROOT;(0,1)
      REAL;EPS;(0,2)
      } 2
    BOUNDARY [[(0,2,EPS);(0,0,X)], []]
    GLOBAL-SYM: 
    REAL;X;(0,0)
    REAL;ROOT;(5,0)
    REAL;OLD ROOT;(0,1)
    REAL;EPS;(0,2)
    LOCAL-SYM: 
    REAL;X;(0,0)
    REAL;EPS;(0,2)
    } 5 4,4,3,2,1
  BOUNDARY [[(0,1,);(0,0,)], [(1,1)], %na=MAIN]
  ----EDGES----
  1:1 -> 0:0 1
  0:1 -> 1:2 3
  0:0 -> 1:0 3
  LOCAL-SYM: 
  REAL;X;(0,0)
  REAL;EPS;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
11 FUNCTION_TYPE MAIN (ARGS: 10) (RETURNS:8)
10 TUPLE {Type label:3; Next label:9}
9 TUPLE {Type label:3; Next label:0}
8 TUPLE {Type label:3; Next label:0}
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONED:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (X,EPS:REAL RETURNS REAL)
  FOR INITIAL      ROOT := X / 2.
  

        REPEAT
      ROOT := (X / OLD ROOT + OLD ROOT) / 2.
  UNTIL (X - (ROOT * ROOT)) < EPS
  RETURNS VALUE OF ROOT
    END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
FUNCTION MAIN (X,Y,Z:INTEGER RETURNS INTEGER)
  IF X < Y THEN
3 + 42 * 5
ELSE IF X > Y THEN
3 + 42 - 5
ELSE IF Z = Y THEN
3 + 42 / 5
  ELSE 5 + 42
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:1
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,3 aka [13; 1; 0; 0; 5; 13; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-7c8fde.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [10; 2; 0; 0; 5; 10; 3; 0; 1; 5; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,5 aka [13; 1; 0; 0; 5; 13; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-3a479c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 0; 0; 5; 16; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-12115e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9e68bb.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,3 aka [13; 1; 0; 0; 5; 13; 2; 0; 1; 5; -1])
WITNESS:3
-------------------
At Height:3
SIZE 1 :- (1,5 aka [12; 3; 0; 0; 5; 12; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-a91083.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [20; 0; 0; 0; 5; 20; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b296c5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-6882c9.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [11; 2; 0; 0; 5; 11; 3; 0; 1; 5; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,5 aka [13; 1; 0; 0; 5; 13; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-75d494.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [18; 0; 0; 0; 5; 18; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-dae56d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9c6aa9.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-3558c1.dot
Val-nums
Output Dot in /tmp/graph-d22f0c.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      1 LESSER [||] [||]
      BOUNDARY [[(0,1,Y);(0,0,X)], []]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;Z;(0,2)
      INTEGRAL;Y;(0,1)
      INTEGRAL;X;(0,0)
      LOCAL-SYM: 
      INTEGRAL;Y;(0,1)
      INTEGRAL;X;(0,0)
      } 3
    2 0 %na=BODY0
      Graph {
      ----NODES----
      5 ADD [||] [|0|]
      4 TIMES [||] [||]
      3 "5"
      2 "42"
      1 "3"
      BOUNDARY [[], [(5,0)]]
      ----EDGES----
      5:0 -> 0:0 5
      4:0 -> 5:1 5
      3:0 -> 4:1 5
      2:0 -> 4:0 5
      1:0 -> 5:0 5
      GLOBAL-SYM: 
      INTEGRAL;Z;(0,2)
      INTEGRAL;Y;(0,1)
      INTEGRAL;X;(0,0)
      } 7
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      3 0 %na=PREDICATE1
        Graph {
        ----NODES----
        1 GREATER [||] [||]
        BOUNDARY [[(0,1,Y);(0,0,X)], []]
        ----EDGES----
        1:0 -> 0:0 1
        0:1 -> 1:1 5
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        INTEGRAL;Z;(0,2)
        INTEGRAL;Y;(0,1)
        INTEGRAL;X;(0,0)
        LOCAL-SYM: 
        INTEGRAL;Y;(0,1)
        INTEGRAL;X;(0,0)
        } 3
      2 0 %na=BODY1
        Graph {
        ----NODES----
        5 SUBTRACT [||] [|0|]
        4 "5"
        3 ADD [||] [||]
        2 "42"
        1 "3"
        BOUNDARY [[], [(5,0)]]
        ----EDGES----
        5:0 -> 0:0 5
        4:0 -> 5:1 5
        3:0 -> 5:0 5
        2:0 -> 3:1 5
        1:0 -> 3:0 5
        GLOBAL-SYM: 
        INTEGRAL;Z;(0,2)
        INTEGRAL;Y;(0,1)
        INTEGRAL;X;(0,0)
        } 7
      1 0 %na=ELSE1
        Graph {
        ----NODES----
        3 0 %na=PREDICATE2
          Graph {
          ----NODES----
          1 EQUAL [||] [||]
          BOUNDARY [[(0,1,Y);(0,0,Z)], []]
          ----EDGES----
          1:0 -> 0:0 1
          0:1 -> 1:1 5
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          INTEGRAL;Z;(0,2)
          INTEGRAL;Y;(0,1)
          INTEGRAL;X;(0,0)
          LOCAL-SYM: 
          INTEGRAL;Z;(0,0)
          INTEGRAL;Y;(0,1)
          } 3
        2 0 %na=BODY2
          Graph {
          ----NODES----
          5 ADD [||] [|0|]
          4 DIVIDE [||] [||]
          3 "5"
          2 "42"
          1 "3"
          BOUNDARY [[], [(5,0)]]
          ----EDGES----
          5:0 -> 0:0 5
          4:0 -> 5:1 5
          3:0 -> 4:1 5
          2:0 -> 4:0 5
          1:0 -> 5:0 5
          GLOBAL-SYM: 
          INTEGRAL;Z;(0,2)
          INTEGRAL;Y;(0,1)
          INTEGRAL;X;(0,0)
          } 7
        1 0 %na=ELSE2
          Graph {
          ----NODES----
          3 ADD [||] [|0|]
          2 "42"
          1 "5"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          INTEGRAL;Z;(0,2)
          INTEGRAL;Y;(0,1)
          INTEGRAL;X;(0,0)
          } 5
        BOUNDARY [[(0,1,);(0,2,)], [(2,0);(1,0);(3,0)]]
        ----EDGES----
        3:0 -> 0:0 1
        2:0 -> 0:2 5
        1:0 -> 0:1 5
        0:2 -> 3:0 5
        0:1 -> 3:1 5
        GLOBAL-SYM: 
        INTEGRAL;Z;(0,2)
        INTEGRAL;Y;(0,1)
        INTEGRAL;X;(0,0)
        } 4
      BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(2,0);(1,0);(3,0)]]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 0:2 5
      1:0 -> 0:1 0
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:2 -> 1:1 5
      0:2 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;Z;(0,2)
      INTEGRAL;Y;(0,1)
      INTEGRAL;X;(0,0)
      } 4
    BOUNDARY [[(0,1,);(0,0,);(0,3,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 5
    1:0 -> 0:1 0
    0:1 -> 3:1 5
    0:0 -> 3:0 5
    0:3 -> 1:2 5
    0:3 -> 1:1 5
    0:3 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;Z;(0,2)
    INTEGRAL;Y;(0,1)
    INTEGRAL;X;(0,0)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 5
  LOCAL-SYM: 
  INTEGRAL;Z;(0,2)
  INTEGRAL;Y;(0,1)
  INTEGRAL;X;(0,0)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
11 FUNCTION_TYPE MAIN (ARGS: 10) (RETURNS:7)
10 TUPLE {Type label:5; Next label:9}
9 TUPLE {Type label:5; Next label:8}
8 TUPLE {Type label:5; Next label:0}
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
FUNCTION MAIN (X,Y,Z:INTEGER RETURNS INTEGER)
  IF X < Y THEN
3 + 42 * 5
ELSE IF X > Y THEN
3 + 42 - 5
ELSE IF Z = Y THEN
3 + 42 / 5
  ELSE 5 + 42
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE FOO
FUNCTION FOO (RETURNS INTEGER)
  3
END FUNCTION
-------------------
At Height:1
WITNESS:1
Val-nums
Output Dot in /tmp/graph-8b9e3d.dot
Val-nums
Output Dot in /tmp/graph-570829.dot
Result graph
Graph {
----NODES----
1 5
  Graph {
  ----NODES----
  1 "3"
  BOUNDARY [[], [(1,0)]]
  ----EDGES----
  1:0 -> 0:0 5
  } 2
BOUNDARY [[], []]
----TYPEMAP----
8 FUNCTION_TYPE  (ARGS: 0) (RETURNS:7)
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE FOO
FUNCTION FOO (RETURNS INTEGER)
  3
END FUNCTION
Output Dot in out.dot
SIZE 1 :- (1,1 aka [1; -1])
1 -> 1
DEFINE MAIN
TYPE STRING = ARRAY [CHARACTER]
FUNCTION MAIN (RETURNS STRING)
  "Hello world!"
END FUNCTION
-------------------
At Height:1
WITNESS:1
Val-nums
Output Dot in /tmp/graph-108c36.dot
Val-nums
Output Dot in /tmp/graph-353b08.dot
Result graph
Graph {
----NODES----
1 2
  Graph {
  ----NODES----
  1 "Hello world!"
  BOUNDARY [[], [(1,0)]]
  ----EDGES----
  1:0 -> 0:0 2
  } 2
BOUNDARY [[], []]
----TYPEMAP----
9 FUNCTION_TYPE  (ARGS: 0) (RETURNS:8)
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 2
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
STRING:7
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE STRING = ARRAY [CHARACTER]
FUNCTION MAIN (RETURNS STRING)
  "Hello world!"
END FUNCTION
Output Dot in out.dot
SIZE 1 :- (1,1 aka [1; -1])
1 -> 1
DEFINE MAIN
FUNCTION MAIN (I,E:INTEGER RETURNS INTEGER)
  IF I < E THEN
I
  ELSE E
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
Val-nums
Output Dot in /tmp/graph-0dd21c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 5; -1])
0 -> 0
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 5; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-21f5f6.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [18; 0; 0; 0; 5; 18; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-074e6e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-0fa094.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-506dd7.dot
Val-nums
Output Dot in /tmp/graph-ac782c.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      1 LESSER [||] [||]
      BOUNDARY [[(0,1,E);(0,0,I)], []]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      LOCAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      } 3
    2 0 %na=BODY0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,I)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      LOCAL-SYM: 
      INTEGRAL;I;(0,0)
      } 2
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,E)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      LOCAL-SYM: 
      INTEGRAL;E;(0,0)
      } 2
    BOUNDARY [[(0,0,);(0,1,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 5
    1:0 -> 0:1 5
    0:1 -> 3:0 5
    0:0 -> 3:1 5
    0:0 -> 2:0 5
    0:1 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;I;(0,0)
    INTEGRAL;E;(0,1)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 5
  LOCAL-SYM: 
  INTEGRAL;I;(0,0)
  INTEGRAL;E;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:7)
9 TUPLE {Type label:5; Next label:8}
8 TUPLE {Type label:5; Next label:0}
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
FUNCTION MAIN (I,E:INTEGER RETURNS INTEGER)
  IF I < E THEN
I
  ELSE E
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
FUNCTION MAIN (I,E:INTEGER RETURNS INTEGER)
  IF I < E THEN
I * 2
ELSE IF I = E THEN
E + 3
  ELSE I - 2
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 5; -1])
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [12; 0; 0; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e05d38.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [13; 0; 0; 0; 5; 13; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-97eb8a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 0; 0; 5; 16; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-a543c2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7e67d2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [11; 0; 0; 0; 5; 11; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d7337f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [18; 0; 0; 0; 5; 18; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-941644.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4aa205.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-814baf.dot
Val-nums
Output Dot in /tmp/graph-a60d9d.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      1 LESSER [||] [||]
      BOUNDARY [[(0,1,E);(0,0,I)], []]
      ----EDGES----
      1:0 -> 0:0 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      LOCAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      } 3
    2 0 %na=BODY0
      Graph {
      ----NODES----
      2 TIMES [||] [|0|]
      1 "2"
      BOUNDARY [[(0,0,I)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:0 5
      1:0 -> 2:1 5
      0:0 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      LOCAL-SYM: 
      INTEGRAL;I;(0,0)
      } 4
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      3 0 %na=PREDICATE1
        Graph {
        ----NODES----
        1 EQUAL [||] [||]
        BOUNDARY [[(0,1,E);(0,0,I)], []]
        ----EDGES----
        1:0 -> 0:0 1
        0:1 -> 1:1 5
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        INTEGRAL;I;(0,0)
        INTEGRAL;E;(0,1)
        LOCAL-SYM: 
        INTEGRAL;I;(0,0)
        INTEGRAL;E;(0,1)
        } 3
      2 0 %na=BODY1
        Graph {
        ----NODES----
        2 ADD [||] [|0|]
        1 "3"
        BOUNDARY [[(0,0,E)], [(2,0)]]
        ----EDGES----
        2:0 -> 0:0 5
        1:0 -> 2:1 5
        0:0 -> 2:0 5
        GLOBAL-SYM: 
        INTEGRAL;I;(0,0)
        INTEGRAL;E;(0,1)
        LOCAL-SYM: 
        INTEGRAL;E;(0,0)
        } 4
      1 0 %na=ELSE1
        Graph {
        ----NODES----
        2 SUBTRACT [||] [|0|]
        1 "2"
        BOUNDARY [[(0,0,I)], [(2,0)]]
        ----EDGES----
        2:0 -> 0:0 5
        1:0 -> 2:1 5
        0:0 -> 2:0 5
        GLOBAL-SYM: 
        INTEGRAL;I;(0,0)
        INTEGRAL;E;(0,1)
        LOCAL-SYM: 
        INTEGRAL;I;(0,0)
        } 4
      BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 0:2 5
      1:0 -> 0:1 5
      0:1 -> 3:0 5
      0:0 -> 3:1 5
      0:1 -> 2:0 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;I;(0,0)
      INTEGRAL;E;(0,1)
      } 4
    BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 5
    1:0 -> 0:1 0
    0:1 -> 3:0 5
    0:0 -> 3:1 5
    0:0 -> 2:0 5
    0:2 -> 1:1 5
    0:2 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;I;(0,0)
    INTEGRAL;E;(0,1)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 5
  LOCAL-SYM: 
  INTEGRAL;I;(0,0)
  INTEGRAL;E;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:7)
9 TUPLE {Type label:5; Next label:8}
8 TUPLE {Type label:5; Next label:0}
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
FUNCTION MAIN (I,E:INTEGER RETURNS INTEGER)
  IF I < E THEN
I * 2
ELSE IF I = E THEN
E + 3
  ELSE I - 2
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION LOOP1 (N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR K IN 1,N
          X := Q + (Y[K] * (R * Z[K + 10] + T * Z[K + 11]))
    RETURNS
      ARRAY OF X
  END FOR
END FUNCTION
FUNCTION MAIN (REP,N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR I IN 1,REP
          X := LOOP1(N,Q,R,T,Y,Z)
    RETURNS
      VALUE OF X
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-188237.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-83c526.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 14; 0; 0; 4; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (1,1 aka [32; 0; 2; 0; 7; 32; 0; 3; 1; 5; -1])
WITNESS:1
SIZE 1 :- (7,3 aka [13; 0; 3; 0; 5; 13; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (7,7 aka [13; 0; 3; 0; 5; 13; 6; 0; 1; 5; -1])
WITNESS:7
-------------------
At Height:3
SIZE 1 :- (7,4 aka [32; 0; 5; 0; 7; 32; 3; 0; 1; 5; -1])
WITNESS:4
SIZE 1 :- (7,8 aka [32; 0; 5; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:4
SIZE 1 :- (3,5 aka [11; 0; 4; 0; 4; 11; 4; 0; 1; 4; -1])
WITNESS:5
SIZE 1 :- (3,9 aka [11; 0; 6; 0; 4; 11; 8; 0; 1; 4; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,10 aka [13; 5; 0; 0; 4; 13; 9; 0; 1; 4; -1])
WITNESS:10
-------------------
At Height:6
SIZE 1 :- (1,12 aka [11; 1; 0; 0; 4; 11; 10; 0; 1; 4; -1])
WITNESS:12
-------------------
At Height:7
SIZE 1 :- (1,14 aka [13; 0; 1; 0; 4; 13; 12; 0; 1; 4; -1])
WITNESS:14
Val-nums
14 -> 14
12 -> 12
10 -> 10
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2b679c.dot
Val-nums
Output Dot in /tmp/graph-fa68f5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 7; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-969f9c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [50; 0; 1; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-cf987c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9dfdd7.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 1; 0; 5; 5; 0; 2; 1; 4; 5; 0; 3; 2; 4; 5; 0; 4; 3; 4; 5; 0; 5; 4; 7; 5; 0; 6; 5; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7ea91f.dot
Val-nums
Output Dot in /tmp/graph-872ea3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-118e35.dot
Val-nums
Output Dot in /tmp/graph-11e401.dot
Result graph
Graph {
----NODES----
2 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      1 INVOCATION [||] [|0|] %na=LOOP1
      BOUNDARY [[(0,6,Z);(0,5,Y);(0,4,T);(0,3,R);(0,2,Q);(0,1,N);(0,0,REP)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:6 -> 1:5 7
      0:5 -> 1:4 7
      0:4 -> 1:3 4
      0:3 -> 1:2 4
      0:2 -> 1:1 4
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,6)
      ARRAY 4;Y;(0,5)
      DOUBLE;T;(0,4)
      INTEGRAL;REP;(0,0)
      DOUBLE;R;(0,3)
      DOUBLE;Q;(0,2)
      INTEGRAL;N;(0,1)
      INTEGRAL;I;(2,0)
      LOCAL-SYM: 
      ARRAY 4;Z;(0,6)
      ARRAY 4;Y;(0,5)
      ARRAY 4;X;(1,0)
      DOUBLE;T;(0,4)
      INTEGRAL;REP;(0,0)
      DOUBLE;R;(0,3)
      DOUBLE;Q;(0,2)
      INTEGRAL;N;(0,1)
      } 4
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      2 RANGEGEN [||] [|0|]
      1 "1"
      BOUNDARY [[(0,0,REP)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:0 5
      0:0 -> 2:1 5
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,6)
      ARRAY 4;Y;(0,5)
      DOUBLE;T;(0,4)
      INTEGRAL;REP;(0,0)
      DOUBLE;R;(0,3)
      DOUBLE;Q;(0,2)
      INTEGRAL;N;(0,1)
      LOCAL-SYM: 
      INTEGRAL;REP;(0,0)
      INTEGRAL;I;(2,0)
      } 3
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 FINALVALUE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:1 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,6)
      ARRAY 4;Y;(0,5)
      ARRAY 4;X;(1,0)
      DOUBLE;T;(0,4)
      INTEGRAL;REP;(0,0)
      DOUBLE;R;(0,3)
      DOUBLE;Q;(0,2)
      INTEGRAL;N;(0,1)
      INTEGRAL;I;(2,0)
      } 2
    BOUNDARY [[(0,6,Z);(0,5,Y);(0,4,T);(0,3,R);(0,2,Q);(0,1,N);(0,0,REP)], []]
    GLOBAL-SYM: 
    ARRAY 4;Z;(0,6)
    ARRAY 4;Y;(0,5)
    ARRAY 4;X;(1,0)
    DOUBLE;T;(0,4)
    INTEGRAL;REP;(0,0)
    DOUBLE;R;(0,3)
    DOUBLE;Q;(0,2)
    INTEGRAL;N;(0,1)
    INTEGRAL;I;(2,0)
    LOCAL-SYM: 
    ARRAY 4;Z;(0,6)
    ARRAY 4;Y;(0,5)
    DOUBLE;T;(0,4)
    INTEGRAL;REP;(0,0)
    DOUBLE;R;(0,3)
    DOUBLE;Q;(0,2)
    INTEGRAL;N;(0,1)
    } 4 3,2,3,1
  BOUNDARY [[(0,6,);(0,5,);(0,4,);(0,3,);(0,2,);(0,1,);(0,0,)], [(1,1)], %na=MAIN]
  ----EDGES----
  1:1 -> 0:0 7
  0:6 -> 1:6 7
  0:5 -> 1:5 7
  0:4 -> 1:4 4
  0:3 -> 1:3 4
  0:2 -> 1:2 4
  0:1 -> 1:1 5
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 4;Z;(0,6)
  ARRAY 4;Y;(0,5)
  DOUBLE;T;(0,4)
  INTEGRAL;REP;(0,0)
  DOUBLE;R;(0,3)
  DOUBLE;Q;(0,2)
  INTEGRAL;N;(0,1)
  } 3
1 0
  Graph {
  ----NODES----
  4 ASETL [||] [|0|]
  3 "1"
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      14 ADD [||] [|0|]
      12 TIMES [||] [||]
      10 ADD [||] [||]
      9 TIMES [||] [||]
      8 AELEMENT [||] [||]
      7 ADD [||] [||]
      6 "11"
      5 TIMES [||] [||]
      4 AELEMENT [||] [||]
      3 ADD [||] [||]
      2 "10"
      1 AELEMENT [||] [||]
      BOUNDARY [[(0,6,T);(0,5,Z);(0,4,R);(0,3,K);(0,2,Y);(0,1,Q);(0,0,N)], [(14,0)]]
      ----EDGES----
      14:0 -> 0:0 4
      12:0 -> 14:1 4
      10:0 -> 12:1 4
      9:0 -> 10:1 4
      8:0 -> 9:1 4
      7:0 -> 8:1 5
      6:0 -> 7:1 5
      5:0 -> 10:0 4
      4:0 -> 5:1 4
      3:0 -> 4:1 5
      2:0 -> 3:1 5
      1:0 -> 12:0 4
      0:1 -> 14:0 4
      0:6 -> 9:0 4
      0:5 -> 8:0 7
      0:3 -> 7:0 5
      0:4 -> 5:0 4
      0:5 -> 4:0 7
      0:3 -> 3:0 5
      0:3 -> 1:1 5
      0:2 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,4)
      DOUBLE;T;(0,3)
      DOUBLE;R;(0,2)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;K;(2,0)
      LOCAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,2)
      DOUBLE;X;(14,0)
      DOUBLE;T;(0,6)
      DOUBLE;R;(0,4)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;K;(0,3)
      } 16
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      2 RANGEGEN [||] [|0|]
      1 "1"
      BOUNDARY [[(0,0,N)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:0 5
      0:0 -> 2:1 5
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,4)
      DOUBLE;T;(0,3)
      DOUBLE;R;(0,2)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      INTEGRAL;K;(2,0)
      } 3
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:1 -> 1:1 4
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,2)
      DOUBLE;X;(14,0)
      DOUBLE;T;(0,6)
      DOUBLE;R;(0,4)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;K;(0,3)
      } 2
    BOUNDARY [[(0,6,T);(0,5,Z);(0,4,R);(0,2,Y);(0,1,Q);(0,0,N)], []]
    GLOBAL-SYM: 
    ARRAY 4;Z;(0,5)
    ARRAY 4;Y;(0,2)
    DOUBLE;X;(14,0)
    DOUBLE;T;(0,6)
    DOUBLE;R;(0,4)
    DOUBLE;Q;(0,1)
    INTEGRAL;N;(0,0)
    INTEGRAL;K;(0,3)
    LOCAL-SYM: 
    ARRAY 4;Z;(0,5)
    ARRAY 4;Y;(0,2)
    DOUBLE;T;(0,6)
    DOUBLE;R;(0,4)
    DOUBLE;Q;(0,1)
    INTEGRAL;N;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,3,);(0,5,);(0,2,);(0,4,);(0,1,);(0,0,)], [(4,0)], %na=LOOP1]
  ----EDGES----
  4:0 -> 0:0 7
  3:0 -> 4:0 7
  1:1 -> 4:0 7
  0:5 -> 1:5 7
  0:4 -> 1:2 7
  0:3 -> 1:6 4
  0:2 -> 1:4 4
  0:1 -> 1:1 4
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 4;Z;(0,5)
  ARRAY 4;Y;(0,4)
  DOUBLE;T;(0,3)
  DOUBLE;R;(0,2)
  DOUBLE;Q;(0,1)
  INTEGRAL;N;(0,0)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
24 FUNCTION_TYPE MAIN (ARGS: 23) (RETURNS:16)
23 TUPLE {Type label:5; Next label:22}
22 TUPLE {Type label:5; Next label:21}
21 TUPLE {Type label:4; Next label:20}
20 TUPLE {Type label:4; Next label:19}
19 TUPLE {Type label:4; Next label:18}
18 TUPLE {Type label:7; Next label:17}
17 TUPLE {Type label:7; Next label:0}
16 TUPLE {Type label:7; Next label:0}
15 FUNCTION_TYPE LOOP1 (ARGS: 14) (RETURNS:8)
14 TUPLE {Type label:5; Next label:13}
13 TUPLE {Type label:4; Next label:12}
12 TUPLE {Type label:4; Next label:11}
11 TUPLE {Type label:4; Next label:10}
10 TUPLE {Type label:7; Next label:9}
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONED:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION LOOP1 (N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR K IN 1,N
          X := Q + (Y[K] * (R * Z[K + 10] + T * Z[K + 11]))
    RETURNS
      ARRAY OF X
  END FOR
END FUNCTION
FUNCTION MAIN (REP,N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR I IN 1,REP
          X := LOOP1(N,Q,R,T,Y,Z)
    RETURNS
      VALUE OF X
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-952db2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-01f808.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1578cd.dot
Val-nums
Output Dot in /tmp/graph-937f67.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9071d0.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5b9ae5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b10860.dot
Val-nums
Output Dot in /tmp/graph-49c2fa.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-021bbf.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-67b652.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-bdafaf.dot
Val-nums
Output Dot in /tmp/graph-c7ae4d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-d703b8.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 9; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (3,4 aka [5; 1; 0; 0; 7; -1])
WITNESS:4
SIZE 1 :- (3,7 aka [5; 1; 2; 0; 7; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,6 aka [8; 4; 0; 0; 7; 8; 1; 1; 1; 7; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,9 aka [8; 6; 0; 0; 7; 8; 7; 0; 1; 7; -1])
WITNESS:9
Val-nums
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-59ac84.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [20; 1; 0; 0; 5; 20; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-af656c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3c3afc.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; 0; 22; 1; 1; 7; 0; 14; 1; 1; 7; 0; 6; 1; 1; 7; 0; 24; 2; 2; 7; 0; 16; 2; 2; 7; 0; 8; 2; 2; 7; 0; 12; 0; 3; 7; 0; 20; 0; 6; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
SIZE 1 :- (1,17 aka [17; -1])
WITNESS:17
SIZE 1 :- (1,25 aka [25; -1])
WITNESS:25
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:3 FOR 9 TREES :- (6,3 aka [36; 0; 0; 0; 7; -1]);(6,5 aka [36; 0; 0; 0; 7; -1]);(6,7 aka [36; 0; 0; 0; 7; -1]);(6,11 aka [36; 0; 0; 0; 7; -1]);(6,13 aka [36; 0; 0; 0; 7; -1]);(6,15 aka [36; 0; 0; 0; 7; -1]);(6,19 aka [36; 0; 0; 0; 7; -1]);(6,21 aka [36; 0; 0; 0; 7; -1]);(6,23 aka [36; 0; 0; 0; 7; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:4 FOR 9 TREES :- (6,4 aka [42; 3; 0; 1; 5; -1]);(6,6 aka [42; 5; 0; 1; 5; -1]);(6,8 aka [42; 7; 0; 1; 5; -1]);(6,12 aka [42; 11; 0; 1; 5; -1]);(6,14 aka [42; 13; 0; 1; 5; -1]);(6,16 aka [42; 15; 0; 1; 5; -1]);(6,20 aka [42; 19; 0; 1; 5; -1]);(6,22 aka [42; 21; 0; 1; 5; -1]);(6,24 aka [42; 23; 0; 1; 5; -1])
Val-nums
25 -> 25
24 -> 4
23 -> 3
22 -> 4
21 -> 3
20 -> 4
19 -> 3
17 -> 17
16 -> 4
15 -> 3
14 -> 4
13 -> 3
12 -> 4
11 -> 3
9 -> 9
8 -> 4
7 -> 3
6 -> 4
5 -> 3
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b88d63.dot
Val-nums
Output Dot in /tmp/graph-f665e1.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  25 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 GREATER [||] [||]
      2 "2"
      1 ASIZE [||] [||]
      BOUNDARY [[(0,0,DATA)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      9 ACATENATE [||] [|0|]
      7 INVOCATION [||] [||] %na=MAIN
      6 ACATENATE [||] [||]
      4 INVOCATION [||] [||] %na=MAIN
      1 INVOCATION [||] [||] %na=SPLIT
      BOUNDARY [[(0,0,DATA)], [(9,0)]]
      ----EDGES----
      9:0 -> 0:0 7
      7:0 -> 9:1 7
      6:0 -> 9:0 7
      4:0 -> 6:0 7
      1:2 -> 7:0 7
      1:1 -> 6:1 7
      1:0 -> 4:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 12
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,DATA)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 7
    1:0 -> 0:1 7
    0:0 -> 3:0 7
    0:1 -> 2:0 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,1,3
  24 ASETL [||] [|0|]
  23 ALIML [||] [||] %na=ALimL
  22 ASETL [||] [|0|]
  21 ALIML [||] [||] %na=ALimL
  20 ASETL [||] [|0|]
  19 ALIML [||] [||] %na=ALimL
  17 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  16 ASETL [||] [|0|]
  15 ALIML [||] [||] %na=ALimL
  14 ASETL [||] [|0|]
  13 ALIML [||] [||] %na=ALimL
  12 ASETL [||] [|0|]
  11 ALIML [||] [||] %na=ALimL
  9 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  8 ASETL [||] [|0|]
  7 ALIML [||] [||] %na=ALimL
  6 ASETL [||] [|0|]
  5 ALIML [||] [||] %na=ALimL
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(25,0);(24,2);(22,1);(20,0);(16,2);(14,1);(12,0);(8,2);(6,1);(4,0)], %na=MASHAN ,%na=MOSHAN ,%na=SPLIT ,%na=MAIN]
  ----EDGES----
  25:0 -> 0:9 7
  17:1 -> 24:0 7
  17:1 -> 22:0 7
  17:1 -> 20:0 7
  9:1 -> 16:0 7
  9:1 -> 14:0 7
  9:1 -> 12:0 7
  4:2 -> 0:2 7
  4:1 -> 0:1 7
  4:0 -> 0:6 7
  4:0 -> 0:3 7
  4:0 -> 0:0 7
  3:0 -> 24:1 5
  3:0 -> 22:1 5
  3:0 -> 20:1 5
  3:0 -> 16:1 5
  3:0 -> 14:1 5
  3:0 -> 12:1 5
  3:0 -> 8:1 5
  3:0 -> 6:1 5
  3:0 -> 4:1 5
  1:1 -> 8:0 7
  1:1 -> 6:0 7
  1:1 -> 4:0 7
  0:0 -> 23:0 7
  0:0 -> 21:0 7
  0:0 -> 19:0 7
  0:0 -> 17:0 7
  0:0 -> 15:0 7
  0:0 -> 13:0 7
  0:0 -> 11:0 7
  0:0 -> 9:0 7
  0:0 -> 7:0 7
  0:0 -> 5:0 7
  0:0 -> 3:0 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;DATA;(0,0)
  } 27
BOUNDARY [[], []]
----TYPEMAP----
25 FUNCTION_TYPE MASHAN (ARGS: 24) (RETURNS:23)
24 TUPLE {Type label:7; Next label:0}
23 TUPLE {Type label:7; Next label:22}
22 TUPLE {Type label:7; Next label:21}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE MOSHAN (ARGS: 19) (RETURNS:18)
19 TUPLE {Type label:7; Next label:0}
18 TUPLE {Type label:7; Next label:17}
17 TUPLE {Type label:7; Next label:16}
16 TUPLE {Type label:7; Next label:0}
15 FUNCTION_TYPE SPLIT (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:7; Next label:0}
13 TUPLE {Type label:7; Next label:12}
12 TUPLE {Type label:7; Next label:11}
11 TUPLE {Type label:7; Next label:0}
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
INFO:7
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-976435.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-20effa.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3d8d54.dot
Val-nums
Output Dot in /tmp/graph-56f8b9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c3bd23.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-72f6b0.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1fb6d9.dot
Val-nums
Output Dot in /tmp/graph-696aec.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-592295.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-09aff7.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-feca74.dot
Val-nums
Output Dot in /tmp/graph-12dade.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-e43bf3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 9; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (3,4 aka [5; 1; 0; 0; 7; -1])
WITNESS:4
SIZE 1 :- (3,7 aka [5; 1; 2; 0; 7; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,6 aka [8; 4; 0; 0; 7; 8; 1; 1; 1; 7; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,9 aka [8; 6; 0; 0; 7; 8; 7; 0; 1; 7; -1])
WITNESS:9
Val-nums
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e3b55a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [20; 1; 0; 0; 5; 20; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-376f61.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c753fa.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; 0; 22; 1; 1; 7; 0; 14; 1; 1; 7; 0; 6; 1; 1; 7; 0; 24; 2; 2; 7; 0; 16; 2; 2; 7; 0; 8; 2; 2; 7; 0; 12; 0; 3; 7; 0; 20; 0; 6; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
SIZE 1 :- (1,17 aka [17; -1])
WITNESS:17
SIZE 1 :- (1,25 aka [25; -1])
WITNESS:25
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:3 FOR 9 TREES :- (6,3 aka [36; 0; 0; 0; 7; -1]);(6,5 aka [36; 0; 0; 0; 7; -1]);(6,7 aka [36; 0; 0; 0; 7; -1]);(6,11 aka [36; 0; 0; 0; 7; -1]);(6,13 aka [36; 0; 0; 0; 7; -1]);(6,15 aka [36; 0; 0; 0; 7; -1]);(6,19 aka [36; 0; 0; 0; 7; -1]);(6,21 aka [36; 0; 0; 0; 7; -1]);(6,23 aka [36; 0; 0; 0; 7; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:4 FOR 9 TREES :- (6,4 aka [42; 3; 0; 1; 5; -1]);(6,6 aka [42; 5; 0; 1; 5; -1]);(6,8 aka [42; 7; 0; 1; 5; -1]);(6,12 aka [42; 11; 0; 1; 5; -1]);(6,14 aka [42; 13; 0; 1; 5; -1]);(6,16 aka [42; 15; 0; 1; 5; -1]);(6,20 aka [42; 19; 0; 1; 5; -1]);(6,22 aka [42; 21; 0; 1; 5; -1]);(6,24 aka [42; 23; 0; 1; 5; -1])
Val-nums
25 -> 25
24 -> 4
23 -> 3
22 -> 4
21 -> 3
20 -> 4
19 -> 3
17 -> 17
16 -> 4
15 -> 3
14 -> 4
13 -> 3
12 -> 4
11 -> 3
9 -> 9
8 -> 4
7 -> 3
6 -> 4
5 -> 3
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5795e5.dot
Val-nums
Output Dot in /tmp/graph-baf5e2.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  25 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 GREATER [||] [||]
      2 "2"
      1 ASIZE [||] [||]
      BOUNDARY [[(0,0,DATA)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      9 ACATENATE [||] [|0|]
      7 INVOCATION [||] [||] %na=MAIN
      6 ACATENATE [||] [||]
      4 INVOCATION [||] [||] %na=MAIN
      1 INVOCATION [||] [||] %na=SPLIT
      BOUNDARY [[(0,0,DATA)], [(9,0)]]
      ----EDGES----
      9:0 -> 0:0 7
      7:0 -> 9:1 7
      6:0 -> 9:0 7
      4:0 -> 6:0 7
      1:2 -> 7:0 7
      1:1 -> 6:1 7
      1:0 -> 4:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 12
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,DATA)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 7
    1:0 -> 0:1 7
    0:0 -> 3:0 7
    0:1 -> 2:0 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,1,3
  24 ASETL [||] [|0|]
  23 ALIML [||] [||] %na=ALimL
  22 ASETL [||] [|0|]
  21 ALIML [||] [||] %na=ALimL
  20 ASETL [||] [|0|]
  19 ALIML [||] [||] %na=ALimL
  17 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  16 ASETL [||] [|0|]
  15 ALIML [||] [||] %na=ALimL
  14 ASETL [||] [|0|]
  13 ALIML [||] [||] %na=ALimL
  12 ASETL [||] [|0|]
  11 ALIML [||] [||] %na=ALimL
  9 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  8 ASETL [||] [|0|]
  7 ALIML [||] [||] %na=ALimL
  6 ASETL [||] [|0|]
  5 ALIML [||] [||] %na=ALimL
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(25,0);(24,2);(22,1);(20,0);(16,2);(14,1);(12,0);(8,2);(6,1);(4,0)], %na=MASHAN ,%na=MOSHAN ,%na=SPLIT ,%na=MAIN]
  ----EDGES----
  25:0 -> 0:9 7
  17:1 -> 24:0 7
  17:1 -> 22:0 7
  17:1 -> 20:0 7
  9:1 -> 16:0 7
  9:1 -> 14:0 7
  9:1 -> 12:0 7
  4:2 -> 0:2 7
  4:1 -> 0:1 7
  4:0 -> 0:6 7
  4:0 -> 0:3 7
  4:0 -> 0:0 7
  3:0 -> 24:1 5
  3:0 -> 22:1 5
  3:0 -> 20:1 5
  3:0 -> 16:1 5
  3:0 -> 14:1 5
  3:0 -> 12:1 5
  3:0 -> 8:1 5
  3:0 -> 6:1 5
  3:0 -> 4:1 5
  1:1 -> 8:0 7
  1:1 -> 6:0 7
  1:1 -> 4:0 7
  0:0 -> 23:0 7
  0:0 -> 21:0 7
  0:0 -> 19:0 7
  0:0 -> 17:0 7
  0:0 -> 15:0 7
  0:0 -> 13:0 7
  0:0 -> 11:0 7
  0:0 -> 9:0 7
  0:0 -> 7:0 7
  0:0 -> 5:0 7
  0:0 -> 3:0 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;DATA;(0,0)
  } 27
BOUNDARY [[], []]
----TYPEMAP----
25 FUNCTION_TYPE MASHAN (ARGS: 24) (RETURNS:23)
24 TUPLE {Type label:7; Next label:0}
23 TUPLE {Type label:7; Next label:22}
22 TUPLE {Type label:7; Next label:21}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE MOSHAN (ARGS: 19) (RETURNS:18)
19 TUPLE {Type label:7; Next label:0}
18 TUPLE {Type label:7; Next label:17}
17 TUPLE {Type label:7; Next label:16}
16 TUPLE {Type label:7; Next label:0}
15 FUNCTION_TYPE SPLIT (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:7; Next label:0}
13 TUPLE {Type label:7; Next label:12}
12 TUPLE {Type label:7; Next label:11}
11 TUPLE {Type label:7; Next label:0}
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
INFO:7
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + ARRAY_SIZE(PARTIAL_ASSIGNMENT);
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY_ADDH(PARTIAL_ASSIGNMENT,ROW)
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 1; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c48c6d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-bf1949.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 16; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 1; 0; 5; 16; 0; 2; 1; 5; -1])
WITNESS:1
SIZE 1 :- (3,5 aka [13; 0; 1; 0; 5; 13; 0; 4; 1; 5; -1])
WITNESS:5
SIZE 1 :- (3,3 aka [13; 0; 2; 0; 5; 13; 0; 3; 1; 5; -1])
WITNESS:3
SIZE 1 :- (3,12 aka [12; 0; 1; 0; 5; 12; 0; 4; 1; 5; -1])
WITNESS:12
SIZE 1 :- (3,10 aka [12; 0; 2; 0; 5; 12; 0; 3; 1; 5; -1])
WITNESS:10
-------------------
At Height:3
SIZE 1 :- (2,7 aka [16; 3; 0; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:7
SIZE 1 :- (2,14 aka [16; 10; 0; 0; 5; 16; 12; 0; 1; 5; -1])
WITNESS:14
-------------------
At Height:4
SIZE 1 :- (1,9 aka [14; 1; 0; 0; 1; 14; 7; 0; 1; 1; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,16 aka [14; 9; 0; 0; 1; 14; 14; 0; 1; 1; -1])
WITNESS:16
Val-nums
16 -> 16
14 -> 14
12 -> 12
10 -> 10
9 -> 9
7 -> 7
5 -> 5
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2933fc.dot
Val-nums
Output Dot in /tmp/graph-7dec09.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b66b09.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 8; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5a918c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 1; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [12; 0; 0; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [5; 2; 0; 0; 5; -1])
WITNESS:3
-------------------
At Height:4
SIZE 1 :- (1,5 aka [41; 3; 0; 0; 8; -1])
WITNESS:5
Val-nums
5 -> 5
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-496928.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; 34; 0; 2; 2; 1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9f9e6c.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-1fc1a4.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [29; 0; 0; 0; 7; 29; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-c1a14d.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-e71ba4.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 1; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-a73634.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e04dac.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 1; 1; -1])
WITNESS:0
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 2; 0; 5; 5; 0; 3; 1; 5; 5; 0; 1; 2; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,7 aka [6; 1; 0; 0; 1; -1])
WITNESS:7
Val-nums
7 -> 7
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-bcaa50.dot
Val-nums
Output Dot in /tmp/graph-33f2aa.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 8; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (1,8 aka [42; 7; 0; 0; 8; -1])
WITNESS:8
SIZE 1 :- (1,2 aka [43; 0; 1; 0; 7; -1])
WITNESS:2
-------------------
At Height:3
SIZE 1 :- (1,3 aka [13; 1; 0; 0; 5; 13; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
8 -> 8
7 -> 7
5 -> 5
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3e2826.dot
Val-nums
Output Dot in /tmp/graph-acab9e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1eded2.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-00a03e.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-449139.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [31; 1; 0; 0; 5; 31; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1fa9e1.dot
Val-nums
Output Dot in /tmp/graph-cf90b3.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 8; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
Output Dot in /tmp/graph-726e5f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [16; 0; 0; 0; 5; 16; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-912ac5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-297d75.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-d9163b.dot
Val-nums
Output Dot in /tmp/graph-ba2cfd.dot
Result graph
Graph {
----NODES----
2 0
  Graph {
  ----NODES----
  1 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      2 EQUAL [||] [||]
      1 "1"
      BOUNDARY [[(0,0,LEVEL)], []]
      ----EDGES----
      2:0 -> 0:0 1
      1:0 -> 2:1 5
      0:0 -> 2:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    2 0 %na=BODY0
      Graph {
      ----NODES----
      4 ASETL [||] [|0|]
      3 "1"
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          2 ABUILD [||] [|0|]
          1 "1"
          BOUNDARY [[(0,0,ROW)], [(2,0)]]
          ----EDGES----
          2:0 -> 0:0 7
          1:0 -> 2:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          INTEGRAL;ROW;(3,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(0,0)
          ARRAY 5;ASSIGNMENT;(2,0)
          } 4
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          3 RANGEGEN [||] [|0|]
          2 "4"
          1 "1"
          BOUNDARY [[], [(3,0)]]
          ----EDGES----
          3:0 -> 0:0 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          INTEGRAL;ROW;(3,0)
          } 4
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 8
          0:1 -> 1:1 7
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          INTEGRAL;ROW;(0,0)
          INTEGRAL;LEVEL;(0,0)
          ARRAY 5;ASSIGNMENT;(2,0)
          } 2
        BOUNDARY [[], []]
        GLOBAL-SYM: 
        INTEGRAL;ROW;(0,0)
        INTEGRAL;LEVEL;(0,0)
        ARRAY 5;ASSIGNMENT;(2,0)
        } 4 3,2,3,1
      BOUNDARY [[], [(4,0)]]
      ----EDGES----
      4:0 -> 0:0 8
      3:0 -> 4:0 8
      1:1 -> 4:0 8
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 6
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      1 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          8 ASETL [||] [|0|]
          7 "1"
          5 0 %na=FORALL
            Graph {
            ----NODES----
            3 0 %na=BODY
              Graph {
              ----NODES----
              7 NOT [||] [|0|]
              4 0 %na=SELECT
                Graph {
                ----NODES----
                3 0 %na=PREDICATE0
                  Graph {
                  ----NODES----
                  BOUNDARY [[(0,0,ISCHECK)], []]
                  ----EDGES----
                  0:0 -> 0:0 1
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,2)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,3)
                  LOCAL-SYM: 
                  BOOLEAN;ISCHECK;(0,0)
                  } 2
                2 0 %na=BODY0
                  Graph {
                  ----NODES----
                  1 ABUILD [||] [|0|]
                  BOUNDARY [[], [(1,0)]]
                  ----EDGES----
                  1:0 -> 0:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,2)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,3)
                  } 3
                1 0 %na=ELSE0
                  Graph {
                  ----NODES----
                  1 AADDH [||] [|0|]
                  BOUNDARY [[(0,1,ROW);(0,0,PARTIAL_ASSIGNMENT)], [(1,0)]]
                  ----EDGES----
                  1:0 -> 0:0 7
                  0:1 -> 1:1 5
                  0:0 -> 1:0 7
                  GLOBAL-SYM: 
                  INTEGRAL;ROW;(0,2)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
                  INTEGRAL;LEVEL;(0,0)
                  BOOLEAN;ISCHECK;(1,0)
                  INTEGRAL;COLUMN;(0,3)
                  LOCAL-SYM: 
                  INTEGRAL;ROW;(0,1)
                  ARRAY 5;PARTIAL_ASSIGNMENT;(0,0)
                  } 3
                BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(2,0);(1,0);(3,0)]]
                ----EDGES----
                3:0 -> 0:0 1
                2:0 -> 0:2 7
                1:0 -> 0:1 7
                0:1 -> 3:0 5
                0:2 -> 1:0 5
                0:0 -> 1:1 7
                GLOBAL-SYM: 
                INTEGRAL;ROW;(0,2)
                ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
                INTEGRAL;LEVEL;(0,0)
                BOOLEAN;ISCHECK;(1,0)
                INTEGRAL;COLUMN;(0,3)
                } 4 3,2,1,3
              1 INVOCATION [||] [||] %na=IN_CHECK
              BOUNDARY [[(0,3,COLUMN);(0,2,ROW);(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], [(7,0);(4,0)]]
              ----EDGES----
              7:0 -> 0:1 1
              4:0 -> 0:0 7
              1:0 -> 7:0 1
              0:3 -> 1:1 5
              0:2 -> 1:0 5
              0:1 -> 1:2 7
              GLOBAL-SYM: 
              INTEGRAL;ROW;(3,0)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(3,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(0,2)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
              INTEGRAL;LEVEL;(0,0)
              BOOLEAN;ISCHECK;(1,0)
              INTEGRAL;COLUMN;(0,3)
              ARRAY 5;ASSIGNMENT;(4,0)
              } 8
            2 0 %na=GENERATOR
              Graph {
              ----NODES----
              3 RANGEGEN [||] [|0|]
              2 "8"
              1 "1"
              BOUNDARY [[(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], [(3,0)]]
              ----EDGES----
              3:0 -> 0:2 5
              2:0 -> 3:1 5
              1:0 -> 3:0 5
              GLOBAL-SYM: 
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
              INTEGRAL;LEVEL;(0,0)
              INTEGRAL;COLUMN;(3,0)
              LOCAL-SYM: 
              INTEGRAL;ROW;(3,0)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
              INTEGRAL;LEVEL;(0,0)
              } 4
            1 0 %na=RETURN
              Graph {
              ----NODES----
              1 AGATHER [||] [|0|]
              BOUNDARY [[(0,2,);(0,1,);(0,0,)], [(1,0)]]
              ----EDGES----
              1:0 -> 0:0 8
              0:2 -> 1:2 1
              0:1 -> 1:1 7
              0:0 -> 1:0 5
              GLOBAL-SYM: 
              INTEGRAL;ROW;(0,2)
              ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
              INTEGRAL;LEVEL;(0,0)
              BOOLEAN;ISCHECK;(1,0)
              INTEGRAL;COLUMN;(0,3)
              ARRAY 5;ASSIGNMENT;(4,0)
              } 2
            BOUNDARY [[(0,3,COLUMN);(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], []]
            GLOBAL-SYM: 
            INTEGRAL;ROW;(0,2)
            ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
            INTEGRAL;LEVEL;(0,0)
            BOOLEAN;ISCHECK;(1,0)
            INTEGRAL;COLUMN;(0,3)
            ARRAY 5;ASSIGNMENT;(4,0)
            LOCAL-SYM: 
            ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
            INTEGRAL;LEVEL;(0,0)
            INTEGRAL;COLUMN;(0,3)
            } 4 3,2,3,1
          3 ADD [||] [||]
          2 ASIZE [||] [||]
          1 "1"
          BOUNDARY [[(0,1,PARTIAL_ASSIGNMENT);(0,0,LEVEL)], [(8,0)]]
          ----EDGES----
          8:0 -> 0:0 8
          7:0 -> 8:0 8
          5:1 -> 8:0 8
          3:0 -> 5:3 5
          2:0 -> 3:1 5
          1:0 -> 3:0 5
          0:1 -> 5:1 7
          0:0 -> 5:0 5
          0:1 -> 2:0 7
          GLOBAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
          ARRAY 7;NEW_ASSIGNMENT;(8,0)
          INTEGRAL;LEVEL;(0,0)
          INTEGRAL;COLUMN;(3,0)
          } 10
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          5 ASCATTER [||] [|0|]
          3 INVOCATION [||] [||] %na=MAIN
          2 SUBTRACT [||] [||]
          1 "1"
          BOUNDARY [[(0,0,LEVEL)], [(5,0)]]
          ----EDGES----
          5:0 -> 0:1 7
          3:0 -> 5:0 8
          2:0 -> 3:0 5
          1:0 -> 2:1 5
          0:0 -> 2:0 5
          GLOBAL-SYM: 
          INTEGRAL;LEVEL;(0,0)
          LOCAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(5,0)
          INTEGRAL;LEVEL;(0,0)
          } 6
        1 0 %na=RETURN
          Graph {
          ----NODES----
          2 "catenate"
          1 REDUCE [||] [|0|]
          BOUNDARY [[(0,1,)], [(1,0)]]
          ----EDGES----
          2:0 -> 1:0 2
          1:0 -> 0:0 8
          0:1 -> 1:1 8
          GLOBAL-SYM: 
          ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
          ARRAY 7;NEW_ASSIGNMENT;(8,0)
          INTEGRAL;LEVEL;(0,0)
          INTEGRAL;COLUMN;(3,0)
          } 3
        BOUNDARY [[(0,0,LEVEL)], []]
        GLOBAL-SYM: 
        ARRAY 5;PARTIAL_ASSIGNMENT;(0,1)
        ARRAY 7;NEW_ASSIGNMENT;(8,0)
        INTEGRAL;LEVEL;(0,0)
        INTEGRAL;COLUMN;(3,0)
        LOCAL-SYM: 
        INTEGRAL;LEVEL;(0,0)
        } 4 3,2,3,1
      BOUNDARY [[(0,0,LEVEL)], [(1,1)]]
      ----EDGES----
      1:1 -> 0:0 8
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      LOCAL-SYM: 
      INTEGRAL;LEVEL;(0,0)
      } 4
    BOUNDARY [[(0,0,)], [(2,0);(1,1);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 8
    1:1 -> 0:1 8
    0:0 -> 3:0 5
    0:0 -> 1:0 5
    GLOBAL-SYM: 
    INTEGRAL;LEVEL;(0,0)
    } 4 3,2,1,3
  BOUNDARY [[], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 8
  LOCAL-SYM: 
  INTEGRAL;LEVEL;(0,0)
  } 3
1 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      16 OR [||] [|0|]
      14 EQUAL [||] [||]
      12 SUBTRACT [||] [||]
      10 SUBTRACT [||] [||]
      9 OR [||] [||]
      7 EQUAL [||] [||]
      5 ADD [||] [||]
      3 ADD [||] [||]
      1 EQUAL [||] [||]
      BOUNDARY [[(0,4,C);(0,3,COLUMN);(0,2,ROW);(0,1,R);(0,0,QUEENS)], [(16,0)]]
      ----EDGES----
      16:0 -> 0:0 1
      14:0 -> 16:1 1
      12:0 -> 14:1 5
      10:0 -> 14:0 5
      9:0 -> 16:0 1
      7:0 -> 9:1 1
      5:0 -> 7:1 5
      3:0 -> 7:0 5
      1:0 -> 9:0 1
      0:4 -> 12:1 5
      0:1 -> 12:0 5
      0:3 -> 10:1 5
      0:2 -> 10:0 5
      0:4 -> 5:1 5
      0:1 -> 5:0 5
      0:3 -> 3:1 5
      0:2 -> 3:0 5
      0:2 -> 1:1 5
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;ROW;(1,0)
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 17
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0,0|]
      BOUNDARY [[(0,0,QUEENS)], [(1,1);(1,0)]]
      ----EDGES----
      1:1 -> 0:1 5
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,2)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(1,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "sum"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 1
      0:1 -> 1:1 1
      GLOBAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 3
    BOUNDARY [[(0,4,C);(0,1,R);(0,0,QUEENS)], []]
    GLOBAL-SYM: 
    INTEGRAL;ROW;(0,2)
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;COLUMN;(0,3)
    INTEGRAL;C;(0,4)
    LOCAL-SYM: 
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;C;(0,4)
    } 4 3,2,3,1
  BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(1,1)], %na=IN_CHECK]
  ----EDGES----
  1:1 -> 0:0 1
  0:2 -> 1:0 7
  0:1 -> 1:4 5
  0:0 -> 1:1 5
  LOCAL-SYM: 
  INTEGRAL;R;(0,0)
  ARRAY 5;QUEENS;(0,2)
  INTEGRAL;C;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
16 FUNCTION_TYPE MAIN (ARGS: 15) (RETURNS:14)
15 TUPLE {Type label:5; Next label:0}
14 TUPLE {Type label:8; Next label:0}
13 FUNCTION_TYPE IN_CHECK (ARGS: 12) (RETURNS:9)
12 TUPLE {Type label:5; Next label:11}
11 TUPLE {Type label:5; Next label:10}
10 TUPLE {Type label:7; Next label:0}
9 TUPLE {Type label:1; Next label:0}
8 ARRAY 7
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
SOLUTION_LIST:8
REAL:3
QUEEN_LIST:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 3
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS SOLUTION_LIST)
  IF LEVEL = 1 THEN
FOR ROW IN 1,4
              ASSIGNMENT := ARRAY QUEEN_LIST [1:ROW]
      RETURNS
        ARRAY OF ASSIGNMENT
    END FOR
  ELSE FOR PARTIAL_ASSIGNMENT IN MAIN(LEVEL - 1)
          COLUMN := 1 + ARRAY_SIZE(PARTIAL_ASSIGNMENT);
      NEW_ASSIGNMENT := FOR ROW IN 1,8
                  ISCHECK := IN_CHECK(ROW,COLUMN,PARTIAL_ASSIGNMENT);
          ASSIGNMENT := IF ISCHECK THEN
ARRAY QUEEN_LIST[]
          ELSE ARRAY_ADDH(PARTIAL_ASSIGNMENT,ROW)
          END IF
        RETURNS
          ARRAY OF ASSIGNMENT UNLESS ISCHECK
      END FOR
    RETURNS
      VALUE OF CATENATE NEW_ASSIGNMENT
  END FOR
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-62fdbc.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e08e13.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-955bab.dot
Val-nums
Output Dot in /tmp/graph-790de6.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-dfcb0b.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-f7de0f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-db5119.dot
Val-nums
Output Dot in /tmp/graph-db0dd4.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2a1662.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7004fe.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-354946.dot
Val-nums
Output Dot in /tmp/graph-fe234f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-e50d93.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 9; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (3,4 aka [5; 1; 0; 0; 7; -1])
WITNESS:4
SIZE 1 :- (3,7 aka [5; 1; 2; 0; 7; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,6 aka [8; 4; 0; 0; 7; 8; 1; 1; 1; 7; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,9 aka [8; 6; 0; 0; 7; 8; 7; 0; 1; 7; -1])
WITNESS:9
Val-nums
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e96ad6.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [20; 1; 0; 0; 5; 20; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3a4aba.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-056fab.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; 0; 22; 1; 1; 7; 0; 14; 1; 1; 7; 0; 6; 1; 1; 7; 0; 24; 2; 2; 7; 0; 16; 2; 2; 7; 0; 8; 2; 2; 7; 0; 12; 0; 3; 7; 0; 20; 0; 6; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
SIZE 1 :- (1,17 aka [17; -1])
WITNESS:17
SIZE 1 :- (1,25 aka [25; -1])
WITNESS:25
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:3 FOR 9 TREES :- (6,3 aka [36; 0; 0; 0; 7; -1]);(6,5 aka [36; 0; 0; 0; 7; -1]);(6,7 aka [36; 0; 0; 0; 7; -1]);(6,11 aka [36; 0; 0; 0; 7; -1]);(6,13 aka [36; 0; 0; 0; 7; -1]);(6,15 aka [36; 0; 0; 0; 7; -1]);(6,19 aka [36; 0; 0; 0; 7; -1]);(6,21 aka [36; 0; 0; 0; 7; -1]);(6,23 aka [36; 0; 0; 0; 7; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:4 FOR 9 TREES :- (6,4 aka [42; 3; 0; 1; 5; -1]);(6,6 aka [42; 5; 0; 1; 5; -1]);(6,8 aka [42; 7; 0; 1; 5; -1]);(6,12 aka [42; 11; 0; 1; 5; -1]);(6,14 aka [42; 13; 0; 1; 5; -1]);(6,16 aka [42; 15; 0; 1; 5; -1]);(6,20 aka [42; 19; 0; 1; 5; -1]);(6,22 aka [42; 21; 0; 1; 5; -1]);(6,24 aka [42; 23; 0; 1; 5; -1])
Val-nums
25 -> 25
24 -> 4
23 -> 3
22 -> 4
21 -> 3
20 -> 4
19 -> 3
17 -> 17
16 -> 4
15 -> 3
14 -> 4
13 -> 3
12 -> 4
11 -> 3
9 -> 9
8 -> 4
7 -> 3
6 -> 4
5 -> 3
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-10cbfb.dot
Val-nums
Output Dot in /tmp/graph-984e3c.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  25 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 GREATER [||] [||]
      2 "2"
      1 ASIZE [||] [||]
      BOUNDARY [[(0,0,DATA)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      9 ACATENATE [||] [|0|]
      7 INVOCATION [||] [||] %na=MAIN
      6 ACATENATE [||] [||]
      4 INVOCATION [||] [||] %na=MAIN
      1 INVOCATION [||] [||] %na=SPLIT
      BOUNDARY [[(0,0,DATA)], [(9,0)]]
      ----EDGES----
      9:0 -> 0:0 7
      7:0 -> 9:1 7
      6:0 -> 9:0 7
      4:0 -> 6:0 7
      1:2 -> 7:0 7
      1:1 -> 6:1 7
      1:0 -> 4:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 12
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,DATA)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 7
    1:0 -> 0:1 7
    0:0 -> 3:0 7
    0:1 -> 2:0 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,1,3
  24 ASETL [||] [|0|]
  23 ALIML [||] [||] %na=ALimL
  22 ASETL [||] [|0|]
  21 ALIML [||] [||] %na=ALimL
  20 ASETL [||] [|0|]
  19 ALIML [||] [||] %na=ALimL
  17 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  16 ASETL [||] [|0|]
  15 ALIML [||] [||] %na=ALimL
  14 ASETL [||] [|0|]
  13 ALIML [||] [||] %na=ALimL
  12 ASETL [||] [|0|]
  11 ALIML [||] [||] %na=ALimL
  9 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  8 ASETL [||] [|0|]
  7 ALIML [||] [||] %na=ALimL
  6 ASETL [||] [|0|]
  5 ALIML [||] [||] %na=ALimL
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(25,0);(24,2);(22,1);(20,0);(16,2);(14,1);(12,0);(8,2);(6,1);(4,0)], %na=MASHAN ,%na=MOSHAN ,%na=SPLIT ,%na=MAIN]
  ----EDGES----
  25:0 -> 0:9 7
  17:1 -> 24:0 7
  17:1 -> 22:0 7
  17:1 -> 20:0 7
  9:1 -> 16:0 7
  9:1 -> 14:0 7
  9:1 -> 12:0 7
  4:2 -> 0:2 7
  4:1 -> 0:1 7
  4:0 -> 0:6 7
  4:0 -> 0:3 7
  4:0 -> 0:0 7
  3:0 -> 24:1 5
  3:0 -> 22:1 5
  3:0 -> 20:1 5
  3:0 -> 16:1 5
  3:0 -> 14:1 5
  3:0 -> 12:1 5
  3:0 -> 8:1 5
  3:0 -> 6:1 5
  3:0 -> 4:1 5
  1:1 -> 8:0 7
  1:1 -> 6:0 7
  1:1 -> 4:0 7
  0:0 -> 23:0 7
  0:0 -> 21:0 7
  0:0 -> 19:0 7
  0:0 -> 17:0 7
  0:0 -> 15:0 7
  0:0 -> 13:0 7
  0:0 -> 11:0 7
  0:0 -> 9:0 7
  0:0 -> 7:0 7
  0:0 -> 5:0 7
  0:0 -> 3:0 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;DATA;(0,0)
  } 27
BOUNDARY [[], []]
----TYPEMAP----
25 FUNCTION_TYPE MASHAN (ARGS: 24) (RETURNS:23)
24 TUPLE {Type label:7; Next label:0}
23 TUPLE {Type label:7; Next label:22}
22 TUPLE {Type label:7; Next label:21}
21 TUPLE {Type label:7; Next label:0}
20 FUNCTION_TYPE MOSHAN (ARGS: 19) (RETURNS:18)
19 TUPLE {Type label:7; Next label:0}
18 TUPLE {Type label:7; Next label:17}
17 TUPLE {Type label:7; Next label:16}
16 TUPLE {Type label:7; Next label:0}
15 FUNCTION_TYPE SPLIT (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:7; Next label:0}
13 TUPLE {Type label:7; Next label:12}
12 TUPLE {Type label:7; Next label:11}
11 TUPLE {Type label:7; Next label:0}
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
INFO:7
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FUNCTION MOSHAN (DATA:INFO RETURNS INFO,INFO,INFO)
      FUNCTION MASHAN (DATA:INFO RETURNS INFO,INFO,INFO)
        FOR E IN DATA
          RETURNS
            ARRAY OF E WHEN E < DATA[1]
            ARRAY OF E WHEN E = DATA[1]
            ARRAY OF E WHEN E > DATA[1]
        END FOR
      END FUNCTION
      FOR E IN DATA
        RETURNS
          ARRAY OF E WHEN E < DATA[1]
          ARRAY OF E WHEN E = DATA[1]
          ARRAY OF E WHEN E > DATA[1]
      END FOR
    END FUNCTION
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; 0; 3; 0; 2; 7; -1])
SIZE 1 :- (13,3 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 2; 2; 1; -1])
WITNESS:3
SIZE 1 :- (13,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 3; 2; 1; -1])
WITNESS:2
SIZE 1 :- (13,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 5; 34; 0; 4; 2; 1; -1])
WITNESS:1
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-ae0d5f.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-eabd28.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 1; 0; 5; 0; 0; 1; 1; 5; 0; 0; 1; 2; 5; 0; 9; 0; 3; 1; 0; 6; 0; 4; 1; 0; 3; 0; 5; 1; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,7 aka [7; -1])
WITNESS:7
-------------------
At Height:2
SIZE 1 :- (7,2 aka [32; 0; 0; 0; 7; 32; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,5 aka [32; 0; 0; 0; 7; 32; 4; 0; 1; 5; -1])
WITNESS:5
SIZE 1 :- (7,8 aka [32; 0; 0; 0; 7; 32; 7; 0; 1; 5; -1])
WITNESS:8
-------------------
At Height:3
SIZE 1 :- (1,6 aka [16; 0; 1; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:6
SIZE 1 :- (1,3 aka [18; 0; 1; 0; 5; 18; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (1,9 aka [20; 0; 1; 0; 5; 20; 8; 0; 1; 5; -1])
WITNESS:9
Val-nums
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5a1fd2.dot
Val-nums
Output Dot in /tmp/graph-192426.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-ce424d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 9; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [5; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (3,4 aka [5; 1; 0; 0; 7; -1])
WITNESS:4
SIZE 1 :- (3,7 aka [5; 1; 2; 0; 7; -1])
WITNESS:7
-------------------
At Height:4
SIZE 1 :- (1,6 aka [8; 4; 0; 0; 7; 8; 1; 1; 1; 7; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,9 aka [8; 6; 0; 0; 7; 8; 7; 0; 1; 7; -1])
WITNESS:9
Val-nums
9 -> 9
7 -> 7
6 -> 6
4 -> 4
1 -> 1
0 -> 0
Output Dot in /tmp/graph-6e5bb9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 1; -1])
WITNESS:0
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,1 aka [43; 0; 0; 0; 7; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,3 aka [20; 1; 0; 0; 5; 20; 2; 0; 1; 5; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1598ae.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-f08123.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; 0; 6; 1; 1; 7; 0; 8; 2; 2; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:3 FOR 3 TREES :- (6,3 aka [36; 0; 0; 0; 7; -1]);(6,5 aka [36; 0; 0; 0; 7; -1]);(6,7 aka [36; 0; 0; 0; 7; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:4 FOR 3 TREES :- (6,4 aka [42; 3; 0; 1; 5; -1]);(6,6 aka [42; 5; 0; 1; 5; -1]);(6,8 aka [42; 7; 0; 1; 5; -1])
Val-nums
9 -> 9
8 -> 4
7 -> 3
6 -> 4
5 -> 3
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-493257.dot
Val-nums
Output Dot in /tmp/graph-33eb40.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  9 0 %na=SELECT
    Graph {
    ----NODES----
    3 0 %na=PREDICATE0
      Graph {
      ----NODES----
      3 GREATER [||] [||]
      2 "2"
      1 ASIZE [||] [||]
      BOUNDARY [[(0,0,DATA)], []]
      ----EDGES----
      3:0 -> 0:0 1
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 5
    2 0 %na=BODY0
      Graph {
      ----NODES----
      9 ACATENATE [||] [|0|]
      7 INVOCATION [||] [||] %na=MAIN
      6 ACATENATE [||] [||]
      4 INVOCATION [||] [||] %na=MAIN
      1 INVOCATION [||] [||] %na=SPLIT
      BOUNDARY [[(0,0,DATA)], [(9,0)]]
      ----EDGES----
      9:0 -> 0:0 7
      7:0 -> 9:1 7
      6:0 -> 9:0 7
      4:0 -> 6:0 7
      1:2 -> 7:0 7
      1:1 -> 6:1 7
      1:0 -> 4:0 7
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 12
    1 0 %na=ELSE0
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,DATA)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      ARRAY 5;DATA;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], [(2,0);(1,0);(3,0)]]
    ----EDGES----
    3:0 -> 0:0 1
    2:0 -> 0:2 7
    1:0 -> 0:1 7
    0:0 -> 3:0 7
    0:1 -> 2:0 7
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,1,3
  8 ASETL [||] [|0|]
  7 ALIML [||] [||] %na=ALimL
  6 ASETL [||] [|0|]
  5 ALIML [||] [||] %na=ALimL
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      9 GREATER [||] [|0|]
      8 AELEMENT [||] [||]
      7 "1"
      6 EQUAL [||] [|0|]
      5 AELEMENT [||] [||]
      4 "1"
      3 LESSER [||] [|0|]
      2 AELEMENT [||] [||]
      1 "1"
      BOUNDARY [[(0,1,E);(0,0,DATA)], [(3,0);(6,0);(9,0);(0,1);(0,1);(0,1)]]
      ----EDGES----
      9:0 -> 0:3 1
      8:0 -> 9:1 5
      7:0 -> 8:1 5
      6:0 -> 0:4 1
      5:0 -> 6:1 5
      4:0 -> 5:1 5
      3:0 -> 0:5 1
      2:0 -> 3:1 5
      1:0 -> 2:1 5
      0:1 -> 9:0 5
      0:0 -> 8:0 7
      0:1 -> 6:0 5
      0:0 -> 5:0 7
      0:1 -> 3:0 5
      0:0 -> 2:0 7
      0:1 -> 0:2 5
      0:1 -> 0:1 5
      0:1 -> 0:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 10
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,DATA)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 5;DATA;(0,0)
      LOCAL-SYM: 
      INTEGRAL;E;(1,0)
      ARRAY 5;DATA;(0,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      3 AGATHER [||] [|0|]
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,2,);(0,3,);(0,4,);(0,1,);(0,0,)], [(3,0);(2,0);(1,0)]]
      ----EDGES----
      3:0 -> 0:2 7
      2:0 -> 0:1 7
      1:0 -> 0:0 7
      0:2 -> 3:2 1
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      0:3 -> 2:2 1
      0:1 -> 2:1 5
      0:0 -> 2:0 5
      0:4 -> 1:2 1
      0:1 -> 1:1 5
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;E;(0,1)
      ARRAY 5;DATA;(0,0)
      } 4
    BOUNDARY [[(0,0,DATA)], []]
    GLOBAL-SYM: 
    INTEGRAL;E;(0,1)
    ARRAY 5;DATA;(0,0)
    LOCAL-SYM: 
    ARRAY 5;DATA;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(9,0);(8,2);(6,1);(4,0)], %na=SPLIT ,%na=MAIN]
  ----EDGES----
  9:0 -> 0:3 7
  4:2 -> 0:2 7
  4:1 -> 0:1 7
  4:0 -> 0:0 7
  3:0 -> 8:1 5
  3:0 -> 6:1 5
  3:0 -> 4:1 5
  1:1 -> 8:0 7
  1:1 -> 6:0 7
  1:1 -> 4:0 7
  0:0 -> 7:0 7
  0:0 -> 5:0 7
  0:0 -> 3:0 7
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 5;DATA;(0,0)
  } 11
BOUNDARY [[], []]
----TYPEMAP----
15 FUNCTION_TYPE SPLIT (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:7; Next label:0}
13 TUPLE {Type label:7; Next label:12}
12 TUPLE {Type label:7; Next label:11}
11 TUPLE {Type label:7; Next label:0}
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
INFO:7
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE INFO = ARRAY [INTEGER]
FUNCTION MAIN (DATA:INFO RETURNS INFO)
  FUNCTION SPLIT (DATA:INFO RETURNS INFO,INFO,INFO)
    FOR E IN DATA
      RETURNS
        ARRAY OF E WHEN E < DATA[1]
        ARRAY OF E WHEN E = DATA[1]
        ARRAY OF E WHEN E > DATA[1]
    END FOR
  END FUNCTION
  IF ARRAY_SIZE(DATA) > 2 THEN
LET
      L,MIDDLE,R := SPLIT(DATA) IN
    MAIN(L) || MIDDLE || MAIN(R)
    END LET
  ELSE DATA
  END IF
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE CHARTREE = RECORD [L:RECORD [R:REAL];S:REAL]
FUNCTION MAIN (RETURNS REAL)
  LET
    BB:CHARTREE := RECORD [ L:RECORD [ R:0.2 ];S:3.14 ] IN
  BB REPLACE [ L.R:3.2;S:1.23 ]
  END LET
END FUNCTION
Unexpected: "" in file: test/record1.sis (line 11: char 0..0)
there was an error: If1.Node_not_found("Could not locate record#:3")
DEFINE MAIN
TYPE CART = RECORD [X,Y:REAL]
FUNCTION MAIN (RETURNS CART)
  LET
    ORIGIN:CART := RECORD [ X:4.2;Y:3.1 ] IN
  LET
    XX:REAL := ORIGIN.X * 2. IN
  LET
    HOME:CART := ORIGIN REPLACE [ Y:XX ] IN
  HOME
  END LET
  END LET
  END LET
END FUNCTION
-------------------
At Height:1
WITNESS:1
WITNESS:2
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
-------------------
At Height:2
SIZE 1 :- (1,3 aka [21; 2; 0; 0; 3; 21; 1; 0; 1; 3; -1])
WITNESS:3
-------------------
At Height:3
SIZE 1 :- (1,4 aka [22; 3; 0; 1; 9; -1])
WITNESS:4
-------------------
At Height:4
SIZE 1 :- (1,6 aka [11; 4; 0; 0; 3; 11; 5; 0; 1; 3; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,7 aka [23; 3; 0; 0; 9; 23; 6; 0; 2; 3; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-937e03.dot
Val-nums
Output Dot in /tmp/graph-770436.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  7 RREPLACE [|Y|] [|0|]
  6 TIMES [||] [||]
  5 "2."
  4 RELEMENTS [|X|] [||]
  3 RBUILD [||] [||]
  2 "3.1"
  1 "4.2"
  BOUNDARY [[], [(7,0)]]
  ----EDGES----
  7:0 -> 0:0 9
  6:0 -> 7:2 3
  5:0 -> 6:1 3
  4:0 -> 6:0 3
  3:0 -> 7:0 9
  3:0 -> 4:1 9
  2:0 -> 3:0 3
  1:0 -> 3:1 3
  } 11
BOUNDARY [[], []]
----TYPEMAP----
11 FUNCTION_TYPE  (ARGS: 0) (RETURNS:10)
10 TUPLE {Type label:9; Next label:0}
9 RECORD {Type label:0; Next field:8; %na=}
8 RECORD {Type label:3; Next field:7; %na=X}
7 RECORD {Type label:3; Next field:0; %na=Y}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
CART:9
BOOLEAN:1
} 2
DEFINE MAIN
TYPE CART = RECORD [X,Y:REAL]
FUNCTION MAIN (RETURNS CART)
  LET
    ORIGIN:CART := RECORD [ X:4.2;Y:3.1 ] IN
  LET
    XX:REAL := ORIGIN.X * 2. IN
  LET
    HOME:CART := ORIGIN REPLACE [ Y:XX ] IN
  HOME
  END LET
  END LET
  END LET
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
FUNCTION MAIN (RETURNS STREAM [REAL])
  STREAM [1.2,3.2]
END FUNCTION
-------------------
At Height:1
WITNESS:1
WITNESS:2
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [25; 2; 0; 0; 0; 25; 3; 0; 1; 0; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,5 aka [25; 1; 0; 0; 0; 25; 4; 0; 1; 0; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-abad9b.dot
Val-nums
Output Dot in /tmp/graph-639bdf.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  5 SAPPEND [||] [|0|]
  4 SAPPEND [||] [||]
  3 SBUILD [||] [||]
  2 "3.2"
  1 "1.2"
  BOUNDARY [[], [(5,0)]]
  ----EDGES----
  5:0 -> 0:0 0
  4:0 -> 5:1 0
  3:0 -> 4:1 0
  2:0 -> 4:0 0
  1:0 -> 5:0 0
  } 6
BOUNDARY [[], []]
----TYPEMAP----
9 FUNCTION_TYPE  (ARGS: 0) (RETURNS:8)
8 TUPLE {Type label:7; Next label:0}
7 STREAM (3)
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
FUNCTION MAIN (RETURNS STREAM [REAL])
  STREAM [1.2,3.2]
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;D : AR]
FUNCTION MAIN (X:UN RETURNS REAL)
  TAGCASE P:=X
TAG B:22
TAG D:3.
OTHERWISE 4.
END FUNCTION
Unexpected: "" in file: test/tagcase_bad.sis (line 12: char 0..0)
there was an error: If1.Sem_error("Output types do not match for:P")
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : INTEGER;D : AR]
FUNCTION MAIN (X:UN;I,E:INTEGER RETURNS INTEGER)
  TAGCASE P:=X
TAG D:P[I]
TAG A:I
OTHERWISE 4
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 5; -1])
SIZE 1 :- (1,1 aka [32; 0; 0; 0; 7; 32; 0; 0; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5f8ae1.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 1; 5; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-58ea95.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
Output Dot in /tmp/graph-057c87.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-c08acc.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-019485.dot
Val-nums
Output Dot in /tmp/graph-b1cb32.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=TAGCASE
    Graph {
    ----NODES----
    3 0 %na=OTHERWISE
      Graph {
      ----NODES----
      1 "4"
      BOUNDARY [[], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      INTEGRAL;I;(0,1)
      INTEGRAL;E;(0,2)
      } 3
    2 0 %na=A
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,I)], [(0,0)]]
      ----EDGES----
      0:0 -> 0:1 5
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      INTEGRAL;I;(0,1)
      INTEGRAL;E;(0,2)
      LOCAL-SYM: 
      INTEGRAL;P;(0,0)
      INTEGRAL;I;(0,0)
      } 2
    1 0 %na=D
      Graph {
      ----NODES----
      1 AELEMENT [||] [|0|]
      BOUNDARY [[(0,0,I)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 5
      0:0 -> 1:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      INTEGRAL;I;(0,1)
      INTEGRAL;E;(0,2)
      LOCAL-SYM: 
      ARRAY 5;P;(0,0)
      INTEGRAL;I;(0,0)
      } 3
    BOUNDARY [[(0,1,);(0,0,)], []]
    ----EDGES----
    0:1 -> 2:1 11
    0:0 -> 2:0 5
    0:1 -> 1:1 11
    0:0 -> 1:0 7
    GLOBAL-SYM: 
    UNION {Type label:0; Next tag:10; %na=};X;(0,0)
    INTEGRAL;I;(0,1)
    INTEGRAL;E;(0,2)
    LOCAL-SYM: 
    UNION {Type label:0; Next tag:10; %na=};P;(0,0)
    } 4 TAGCASE 2,3,1
  BOUNDARY [[(0,2,)], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 0
  0:2 -> 1:1 11
  0:2 -> 1:0 5
  LOCAL-SYM: 
  UNION {Type label:0; Next tag:10; %na=};X;(0,0)
  INTEGRAL;I;(0,1)
  INTEGRAL;E;(0,2)
  } 2
BOUNDARY [[], []]
----TYPEMAP----
16 FUNCTION_TYPE MAIN (ARGS: 15) (RETURNS:12)
15 TUPLE {Type label:11; Next label:14}
14 TUPLE {Type label:5; Next label:13}
13 TUPLE {Type label:5; Next label:0}
12 TUPLE {Type label:5; Next label:0}
11 UNION {Type label:0; Next tag:10; %na=}
10 UNION {Type label:5; Next tag:9; %na=A}
9 UNION {Type label:5; Next tag:8; %na=B}
8 UNION {Type label:7; Next tag:0; %na=D}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
UN:11
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AR:7
} 2
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : INTEGER;D : AR]
FUNCTION MAIN (X:UN;I,E:INTEGER RETURNS INTEGER)
  TAGCASE P:=X
TAG D:P[I]
TAG A:I
OTHERWISE 4
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;D : AR]
FUNCTION MAIN (X:UN RETURNS REAL,REAL)
  TAGCASE P:=X
TAG B:P,P
TAG D:3.,5.
OTHERWISE 4.,2.
END FUNCTION
-------------------
At Height:1
WITNESS:0
Val-nums
Output Dot in /tmp/graph-3357ea.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 1; 3; 0; 0; 0; 2; 3; -1])
0 -> 0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
Output Dot in /tmp/graph-242b35.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
Output Dot in /tmp/graph-0a0609.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-efd1c0.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-587b95.dot
Val-nums
Output Dot in /tmp/graph-98e4f9.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=TAGCASE
    Graph {
    ----NODES----
    3 0 %na=OTHERWISE
      Graph {
      ----NODES----
      2 "2."
      1 "4."
      BOUNDARY [[], [(1,0);(2,0)]]
      ----EDGES----
      2:0 -> 0:1 3
      1:0 -> 0:2 3
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      } 4
    2 0 %na=D
      Graph {
      ----NODES----
      2 "5."
      1 "3."
      BOUNDARY [[], [(1,0);(2,0)]]
      ----EDGES----
      2:0 -> 0:1 3
      1:0 -> 0:2 3
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      LOCAL-SYM: 
      ARRAY 5;P;(0,0)
      } 4
    1 0 %na=B
      Graph {
      ----NODES----
      BOUNDARY [[(0,0,)], [(0,0);(0,0)]]
      ----EDGES----
      0:0 -> 0:2 3
      0:0 -> 0:1 3
      GLOBAL-SYM: 
      UNION {Type label:0; Next tag:10; %na=};X;(0,0)
      UNION {Type label:0; Next tag:10; %na=};P;(0,0)
      LOCAL-SYM: 
      REAL;P;(0,0)
      } 2
    BOUNDARY [[(0,1,);(0,0,)], []]
    ----EDGES----
    0:1 -> 1:1 11
    0:0 -> 1:0 3
    GLOBAL-SYM: 
    UNION {Type label:0; Next tag:10; %na=};X;(0,0)
    LOCAL-SYM: 
    UNION {Type label:0; Next tag:10; %na=};P;(0,0)
    } 4 TAGCASE 3,1,2
  BOUNDARY [[(0,2,)], [(1,0)], %na=MAIN]
  ----EDGES----
  1:0 -> 0:0 0
  0:2 -> 1:0 11
  LOCAL-SYM: 
  UNION {Type label:0; Next tag:10; %na=};X;(0,0)
  } 2
BOUNDARY [[], []]
----TYPEMAP----
15 FUNCTION_TYPE MAIN (ARGS: 14) (RETURNS:13)
14 TUPLE {Type label:11; Next label:0}
13 TUPLE {Type label:3; Next label:12}
12 TUPLE {Type label:3; Next label:0}
11 UNION {Type label:0; Next tag:10; %na=}
10 UNION {Type label:5; Next tag:9; %na=A}
9 UNION {Type label:3; Next tag:8; %na=B}
8 UNION {Type label:7; Next tag:0; %na=D}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
UN:11
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AR:7
} 2
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;D : AR]
FUNCTION MAIN (X:UN RETURNS REAL,REAL)
  TAGCASE P:=X
TAG B:P,P
TAG D:3.,5.
OTHERWISE 4.,2.
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 1; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 1; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7ac211.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 5; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b40c1a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 16; 0; 0; 1; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [16; 0; 1; 0; 5; 16; 0; 2; 1; 5; -1])
WITNESS:1
SIZE 1 :- (3,5 aka [13; 0; 1; 0; 5; 13; 0; 4; 1; 5; -1])
WITNESS:5
SIZE 1 :- (3,3 aka [13; 0; 2; 0; 5; 13; 0; 3; 1; 5; -1])
WITNESS:3
SIZE 1 :- (3,12 aka [12; 0; 1; 0; 5; 12; 0; 4; 1; 5; -1])
WITNESS:12
SIZE 1 :- (3,10 aka [12; 0; 2; 0; 5; 12; 0; 3; 1; 5; -1])
WITNESS:10
-------------------
At Height:3
SIZE 1 :- (2,7 aka [16; 3; 0; 0; 5; 16; 5; 0; 1; 5; -1])
WITNESS:7
SIZE 1 :- (2,14 aka [16; 10; 0; 0; 5; 16; 12; 0; 1; 5; -1])
WITNESS:14
-------------------
At Height:4
SIZE 1 :- (1,9 aka [14; 1; 0; 0; 1; 14; 7; 0; 1; 1; -1])
WITNESS:9
-------------------
At Height:5
SIZE 1 :- (1,16 aka [14; 9; 0; 0; 1; 14; 14; 0; 1; 1; -1])
WITNESS:16
Val-nums
16 -> 16
14 -> 14
12 -> 12
10 -> 10
9 -> 9
7 -> 7
5 -> 5
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-0dd5ad.dot
Val-nums
Output Dot in /tmp/graph-8bdba1.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-778076.dot
Val-nums
Output Dot in /tmp/graph-6486a9.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      16 OR [||] [|0|]
      14 EQUAL [||] [||]
      12 SUBTRACT [||] [||]
      10 SUBTRACT [||] [||]
      9 OR [||] [||]
      7 EQUAL [||] [||]
      5 ADD [||] [||]
      3 ADD [||] [||]
      1 EQUAL [||] [||]
      BOUNDARY [[(0,4,C);(0,3,COLUMN);(0,2,ROW);(0,1,R);(0,0,QUEENS)], [(16,0)]]
      ----EDGES----
      16:0 -> 0:0 1
      14:0 -> 16:1 1
      12:0 -> 14:1 5
      10:0 -> 14:0 5
      9:0 -> 16:0 1
      7:0 -> 9:1 1
      5:0 -> 7:1 5
      3:0 -> 7:0 5
      1:0 -> 9:0 1
      0:4 -> 12:1 5
      0:1 -> 12:0 5
      0:3 -> 10:1 5
      0:2 -> 10:0 5
      0:4 -> 5:1 5
      0:1 -> 5:0 5
      0:3 -> 3:1 5
      0:2 -> 3:0 5
      0:2 -> 1:1 5
      0:1 -> 1:0 5
      GLOBAL-SYM: 
      INTEGRAL;ROW;(1,0)
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 17
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0,0|]
      BOUNDARY [[(0,0,QUEENS)], [(1,1);(1,0)]]
      ----EDGES----
      1:1 -> 0:1 5
      1:0 -> 0:1 5
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      INTEGRAL;R;(0,0)
      ARRAY 5;QUEENS;(0,2)
      INTEGRAL;C;(0,1)
      LOCAL-SYM: 
      INTEGRAL;ROW;(1,0)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(1,1)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "sum"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 1
      0:1 -> 1:1 1
      GLOBAL-SYM: 
      INTEGRAL;ROW;(0,2)
      INTEGRAL;R;(0,1)
      ARRAY 5;QUEENS;(0,0)
      INTEGRAL;COLUMN;(0,3)
      INTEGRAL;C;(0,4)
      } 3
    BOUNDARY [[(0,4,C);(0,1,R);(0,0,QUEENS)], []]
    GLOBAL-SYM: 
    INTEGRAL;ROW;(0,2)
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;COLUMN;(0,3)
    INTEGRAL;C;(0,4)
    LOCAL-SYM: 
    INTEGRAL;R;(0,1)
    ARRAY 5;QUEENS;(0,0)
    INTEGRAL;C;(0,4)
    } 4 3,2,3,1
  BOUNDARY [[(0,1,);(0,0,);(0,2,)], [(1,1)], %na=IN_CHECK]
  ----EDGES----
  1:1 -> 0:0 1
  0:2 -> 1:0 7
  0:1 -> 1:4 5
  0:0 -> 1:1 5
  LOCAL-SYM: 
  INTEGRAL;R;(0,0)
  ARRAY 5;QUEENS;(0,2)
  INTEGRAL;C;(0,1)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
13 FUNCTION_TYPE IN_CHECK (ARGS: 12) (RETURNS:9)
12 TUPLE {Type label:5; Next label:11}
11 TUPLE {Type label:5; Next label:10}
10 TUPLE {Type label:7; Next label:0}
9 TUPLE {Type label:1; Next label:0}
8 ARRAY 7
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
SOLUTION_LIST:8
REAL:3
QUEEN_LIST:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE QUEEN_LIST = ARRAY [INTEGER];
TYPE SOLUTION_LIST = ARRAY [QUEEN_LIST]
FUNCTION IN_CHECK (R,C:INTEGER;QUEENS:QUEEN_LIST RETURNS BOOLEAN)
  FOR ROW IN QUEENS AT COLUMN
    RETURNS
      VALUE OF SUM (R = ROW) | ((ROW + COLUMN) = (R + C)) | ((ROW - COLUMN) = (R - C))
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE INTLIST = UNION [EMPTY : NULL;FULL : RECORD [MOTE:INTEGER;NEXT:INTLIST]]
FUNCTION MAIN (LEVEL:REAL RETURNS REAL)
  LET
    X,Y:REAL := LEVEL + 1.,LEVEL + 1.2 IN
  LET
    Z:REAL := LEVEL - 4.3 IN
  TEMPFUN(X * Y + 2.2 * 3.1 * Z,X * Z + 2.3 * 3.5 * Y)
  END LET
  END LET
END FUNCTION
Unexpected: "" in file: test/test_bin2.sis (line 12: char 0..0)
there was an error: If1.Node_not_found("typename being added:INTLIST")
DEFINE MAIN
FUNCTION TEMPFUN (VV,UU:INTEGER RETURNS INTEGER)
  VV * UU
END FUNCTION
FUNCTION TEMPFUN2 (JJ:ARRAY [INTEGER] RETURNS INTEGER)
  JJ[0]
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS INTEGER)
  LET
    X,Y:INTEGER := LEVEL - 1,LEVEL + 1 IN
  LET
    Z:INTEGER := LEVEL - 4 IN
  TEMPFUN(X * Y + 2 * 3 * Z,X * Z + 2 * 3 * Y)
  END LET
  END LET
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 5; -1])
SIZE 1 :- (1,1 aka [11; 0; 0; 0; 5; 11; 0; 1; 1; 5; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-003885.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [32; 0; 0; 0; 11; 32; 1; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-758302.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 19; 0; 0; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
SIZE 1 :- (1,8 aka [8; -1])
WITNESS:8
SIZE 1 :- (1,9 aka [9; -1])
WITNESS:9
SIZE 1 :- (1,14 aka [14; -1])
WITNESS:14
SIZE 1 :- (1,15 aka [15; -1])
WITNESS:15
-------------------
At Height:2
SIZE 1 :- (1,4 aka [13; 0; 0; 0; 5; 13; 3; 0; 1; 5; -1])
WITNESS:4
SIZE 1 :- (2,10 aka [11; 8; 0; 0; 5; 11; 9; 0; 1; 5; -1])
WITNESS:10
SIZE 1 :- (2,16 aka [11; 14; 0; 0; 5; 11; 15; 0; 1; 5; -1])
WITNESS:16
SIZE 1 :- (7,2 aka [12; 0; 0; 0; 5; 12; 1; 0; 1; 5; -1])
WITNESS:2
SIZE 1 :- (7,6 aka [12; 0; 0; 0; 5; 12; 5; 0; 1; 5; -1])
WITNESS:6
-------------------
At Height:3
SIZE 1 :- (2,11 aka [11; 10; 0; 0; 5; 11; 6; 0; 1; 5; -1])
WITNESS:11
SIZE 1 :- (2,17 aka [11; 16; 0; 0; 5; 11; 4; 0; 1; 5; -1])
WITNESS:17
SIZE 1 :- (7,7 aka [11; 2; 0; 0; 5; 11; 4; 0; 1; 5; -1])
WITNESS:7
SIZE 1 :- (7,13 aka [11; 2; 0; 0; 5; 11; 6; 0; 1; 5; -1])
WITNESS:13
-------------------
At Height:4
SIZE 1 :- (2,12 aka [13; 7; 0; 0; 5; 13; 11; 0; 1; 5; -1])
WITNESS:12
SIZE 1 :- (2,18 aka [13; 13; 0; 0; 5; 13; 17; 0; 1; 5; -1])
WITNESS:18
-------------------
At Height:5
SIZE 1 :- (1,19 aka [5; 12; 0; 0; 5; 5; 18; 0; 1; 5; -1])
WITNESS:19
Val-nums
19 -> 19
18 -> 18
17 -> 17
16 -> 16
15 -> 15
14 -> 14
13 -> 13
12 -> 12
11 -> 11
10 -> 10
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-dafe61.dot
Val-nums
Output Dot in /tmp/graph-f5bab3.dot
Result graph
Graph {
----NODES----
3 0
  Graph {
  ----NODES----
  19 INVOCATION [||] [|0|] %na=TEMPFUN
  18 ADD [||] [||]
  17 TIMES [||] [||]
  16 TIMES [||] [||]
  15 "3"
  14 "2"
  13 TIMES [||] [||]
  12 ADD [||] [||]
  11 TIMES [||] [||]
  10 TIMES [||] [||]
  9 "3"
  8 "2"
  7 TIMES [||] [||]
  6 SUBTRACT [||] [||]
  5 "4"
  4 ADD [||] [||]
  3 "1"
  2 SUBTRACT [||] [||]
  1 "1"
  BOUNDARY [[(0,0,)], [(19,0)], %na=MAIN]
  ----EDGES----
  19:0 -> 0:0 5
  18:0 -> 19:1 5
  17:0 -> 18:1 5
  16:0 -> 17:0 5
  15:0 -> 16:1 5
  14:0 -> 16:0 5
  13:0 -> 18:0 5
  12:0 -> 19:0 5
  11:0 -> 12:1 5
  10:0 -> 11:0 5
  9:0 -> 10:1 5
  8:0 -> 10:0 5
  7:0 -> 12:0 5
  6:0 -> 13:1 5
  6:0 -> 11:1 5
  5:0 -> 6:1 5
  4:0 -> 17:1 5
  4:0 -> 7:1 5
  3:0 -> 4:1 5
  2:0 -> 13:0 5
  2:0 -> 7:0 5
  1:0 -> 2:1 5
  0:0 -> 6:0 5
  0:0 -> 4:0 5
  0:0 -> 2:0 5
  LOCAL-SYM: 
  INTEGRAL;LEVEL;(0,0)
  } 23
2 5
  Graph {
  ----NODES----
  2 AELEMENT [||] [|0|]
  1 "0"
  BOUNDARY [[(0,0,)], [(2,0)], %na=TEMPFUN2]
  ----EDGES----
  2:0 -> 0:0 5
  1:0 -> 2:1 5
  0:0 -> 2:0 11
  LOCAL-SYM: 
  ARRAY 5;JJ;(0,0)
  } 3
1 5
  Graph {
  ----NODES----
  1 TIMES [||] [|0|]
  BOUNDARY [[(0,1,);(0,0,)], [(1,0)], %na=TEMPFUN]
  ----EDGES----
  1:0 -> 0:0 5
  0:1 -> 1:1 5
  0:0 -> 1:0 5
  LOCAL-SYM: 
  INTEGRAL;VV;(0,0)
  INTEGRAL;UU;(0,1)
  } 2
BOUNDARY [[], []]
----TYPEMAP----
18 FUNCTION_TYPE MAIN (ARGS: 17) (RETURNS:16)
17 TUPLE {Type label:5; Next label:0}
16 TUPLE {Type label:5; Next label:0}
15 FUNCTION_TYPE TEMPFUN2 (ARGS: 14) (RETURNS:12)
14 TUPLE {Type label:13; Next label:0}
13 ARRAY 5
12 TUPLE {Type label:5; Next label:0}
11 ARRAY 5
10 FUNCTION_TYPE TEMPFUN (ARGS: 9) (RETURNS:7)
9 TUPLE {Type label:5; Next label:8}
8 TUPLE {Type label:5; Next label:0}
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 4
DEFINE MAIN
FUNCTION TEMPFUN (VV,UU:INTEGER RETURNS INTEGER)
  VV * UU
END FUNCTION
FUNCTION TEMPFUN2 (JJ:ARRAY [INTEGER] RETURNS INTEGER)
  JJ[0]
END FUNCTION
FUNCTION MAIN (LEVEL:INTEGER RETURNS INTEGER)
  LET
    X,Y:INTEGER := LEVEL - 1,LEVEL + 1 IN
  LET
    Z:INTEGER := LEVEL - 4 IN
  TEMPFUN(X * Y + 2 * 3 * Z,X * Z + 2 * 3 * Y)
  END LET
  END LET
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
FUNCTION MAIN (RETURNS INTEGER)
  3
END FUNCTION
-------------------
At Height:1
WITNESS:1
Val-nums
Output Dot in /tmp/graph-ba1327.dot
Val-nums
Output Dot in /tmp/graph-9d921d.dot
Result graph
Graph {
----NODES----
1 5
  Graph {
  ----NODES----
  1 "3"
  BOUNDARY [[], [(1,0)]]
  ----EDGES----
  1:0 -> 0:0 5
  } 2
BOUNDARY [[], []]
----TYPEMAP----
8 FUNCTION_TYPE  (ARGS: 0) (RETURNS:7)
7 TUPLE {Type label:5; Next label:0}
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
FUNCTION MAIN (RETURNS INTEGER)
  3
END FUNCTION
Output Dot in out.dot
SIZE 1 :- (1,1 aka [1; -1])
1 -> 1
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR K IN Y
          X := K + K
    RETURNS
      ARRAY OF X
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1390c5.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4fa113.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [13; 0; 1; 0; 4; 13; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-5facd3.dot
Val-nums
Output Dot in /tmp/graph-0ca900.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,3 aka [36; 0; 0; 0; 7; -1])
WITNESS:3
-------------------
At Height:3
SIZE 1 :- (1,4 aka [42; 3; 0; 1; 5; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-df1c11.dot
Val-nums
Output Dot in /tmp/graph-75ead4.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      1 ADD [||] [|0|]
      BOUNDARY [[(0,1,K);(0,0,Y)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 4
      0:1 -> 1:1 4
      0:1 -> 1:0 4
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,0)
      DOUBLE;T;(0,3)
      DOUBLE;R;(0,2)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      DOUBLE;K;(1,0)
      LOCAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;X;(1,0)
      DOUBLE;K;(0,1)
      } 3
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,Y)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 4
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,4)
      DOUBLE;T;(0,3)
      DOUBLE;R;(0,2)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      LOCAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;K;(1,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:1 -> 1:1 4
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 4;Z;(0,5)
      ARRAY 4;Y;(0,0)
      DOUBLE;X;(1,0)
      DOUBLE;T;(0,3)
      DOUBLE;R;(0,2)
      DOUBLE;Q;(0,1)
      INTEGRAL;N;(0,0)
      DOUBLE;K;(0,1)
      } 2
    BOUNDARY [[(0,0,Y)], []]
    GLOBAL-SYM: 
    ARRAY 4;Z;(0,5)
    ARRAY 4;Y;(0,0)
    DOUBLE;X;(1,0)
    DOUBLE;T;(0,3)
    DOUBLE;R;(0,2)
    DOUBLE;Q;(0,1)
    INTEGRAL;N;(0,0)
    DOUBLE;K;(0,1)
    LOCAL-SYM: 
    ARRAY 4;Y;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,4,);(0,0,)], [(4,0)], %na=MAIN]
  ----EDGES----
  4:0 -> 0:0 7
  3:0 -> 4:1 5
  1:1 -> 4:0 7
  0:0 -> 3:0 7
  0:4 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 4;Z;(0,5)
  ARRAY 4;Y;(0,4)
  DOUBLE;T;(0,3)
  DOUBLE;R;(0,2)
  DOUBLE;Q;(0,1)
  INTEGRAL;N;(0,0)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
15 FUNCTION_TYPE MAIN (ARGS: 14) (RETURNS:8)
14 TUPLE {Type label:5; Next label:13}
13 TUPLE {Type label:4; Next label:12}
12 TUPLE {Type label:4; Next label:11}
11 TUPLE {Type label:4; Next label:10}
10 TUPLE {Type label:7; Next label:9}
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONED:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (N:INTEGER;Q,R,T:DOUBLE;Y,Z:ONED RETURNS ONED)
  FOR K IN Y
          X := K + K
    RETURNS
      ARRAY OF X
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (Y:ONED RETURNS DOUBLE)
  FOR K IN Y
          X := K + K
    RETURNS
      VALUE OF SUM X
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:2
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 4; -1])
SIZE 1 :- (1,2 aka [2; -1])
SIZE 1 :- (1,1 aka [45; 2; 0; 0; 2; 45; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-54034e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 1; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-70ca9c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [13; 0; 1; 0; 4; 13; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-975c5a.dot
Val-nums
Output Dot in /tmp/graph-9fd03c.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-f4e634.dot
Val-nums
Output Dot in /tmp/graph-2c5758.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      1 ADD [||] [|0|]
      BOUNDARY [[(0,1,K);(0,0,Y)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 4
      0:1 -> 1:1 4
      0:1 -> 1:0 4
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;K;(1,0)
      LOCAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;X;(1,0)
      DOUBLE;K;(0,1)
      } 3
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0|]
      BOUNDARY [[(0,0,Y)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:1 4
      0:0 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,0)
      LOCAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;K;(1,0)
      } 2
    1 0 %na=RETURN
      Graph {
      ----NODES----
      2 "sum"
      1 REDUCE [||] [|0|]
      BOUNDARY [[(0,1,)], [(1,0)]]
      ----EDGES----
      2:0 -> 1:0 2
      1:0 -> 0:0 4
      0:1 -> 1:1 4
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,0)
      DOUBLE;X;(1,0)
      DOUBLE;K;(0,1)
      } 3
    BOUNDARY [[(0,0,Y)], []]
    GLOBAL-SYM: 
    ARRAY 4;Y;(0,0)
    DOUBLE;X;(1,0)
    DOUBLE;K;(0,1)
    LOCAL-SYM: 
    ARRAY 4;Y;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(1,1)], %na=MAIN]
  ----EDGES----
  1:1 -> 0:0 4
  0:0 -> 1:0 7
  LOCAL-SYM: 
  ARRAY 4;Y;(0,0)
  } 3
BOUNDARY [[], []]
----TYPEMAP----
10 FUNCTION_TYPE MAIN (ARGS: 9) (RETURNS:8)
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:4; Next label:0}
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONED:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (Y:ONED RETURNS DOUBLE)
  FOR K IN Y
          X := K + K
    RETURNS
      VALUE OF SUM X
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE TWOD = ARRAY [ARRAY [DOUBLE]];
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (Y:TWOD RETURNS ONED)
  FOR I IN 2,10 DOT J IN 1,10
    RETURNS
      ARRAY OF Y[J,I]
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-3b165b.dot
-------------------
At Height:1
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,2 aka [2; -1])
WITNESS:2
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
-------------------
At Height:2
SIZE 1 :- (2,3 aka [28; 1; 0; 0; 5; 28; 2; 0; 1; 5; -1])
WITNESS:3
SIZE 1 :- (2,6 aka [28; 4; 0; 0; 5; 28; 5; 0; 1; 5; -1])
WITNESS:6
Val-nums
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
Output Dot in /tmp/graph-fb8238.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 0; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [32; 0; 0; 0; 8; 32; 0; 1; 1; 5; -1])
WITNESS:1
-------------------
At Height:3
SIZE 1 :- (1,2 aka [32; 1; 0; 0; 7; 32; 0; 2; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4fbbfa.dot
Val-nums
Output Dot in /tmp/graph-68c438.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 7; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1cd14b.dot
Val-nums
Output Dot in /tmp/graph-d75574.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  4 ASETL [||] [|0|]
  3 "2"
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      2 AELEMENT [||] [|0|]
      1 AELEMENT [||] [||]
      BOUNDARY [[(0,2,I);(0,1,J);(0,0,Y)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:0 4
      1:0 -> 2:0 7
      0:2 -> 2:1 5
      0:1 -> 1:1 5
      0:0 -> 1:0 8
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,0)
      INTEGRAL;J;(6,0)
      INTEGRAL;I;(3,0)
      LOCAL-SYM: 
      ARRAY 7;Y;(0,0)
      INTEGRAL;J;(0,1)
      INTEGRAL;I;(0,2)
      } 3
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      6 RANGEGEN [||] [|0|]
      5 "10"
      4 "1"
      3 RANGEGEN [||] [|0|]
      2 "10"
      1 "2"
      BOUNDARY [[], [(6,0);(3,0)]]
      ----EDGES----
      6:0 -> 0:1 5
      5:0 -> 6:1 5
      4:0 -> 6:0 5
      3:0 -> 0:0 5
      2:0 -> 3:1 5
      1:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,0)
      LOCAL-SYM: 
      INTEGRAL;J;(6,0)
      INTEGRAL;I;(3,0)
      } 7
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:1 -> 1:1 4
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,0)
      INTEGRAL;J;(0,1)
      INTEGRAL;I;(0,2)
      } 2
    BOUNDARY [[(0,0,Y)], []]
    GLOBAL-SYM: 
    ARRAY 7;Y;(0,0)
    INTEGRAL;J;(0,1)
    INTEGRAL;I;(0,2)
    LOCAL-SYM: 
    ARRAY 7;Y;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,0,)], [(4,0)], %na=MAIN]
  ----EDGES----
  4:0 -> 0:0 7
  3:0 -> 4:0 7
  1:1 -> 4:0 7
  0:0 -> 1:0 8
  LOCAL-SYM: 
  ARRAY 7;Y;(0,0)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
12 FUNCTION_TYPE MAIN (ARGS: 11) (RETURNS:10)
11 TUPLE {Type label:8; Next label:0}
10 TUPLE {Type label:9; Next label:0}
9 ARRAY 4
8 ARRAY 7
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
TWOD:8
REAL:3
ONED:9
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE TWOD = ARRAY [ARRAY [DOUBLE]];
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (Y:TWOD RETURNS ONED)
  FOR I IN 2,10 DOT J IN 1,10
    RETURNS
      ARRAY OF Y[J,I]
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (N:INTEGER;Y:ONED RETURNS ONED)
  FOR I IN 1,N
    RETURNS
      ARRAY OF Y[I] * Y[I]
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-fc4a63.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-1f4433.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 3; 0; 0; 4; -1])
WITNESS:0
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:2 FOR 2 TREES :- (11,2 aka [32; 0; 1; 0; 7; 32; 0; 2; 1; 5; -1]);(11,1 aka [32; 0; 1; 0; 7; 32; 0; 2; 1; 5; -1])
-------------------
At Height:3
SIZE 1 :- (1,3 aka [11; 1; 0; 0; 4; 11; 2; 0; 1; 4; -1])
WITNESS:3
Val-nums
3 -> 3
2 -> 2
1 -> 2
0 -> 0
Output Dot in /tmp/graph-562d5f.dot
Val-nums
Output Dot in /tmp/graph-e6af09.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 7; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [42; 3; 0; 0; 7; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9b3ebf.dot
Val-nums
Output Dot in /tmp/graph-c4d4af.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  4 ASETL [||] [|0|]
  3 "1"
  1 0 %na=FORALL
    Graph {
    ----NODES----
    3 0 %na=BODY
      Graph {
      ----NODES----
      3 TIMES [||] [|0|]
      2 AELEMENT [||] [||]
      1 AELEMENT [||] [||]
      BOUNDARY [[(0,2,I);(0,1,Y);(0,0,N)], [(3,0)]]
      ----EDGES----
      3:0 -> 0:0 4
      2:0 -> 3:1 4
      2:0 -> 3:0 4
      0:2 -> 2:1 5
      0:1 -> 2:0 7
      0:2 -> 1:1 5
      0:1 -> 1:0 7
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;I;(2,0)
      LOCAL-SYM: 
      ARRAY 4;Y;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;I;(0,2)
      } 4
    2 0 %na=GENERATOR
      Graph {
      ----NODES----
      2 RANGEGEN [||] [|0|]
      1 "1"
      BOUNDARY [[(0,0,N)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:0 5
      0:0 -> 2:1 5
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,1)
      INTEGRAL;N;(0,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      INTEGRAL;I;(2,0)
      } 3
    1 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 7
      0:1 -> 1:1 4
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 4;Y;(0,1)
      INTEGRAL;N;(0,0)
      INTEGRAL;I;(0,2)
      } 2
    BOUNDARY [[(0,1,Y);(0,0,N)], []]
    GLOBAL-SYM: 
    ARRAY 4;Y;(0,1)
    INTEGRAL;N;(0,0)
    INTEGRAL;I;(0,2)
    LOCAL-SYM: 
    ARRAY 4;Y;(0,1)
    INTEGRAL;N;(0,0)
    } 4 3,2,3,1
  BOUNDARY [[(0,1,);(0,0,)], [(4,0)], %na=MAIN]
  ----EDGES----
  4:0 -> 0:0 7
  3:0 -> 4:0 7
  1:1 -> 4:0 7
  0:1 -> 1:1 7
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 4;Y;(0,1)
  INTEGRAL;N;(0,0)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
11 FUNCTION_TYPE MAIN (ARGS: 10) (RETURNS:8)
10 TUPLE {Type label:5; Next label:9}
9 TUPLE {Type label:7; Next label:0}
8 TUPLE {Type label:7; Next label:0}
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
REAL:3
ONED:7
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE ONED = ARRAY [DOUBLE]
FUNCTION MAIN (N:INTEGER;Y:ONED RETURNS ONED)
  FOR I IN 1,N
    RETURNS
      ARRAY OF Y[I] * Y[I]
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y,W,U:THREED RETURNS THREED)
  FOR ELEM IN Y AT I,J,K
    RETURNS
      ARRAY OF Y[I,J,K] * Y[J,I,K]
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 8; -1])
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 9; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e6bb2a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 9; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 8; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-554631.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 8; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-4202ea.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-0f4cff.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-11588d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 1; 1; 5; 0; 1; 0; 1; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (1,1 aka [41; 0; 0; 0; 7; -1])
WITNESS:1
Val-nums
1 -> 1
0 -> 0
Output Dot in /tmp/graph-a6dd2e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 7; 0; 0; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,1 aka [32; 0; 0; 0; 9; 32; 0; 1; 1; 5; -1])
WITNESS:1
SIZE 1 :- (8,4 aka [32; 0; 0; 0; 9; 32; 0; 2; 1; 5; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (2,2 aka [32; 1; 0; 0; 8; 32; 0; 2; 1; 5; -1])
WITNESS:2
SIZE 1 :- (2,5 aka [32; 4; 0; 0; 8; 32; 0; 1; 1; 5; -1])
WITNESS:5
-------------------
At Height:4
SIZE 1 :- (2,3 aka [32; 2; 0; 0; 7; 32; 0; 3; 1; 5; -1])
WITNESS:3
SIZE 1 :- (2,6 aka [32; 5; 0; 0; 7; 32; 0; 3; 1; 5; -1])
WITNESS:6
-------------------
At Height:5
SIZE 1 :- (1,7 aka [11; 3; 0; 0; 4; 11; 6; 0; 1; 4; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d8ca6a.dot
Val-nums
Output Dot in /tmp/graph-3a92f3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 8; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [36; 0; 0; 0; 8; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,5 aka [42; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
0 -> 0
Output Dot in /tmp/graph-0ad729.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 9; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
-------------------
At Height:2
SIZE 1 :- (1,4 aka [36; 0; 0; 0; 9; -1])
WITNESS:4
-------------------
At Height:3
SIZE 1 :- (1,5 aka [42; 4; 0; 1; 5; -1])
WITNESS:5
Val-nums
5 -> 5
4 -> 4
3 -> 3
0 -> 0
Output Dot in /tmp/graph-6e6d86.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 9; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,3 aka [36; 0; 0; 0; 9; -1])
WITNESS:3
-------------------
At Height:3
SIZE 1 :- (1,4 aka [42; 3; 0; 1; 5; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-b7b0ac.dot
Val-nums
Output Dot in /tmp/graph-84d102.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  4 ASETL [||] [|0|]
  3 ALIML [||] [||] %na=ALimL
  1 0 %na=FORALL
    Graph {
    ----NODES----
    5 ASETL [||] [|0|]
    4 ALIML [||] [||] %na=ALimL
    3 0 %na=FORALL
      Graph {
      ----NODES----
      5 ASETL [||] [|0|]
      4 ALIML [||] [||] %na=ALimL
      3 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          7 TIMES [||] [|0|]
          6 AELEMENT [||] [||]
          5 AELEMENT [||] [||]
          4 AELEMENT [||] [||]
          3 AELEMENT [||] [||]
          2 AELEMENT [||] [||]
          1 AELEMENT [||] [||]
          BOUNDARY [[(0,3,K);(0,2,J);(0,1,I);(0,0,Y)], [(7,0)]]
          ----EDGES----
          7:0 -> 0:0 4
          6:0 -> 7:1 4
          5:0 -> 6:0 7
          4:0 -> 5:0 8
          3:0 -> 7:0 4
          2:0 -> 3:0 7
          1:0 -> 2:0 8
          0:3 -> 6:1 5
          0:1 -> 5:1 5
          0:2 -> 4:1 5
          0:0 -> 4:0 9
          0:3 -> 3:1 5
          0:2 -> 2:1 5
          0:1 -> 1:1 5
          0:0 -> 1:0 9
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,0)
          ARRAY 8;W;(0,3)
          ARRAY 8;U;(0,4)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(1,1)
          INTEGRAL;J;(1,1)
          INTEGRAL;I;(1,1)
          DOUBLE;ELEM;(1,0)
          LOCAL-SYM: 
          ARRAY 8;Y;(0,0)
          INTEGRAL;K;(0,3)
          INTEGRAL;J;(0,2)
          INTEGRAL;I;(0,1)
          } 8
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          1 ASCATTER [||] [|0,0|]
          BOUNDARY [[(0,0,Y)], [(1,1);(1,0)]]
          ----EDGES----
          1:1 -> 0:1 5
          1:0 -> 0:1 4
          0:0 -> 1:0 7
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,0)
          ARRAY 8;W;(0,3)
          ARRAY 8;U;(0,4)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;J;(1,1)
          INTEGRAL;I;(1,1)
          ARRAY 4;ELEM;(1,0)
          LOCAL-SYM: 
          ARRAY 8;Y;(0,0)
          INTEGRAL;K;(1,1)
          DOUBLE;ELEM;(1,0)
          } 2
        1 0 %na=RETURN
          Graph {
          ----NODES----
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,0,)], [(1,0)]]
          ----EDGES----
          1:0 -> 0:0 7
          0:1 -> 1:1 4
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,0)
          ARRAY 8;W;(0,3)
          ARRAY 8;U;(0,4)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(0,3)
          INTEGRAL;J;(0,2)
          INTEGRAL;I;(0,1)
          DOUBLE;ELEM;(1,0)
          } 2
        BOUNDARY [[(0,2,J);(0,1,I);(0,0,Y)], []]
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,0)
        ARRAY 8;W;(0,3)
        ARRAY 8;U;(0,4)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(0,3)
        INTEGRAL;J;(0,2)
        INTEGRAL;I;(0,1)
        DOUBLE;ELEM;(1,0)
        LOCAL-SYM: 
        ARRAY 8;Y;(0,0)
        INTEGRAL;J;(0,2)
        INTEGRAL;I;(0,1)
        } 4 3,2,3,1
      2 0 %na=RETURN
        Graph {
        ----NODES----
        1 AGATHER [||] [|0|]
        BOUNDARY [[(0,1,);(0,0,Y)], [(1,0)]]
        ----EDGES----
        1:0 -> 0:0 8
        0:1 -> 1:1 7
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,0)
        ARRAY 8;W;(0,3)
        ARRAY 8;U;(0,4)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;J;(1,1)
        INTEGRAL;I;(1,1)
        ARRAY 4;ELEM;(1,0)
        LOCAL-SYM: 
        ARRAY 8;Y;(0,0)
        } 2
      1 0 %na=GENERATOR
        Graph {
        ----NODES----
        1 ASCATTER [||] [|0,0|]
        BOUNDARY [[(0,0,Y)], [(1,1);(1,0)]]
        ----EDGES----
        1:1 -> 0:1 5
        1:0 -> 0:1 7
        0:0 -> 1:0 8
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,0)
        ARRAY 8;W;(0,3)
        ARRAY 8;U;(0,4)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;I;(1,1)
        ARRAY 7;ELEM;(1,0)
        LOCAL-SYM: 
        ARRAY 8;Y;(0,0)
        INTEGRAL;J;(1,1)
        ARRAY 4;ELEM;(1,0)
        } 2
      BOUNDARY [[(0,1,I);(0,0,Y)], [(5,0)]]
      ----EDGES----
      5:0 -> 0:0 8
      4:0 -> 5:1 5
      3:1 -> 5:0 8
      0:0 -> 4:0 8
      0:1 -> 3:1 5
      0:0 -> 3:0 9
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,0)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;J;(1,1)
      INTEGRAL;I;(1,1)
      ARRAY 4;ELEM;(1,0)
      LOCAL-SYM: 
      ARRAY 8;Y;(0,0)
      INTEGRAL;I;(0,1)
      } 6 3,1,3,2
    2 0 %na=RETURN
      Graph {
      ----NODES----
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,0,Y)], [(1,0)]]
      ----EDGES----
      1:0 -> 0:0 9
      0:1 -> 1:1 8
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,0)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;I;(1,1)
      ARRAY 7;ELEM;(1,0)
      LOCAL-SYM: 
      ARRAY 8;Y;(0,0)
      } 2
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      1 ASCATTER [||] [|0,0|]
      BOUNDARY [[(0,0,Y)], [(1,1);(1,0)]]
      ----EDGES----
      1:1 -> 0:1 5
      1:0 -> 0:1 8
      0:0 -> 1:0 9
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,2)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      LOCAL-SYM: 
      ARRAY 8;Y;(0,0)
      INTEGRAL;I;(1,1)
      ARRAY 7;ELEM;(1,0)
      } 2
    BOUNDARY [[(0,0,Y)], [(5,0)]]
    ----EDGES----
    5:0 -> 0:0 9
    4:0 -> 5:1 5
    3:1 -> 5:0 9
    0:0 -> 4:0 9
    0:0 -> 3:0 9
    GLOBAL-SYM: 
    ARRAY 8;Y;(0,0)
    ARRAY 8;W;(0,3)
    ARRAY 8;U;(0,4)
    INTEGRAL;N;(0,0)
    INTEGRAL;M;(0,1)
    INTEGRAL;I;(1,1)
    ARRAY 7;ELEM;(1,0)
    LOCAL-SYM: 
    ARRAY 8;Y;(0,0)
    } 6 3,1,3,2
  BOUNDARY [[(0,2,);(0,0,)], [(4,0)], %na=MAIN]
  ----EDGES----
  4:0 -> 0:0 9
  3:0 -> 4:1 5
  1:1 -> 4:0 9
  0:0 -> 3:0 9
  0:2 -> 1:0 9
  LOCAL-SYM: 
  ARRAY 8;Y;(0,2)
  ARRAY 8;W;(0,3)
  ARRAY 8;U;(0,4)
  INTEGRAL;N;(0,0)
  INTEGRAL;M;(0,1)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
16 FUNCTION_TYPE MAIN (ARGS: 15) (RETURNS:10)
15 TUPLE {Type label:5; Next label:14}
14 TUPLE {Type label:5; Next label:13}
13 TUPLE {Type label:9; Next label:12}
12 TUPLE {Type label:9; Next label:11}
11 TUPLE {Type label:9; Next label:0}
10 TUPLE {Type label:9; Next label:0}
9 ARRAY 8
8 ARRAY 7
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
THREED:9
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y,W,U:THREED RETURNS THREED)
  FOR ELEM IN Y AT I,J,K
    RETURNS
      ARRAY OF Y[I,J,K] * Y[J,I,K]
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE TWOD = ARRAY [ARRAY [DOUBLE]]
FUNCTION MAIN (N,M:INTEGER;Y:TWOD RETURNS TWOD,TWOD)
  FOR K IN 1,N CROSS J IN 2,M
    RETURNS
      ARRAY OF Y[K,J] * Y[K,J]
      ARRAY OF Y[K,J] - Y[K,J]
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-321456.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; 0; 2; 0; 1; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:2
SIZE 1 :- (8,1 aka [34; 0; 0; 0; 5; 34; 0; 2; 1; 7; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-9ec816.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:2
SIZE 1 :- (8,1 aka [34; 0; 0; 0; 5; 34; 0; 2; 1; 4; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7f16c3.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 2; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 1; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-7078ec.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 10; 0; 0; 4; 0; 5; 0; 1; 4; -1])
WITNESS:0
-------------------
At Height:2
(REACHED SENTINEL) WITNESS:8 FOR 4 TREES :- (11,8 aka [32; 0; 2; 0; 8; 32; 0; 3; 1; 5; -1]);(11,6 aka [32; 0; 2; 0; 8; 32; 0; 3; 1; 5; -1]);(11,3 aka [32; 0; 2; 0; 8; 32; 0; 3; 1; 5; -1]);(11,1 aka [32; 0; 2; 0; 8; 32; 0; 3; 1; 5; -1])
-------------------
At Height:3
(REACHED SENTINEL) WITNESS:9 FOR 4 TREES :- (11,9 aka [32; 8; 0; 0; 7; 32; 0; 4; 1; 5; -1]);(11,7 aka [32; 6; 0; 0; 7; 32; 0; 4; 1; 5; -1]);(11,4 aka [32; 3; 0; 0; 7; 32; 0; 4; 1; 5; -1]);(11,2 aka [32; 1; 0; 0; 7; 32; 0; 4; 1; 5; -1])
-------------------
At Height:4
SIZE 1 :- (1,5 aka [11; 2; 0; 0; 4; 11; 4; 0; 1; 4; -1])
WITNESS:5
SIZE 1 :- (1,10 aka [12; 7; 0; 0; 4; 12; 9; 0; 1; 4; -1])
WITNESS:10
Val-nums
10 -> 10
9 -> 9
8 -> 8
7 -> 9
6 -> 8
5 -> 5
4 -> 9
3 -> 8
2 -> 9
1 -> 8
0 -> 0
Output Dot in /tmp/graph-d897f7.dot
Val-nums
Output Dot in /tmp/graph-4a228e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 8; 0; 7; 1; 1; 8; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (2,5 aka [42; 4; 0; 0; 8; -1])
WITNESS:5
SIZE 1 :- (2,7 aka [42; 6; 0; 0; 8; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
0 -> 0
Output Dot in /tmp/graph-931011.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 8; 0; 6; 1; 1; 8; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
-------------------
At Height:2
SIZE 1 :- (2,4 aka [42; 3; 0; 0; 8; -1])
WITNESS:4
SIZE 1 :- (2,6 aka [42; 5; 0; 0; 8; -1])
WITNESS:6
Val-nums
6 -> 6
5 -> 5
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-2601fd.dot
Val-nums
Output Dot in /tmp/graph-2c1970.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  6 ASETL [||] [|0|]
  5 "1"
  4 ASETL [||] [|0|]
  3 "1"
  1 0 %na=FORALL
    Graph {
    ----NODES----
    7 ASETL [||] [|0|]
    6 "1"
    5 ASETL [||] [|0|]
    4 "1"
    3 0 %na=FORALL
      Graph {
      ----NODES----
      3 0 %na=BODY
        Graph {
        ----NODES----
        10 SUBTRACT [||] [|0|]
        9 AELEMENT [||] [||]
        8 AELEMENT [||] [||]
        7 AELEMENT [||] [||]
        6 AELEMENT [||] [||]
        5 TIMES [||] [|0|]
        4 AELEMENT [||] [||]
        3 AELEMENT [||] [||]
        2 AELEMENT [||] [||]
        1 AELEMENT [||] [||]
        BOUNDARY [[(0,4,J);(0,3,K);(0,2,Y);(0,1,M);(0,0,N)], [(5,0);(10,0)]]
        ----EDGES----
        10:0 -> 0:0 4
        9:0 -> 10:1 4
        9:0 -> 10:0 4
        9:0 -> 5:1 4
        9:0 -> 5:0 4
        8:0 -> 9:0 7
        8:0 -> 7:0 7
        8:0 -> 4:0 7
        8:0 -> 2:0 7
        5:0 -> 0:1 4
        0:4 -> 9:1 5
        0:3 -> 8:1 5
        0:2 -> 8:0 8
        0:4 -> 7:1 5
        0:3 -> 6:1 5
        0:2 -> 6:0 8
        0:4 -> 4:1 5
        0:3 -> 3:1 5
        0:2 -> 3:0 8
        0:4 -> 2:1 5
        0:3 -> 1:1 5
        0:2 -> 1:0 8
        GLOBAL-SYM: 
        ARRAY 7;Y;(0,2)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(2,0)
        INTEGRAL;J;(2,0)
        LOCAL-SYM: 
        ARRAY 7;Y;(0,2)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(0,3)
        INTEGRAL;J;(0,4)
        } 11
      2 0 %na=GENERATOR
        Graph {
        ----NODES----
        2 RANGEGEN [||] [|0|]
        1 "2"
        BOUNDARY [[(0,1,M);(0,0,N)], [(2,0)]]
        ----EDGES----
        2:0 -> 0:2 5
        1:0 -> 2:0 5
        0:1 -> 2:1 5
        GLOBAL-SYM: 
        ARRAY 7;Y;(0,2)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(2,0)
        LOCAL-SYM: 
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;J;(2,0)
        } 3
      1 0 %na=RETURN
        Graph {
        ----NODES----
        2 AGATHER [||] [|0|]
        1 AGATHER [||] [|0|]
        BOUNDARY [[(0,1,);(0,2,);(0,0,)], [(2,0);(1,0)]]
        ----EDGES----
        2:0 -> 0:1 7
        1:0 -> 0:0 7
        0:1 -> 2:1 4
        0:0 -> 2:0 5
        0:2 -> 1:1 4
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        ARRAY 7;Y;(0,2)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(0,3)
        INTEGRAL;J;(0,4)
        } 3
      BOUNDARY [[(0,3,K);(0,2,Y);(0,1,M);(0,0,N)], []]
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,2)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;K;(0,3)
      INTEGRAL;J;(0,4)
      LOCAL-SYM: 
      ARRAY 7;Y;(0,2)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;K;(0,3)
      } 4 3,2,3,1
    2 0 %na=RETURN
      Graph {
      ----NODES----
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,2,);(0,0,N)], [(2,0);(1,0)]]
      ----EDGES----
      2:0 -> 0:1 8
      1:0 -> 0:0 8
      0:1 -> 2:1 7
      0:0 -> 2:0 5
      0:2 -> 1:1 7
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,2)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;K;(2,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      } 3
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      2 RANGEGEN [||] [|0|]
      1 "1"
      BOUNDARY [[(0,0,N)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:0 5
      0:0 -> 2:1 5
      GLOBAL-SYM: 
      ARRAY 7;Y;(0,2)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      INTEGRAL;K;(2,0)
      } 3
    BOUNDARY [[(0,2,Y);(0,1,M);(0,0,N)], [(7,1);(5,0)]]
    ----EDGES----
    7:1 -> 0:1 8
    6:0 -> 7:0 8
    5:0 -> 0:0 8
    4:0 -> 5:0 8
    3:2 -> 7:0 8
    3:1 -> 5:0 8
    0:2 -> 3:2 8
    0:1 -> 3:1 5
    0:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 7;Y;(0,2)
    INTEGRAL;N;(0,0)
    INTEGRAL;M;(0,1)
    INTEGRAL;K;(2,0)
    LOCAL-SYM: 
    ARRAY 7;Y;(0,2)
    INTEGRAL;N;(0,0)
    INTEGRAL;M;(0,1)
    } 8 3,1,3,2
  BOUNDARY [[(0,2,);(0,1,);(0,0,)], [(6,1);(4,0)], %na=MAIN]
  ----EDGES----
  6:1 -> 0:1 8
  5:0 -> 6:0 8
  4:0 -> 0:0 8
  3:0 -> 4:0 8
  1:2 -> 6:0 8
  1:1 -> 4:0 8
  0:2 -> 1:2 8
  0:1 -> 1:1 5
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 7;Y;(0,2)
  INTEGRAL;N;(0,0)
  INTEGRAL;M;(0,1)
  } 7
BOUNDARY [[], []]
----TYPEMAP----
14 FUNCTION_TYPE MAIN (ARGS: 13) (RETURNS:10)
13 TUPLE {Type label:5; Next label:12}
12 TUPLE {Type label:5; Next label:11}
11 TUPLE {Type label:8; Next label:0}
10 TUPLE {Type label:8; Next label:9}
9 TUPLE {Type label:8; Next label:0}
8 ARRAY 7
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
TWOD:8
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE TWOD = ARRAY [ARRAY [DOUBLE]]
FUNCTION MAIN (N,M:INTEGER;Y:TWOD RETURNS TWOD,TWOD)
  FOR K IN 1,N CROSS J IN 2,M
    RETURNS
      ARRAY OF Y[K,J] * Y[K,J]
      ARRAY OF Y[K,J] - Y[K,J]
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y,W,U:THREED RETURNS THREED,THREED)
  FOR I IN 4,N CROSS J IN 1,M CROSS K IN 1,N
    RETURNS
      ARRAY OF Y[I,J,K] * W[K,J,I]
      ARRAY OF Y[I,J,K] - U[I,J,K]
  END FOR
END FUNCTION
-------------------
At Height:1
WITNESS:0
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,0 aka [0; 2; 0; 1; 5; -1])
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-39d300.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 9; 0; 2; 0; 1; 9; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 8; -1])
WITNESS:2
SIZE 1 :- (8,1 aka [34; 0; 0; 0; 5; 34; 0; 2; 1; 8; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-d64f5e.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 2; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 1; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-a4ad4d.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 8; 0; 2; 0; 1; 8; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 7; -1])
WITNESS:2
SIZE 1 :- (8,1 aka [34; 0; 0; 0; 5; 34; 0; 2; 1; 7; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-749eec.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 7; 0; 2; 0; 1; 7; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (8,2 aka [34; 0; 0; 0; 5; 34; 0; 1; 1; 4; -1])
WITNESS:2
SIZE 1 :- (8,1 aka [34; 0; 0; 0; 5; 34; 0; 2; 1; 4; -1])
WITNESS:1
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e886ef.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 2; 0; 2; 5; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
-------------------
At Height:2
SIZE 1 :- (1,2 aka [28; 1; 0; 0; 5; 28; 0; 0; 1; 5; -1])
WITNESS:2
Val-nums
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-e1d0ff.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 14; 0; 0; 4; 0; 7; 0; 1; 4; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (3,4 aka [32; 0; 6; 0; 9; 32; 0; 5; 1; 5; -1])
WITNESS:4
SIZE 1 :- (3,11 aka [32; 0; 7; 0; 9; 32; 0; 3; 1; 5; -1])
WITNESS:11
(REACHED SENTINEL) WITNESS:8 FOR 2 TREES :- (11,8 aka [32; 0; 2; 0; 9; 32; 0; 3; 1; 5; -1]);(11,1 aka [32; 0; 2; 0; 9; 32; 0; 3; 1; 5; -1])
-------------------
At Height:3
SIZE 1 :- (2,5 aka [32; 4; 0; 0; 8; 32; 0; 4; 1; 5; -1])
WITNESS:5
SIZE 1 :- (2,12 aka [32; 11; 0; 0; 8; 32; 0; 4; 1; 5; -1])
WITNESS:12
(REACHED SENTINEL) WITNESS:9 FOR 2 TREES :- (11,9 aka [32; 8; 0; 0; 8; 32; 0; 4; 1; 5; -1]);(11,2 aka [32; 1; 0; 0; 8; 32; 0; 4; 1; 5; -1])
-------------------
At Height:4
SIZE 1 :- (2,6 aka [32; 5; 0; 0; 7; 32; 0; 3; 1; 5; -1])
WITNESS:6
SIZE 1 :- (2,13 aka [32; 12; 0; 0; 7; 32; 0; 5; 1; 5; -1])
WITNESS:13
(REACHED SENTINEL) WITNESS:10 FOR 2 TREES :- (11,10 aka [32; 9; 0; 0; 7; 32; 0; 5; 1; 5; -1]);(11,3 aka [32; 2; 0; 0; 7; 32; 0; 5; 1; 5; -1])
-------------------
At Height:5
SIZE 1 :- (1,7 aka [11; 3; 0; 0; 4; 11; 6; 0; 1; 4; -1])
WITNESS:7
SIZE 1 :- (1,14 aka [12; 10; 0; 0; 4; 12; 13; 0; 1; 4; -1])
WITNESS:14
Val-nums
14 -> 14
13 -> 13
12 -> 12
11 -> 11
10 -> 10
9 -> 9
8 -> 8
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 10
2 -> 9
1 -> 8
0 -> 0
Output Dot in /tmp/graph-5b974f.dot
Val-nums
Output Dot in /tmp/graph-c025a9.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 8; 0; 7; 1; 1; 8; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (2,5 aka [42; 4; 0; 0; 8; -1])
WITNESS:5
SIZE 1 :- (2,7 aka [42; 6; 0; 0; 8; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
0 -> 0
Output Dot in /tmp/graph-05458a.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 5; 0; 0; 9; 0; 7; 1; 1; 9; -1])
WITNESS:0
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,4 aka [4; -1])
WITNESS:4
SIZE 1 :- (1,6 aka [6; -1])
WITNESS:6
-------------------
At Height:2
SIZE 1 :- (2,5 aka [42; 4; 0; 0; 9; -1])
WITNESS:5
SIZE 1 :- (2,7 aka [42; 6; 0; 0; 9; -1])
WITNESS:7
Val-nums
7 -> 7
6 -> 6
5 -> 5
4 -> 4
3 -> 3
0 -> 0
Output Dot in /tmp/graph-e17591.dot
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 4; 0; 0; 9; 0; 6; 1; 1; 9; -1])
WITNESS:0
SIZE 1 :- (1,1 aka [1; -1])
WITNESS:1
SIZE 1 :- (1,3 aka [3; -1])
WITNESS:3
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
-------------------
At Height:2
SIZE 1 :- (2,4 aka [42; 3; 0; 0; 9; -1])
WITNESS:4
SIZE 1 :- (2,6 aka [42; 5; 0; 0; 9; -1])
WITNESS:6
Val-nums
6 -> 6
5 -> 5
4 -> 4
3 -> 3
1 -> 1
0 -> 0
Output Dot in /tmp/graph-867d7f.dot
Val-nums
Output Dot in /tmp/graph-b76376.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  6 ASETL [||] [|0|]
  5 "4"
  4 ASETL [||] [|0|]
  3 "4"
  1 0 %na=FORALL
    Graph {
    ----NODES----
    7 ASETL [||] [|0|]
    6 "4"
    5 ASETL [||] [|0|]
    4 "4"
    3 0 %na=FORALL
      Graph {
      ----NODES----
      7 ASETL [||] [|0|]
      6 "1"
      5 ASETL [||] [|0|]
      4 "1"
      3 0 %na=FORALL
        Graph {
        ----NODES----
        3 0 %na=BODY
          Graph {
          ----NODES----
          14 SUBTRACT [||] [|0|]
          13 AELEMENT [||] [||]
          12 AELEMENT [||] [||]
          11 AELEMENT [||] [||]
          10 AELEMENT [||] [||]
          9 AELEMENT [||] [||]
          8 AELEMENT [||] [||]
          7 TIMES [||] [|0|]
          6 AELEMENT [||] [||]
          5 AELEMENT [||] [||]
          4 AELEMENT [||] [||]
          3 AELEMENT [||] [||]
          2 AELEMENT [||] [||]
          1 AELEMENT [||] [||]
          BOUNDARY [[(0,7,U);(0,6,W);(0,5,K);(0,4,J);(0,3,I);(0,2,Y);(0,1,M);(0,0,N)], [(7,0);(14,0)]]
          ----EDGES----
          14:0 -> 0:0 4
          13:0 -> 14:1 4
          12:0 -> 13:0 7
          11:0 -> 12:0 8
          10:0 -> 14:0 4
          10:0 -> 7:0 4
          9:0 -> 10:0 7
          9:0 -> 3:0 7
          8:0 -> 9:0 8
          8:0 -> 2:0 8
          7:0 -> 0:1 4
          6:0 -> 7:1 4
          5:0 -> 6:0 7
          4:0 -> 5:0 8
          0:5 -> 13:1 5
          0:4 -> 12:1 5
          0:7 -> 11:0 9
          0:3 -> 11:1 5
          0:5 -> 10:1 5
          0:4 -> 9:1 5
          0:3 -> 8:1 5
          0:2 -> 8:0 9
          0:3 -> 6:1 5
          0:4 -> 5:1 5
          0:6 -> 4:0 9
          0:5 -> 4:1 5
          0:5 -> 3:1 5
          0:4 -> 2:1 5
          0:3 -> 1:1 5
          0:2 -> 1:0 9
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,2)
          ARRAY 8;W;(0,3)
          ARRAY 8;U;(0,4)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(2,0)
          INTEGRAL;J;(2,0)
          INTEGRAL;I;(2,0)
          LOCAL-SYM: 
          ARRAY 8;Y;(0,2)
          ARRAY 8;W;(0,6)
          ARRAY 8;U;(0,7)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(0,5)
          INTEGRAL;J;(0,4)
          INTEGRAL;I;(0,3)
          } 15
        2 0 %na=GENERATOR
          Graph {
          ----NODES----
          2 RANGEGEN [||] [|0|]
          1 "1"
          BOUNDARY [[(0,1,M);(0,0,N)], [(2,0)]]
          ----EDGES----
          2:0 -> 0:2 5
          1:0 -> 2:0 5
          0:0 -> 2:1 5
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,2)
          ARRAY 8;W;(0,3)
          ARRAY 8;U;(0,4)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;J;(2,0)
          INTEGRAL;I;(2,0)
          LOCAL-SYM: 
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(2,0)
          } 3
        1 0 %na=RETURN
          Graph {
          ----NODES----
          2 AGATHER [||] [|0|]
          1 AGATHER [||] [|0|]
          BOUNDARY [[(0,1,);(0,2,);(0,0,)], [(2,0);(1,0)]]
          ----EDGES----
          2:0 -> 0:1 7
          1:0 -> 0:0 7
          0:1 -> 2:1 4
          0:0 -> 2:0 5
          0:2 -> 1:1 4
          0:0 -> 1:0 5
          GLOBAL-SYM: 
          ARRAY 8;Y;(0,2)
          ARRAY 8;W;(0,6)
          ARRAY 8;U;(0,7)
          INTEGRAL;N;(0,0)
          INTEGRAL;M;(0,1)
          INTEGRAL;K;(0,5)
          INTEGRAL;J;(0,4)
          INTEGRAL;I;(0,3)
          } 3
        BOUNDARY [[(0,7,U);(0,6,W);(0,4,J);(0,3,I);(0,2,Y);(0,1,M);(0,0,N)], []]
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,2)
        ARRAY 8;W;(0,6)
        ARRAY 8;U;(0,7)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;K;(0,5)
        INTEGRAL;J;(0,4)
        INTEGRAL;I;(0,3)
        LOCAL-SYM: 
        ARRAY 8;Y;(0,2)
        ARRAY 8;W;(0,6)
        ARRAY 8;U;(0,7)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;J;(0,4)
        INTEGRAL;I;(0,3)
        } 4 3,2,3,1
      2 0 %na=RETURN
        Graph {
        ----NODES----
        2 AGATHER [||] [|0|]
        1 AGATHER [||] [|0|]
        BOUNDARY [[(0,2,);(0,1,M);(0,0,N)], [(2,0);(1,0)]]
        ----EDGES----
        2:0 -> 0:1 8
        1:0 -> 0:0 8
        0:1 -> 2:1 7
        0:0 -> 2:0 5
        0:2 -> 1:1 7
        0:0 -> 1:0 5
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,2)
        ARRAY 8;W;(0,3)
        ARRAY 8;U;(0,4)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;J;(2,0)
        INTEGRAL;I;(2,0)
        LOCAL-SYM: 
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        } 3
      1 0 %na=GENERATOR
        Graph {
        ----NODES----
        2 RANGEGEN [||] [|0|]
        1 "1"
        BOUNDARY [[(0,1,M);(0,0,N)], [(2,0)]]
        ----EDGES----
        2:0 -> 0:2 5
        1:0 -> 2:0 5
        0:1 -> 2:1 5
        GLOBAL-SYM: 
        ARRAY 8;Y;(0,2)
        ARRAY 8;W;(0,3)
        ARRAY 8;U;(0,4)
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;I;(2,0)
        LOCAL-SYM: 
        INTEGRAL;N;(0,0)
        INTEGRAL;M;(0,1)
        INTEGRAL;J;(2,0)
        } 3
      BOUNDARY [[(0,7,U);(0,6,W);(0,3,I);(0,2,Y);(0,1,M);(0,0,N)], [(7,1);(5,0)]]
      ----EDGES----
      7:1 -> 0:1 8
      6:0 -> 7:0 8
      5:0 -> 0:0 8
      4:0 -> 5:0 8
      3:2 -> 7:0 8
      3:1 -> 5:0 8
      0:7 -> 3:7 9
      0:6 -> 3:6 9
      0:3 -> 3:3 5
      0:2 -> 3:2 9
      0:1 -> 3:1 5
      0:0 -> 3:0 5
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,2)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;J;(2,0)
      INTEGRAL;I;(2,0)
      LOCAL-SYM: 
      ARRAY 8;Y;(0,2)
      ARRAY 8;W;(0,6)
      ARRAY 8;U;(0,7)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;I;(0,3)
      } 8 3,1,3,2
    2 0 %na=RETURN
      Graph {
      ----NODES----
      2 AGATHER [||] [|0|]
      1 AGATHER [||] [|0|]
      BOUNDARY [[(0,1,);(0,2,);(0,0,N)], [(2,0);(1,0)]]
      ----EDGES----
      2:0 -> 0:1 9
      1:0 -> 0:0 9
      0:1 -> 2:1 8
      0:0 -> 2:0 5
      0:2 -> 1:1 8
      0:0 -> 1:0 5
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,2)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      INTEGRAL;I;(2,0)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      } 3
    1 0 %na=GENERATOR
      Graph {
      ----NODES----
      2 RANGEGEN [||] [|0|]
      1 "4"
      BOUNDARY [[(0,0,N)], [(2,0)]]
      ----EDGES----
      2:0 -> 0:1 5
      1:0 -> 2:0 5
      0:0 -> 2:1 5
      GLOBAL-SYM: 
      ARRAY 8;Y;(0,2)
      ARRAY 8;W;(0,3)
      ARRAY 8;U;(0,4)
      INTEGRAL;N;(0,0)
      INTEGRAL;M;(0,1)
      LOCAL-SYM: 
      INTEGRAL;N;(0,0)
      INTEGRAL;I;(2,0)
      } 3
    BOUNDARY [[(0,7,U);(0,6,W);(0,2,Y);(0,1,M);(0,0,N)], [(7,1);(5,0)]]
    ----EDGES----
    7:1 -> 0:1 9
    6:0 -> 7:0 9
    5:0 -> 0:0 9
    4:0 -> 5:0 9
    3:2 -> 7:0 9
    3:1 -> 5:0 9
    0:7 -> 3:7 9
    0:6 -> 3:6 9
    0:2 -> 3:2 9
    0:1 -> 3:1 5
    0:0 -> 3:0 5
    GLOBAL-SYM: 
    ARRAY 8;Y;(0,2)
    ARRAY 8;W;(0,3)
    ARRAY 8;U;(0,4)
    INTEGRAL;N;(0,0)
    INTEGRAL;M;(0,1)
    INTEGRAL;I;(2,0)
    LOCAL-SYM: 
    ARRAY 8;Y;(0,2)
    ARRAY 8;W;(0,6)
    ARRAY 8;U;(0,7)
    INTEGRAL;N;(0,0)
    INTEGRAL;M;(0,1)
    } 8 3,1,3,2
  BOUNDARY [[(0,4,);(0,3,);(0,2,);(0,1,);(0,0,)], [(6,1);(4,0)], %na=MAIN]
  ----EDGES----
  6:1 -> 0:1 9
  5:0 -> 6:0 9
  4:0 -> 0:0 9
  3:0 -> 4:0 9
  1:2 -> 6:0 9
  1:1 -> 4:0 9
  0:4 -> 1:7 9
  0:3 -> 1:6 9
  0:2 -> 1:2 9
  0:1 -> 1:1 5
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 8;Y;(0,2)
  ARRAY 8;W;(0,3)
  ARRAY 8;U;(0,4)
  INTEGRAL;N;(0,0)
  INTEGRAL;M;(0,1)
  } 7
BOUNDARY [[], []]
----TYPEMAP----
17 FUNCTION_TYPE MAIN (ARGS: 16) (RETURNS:11)
16 TUPLE {Type label:5; Next label:15}
15 TUPLE {Type label:5; Next label:14}
14 TUPLE {Type label:9; Next label:13}
13 TUPLE {Type label:9; Next label:12}
12 TUPLE {Type label:9; Next label:0}
11 TUPLE {Type label:9; Next label:10}
10 TUPLE {Type label:9; Next label:0}
9 ARRAY 8
8 ARRAY 7
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
THREED:9
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y,W,U:THREED RETURNS THREED,THREED)
  FOR I IN 4,N CROSS J IN 1,M CROSS K IN 1,N
    RETURNS
      ARRAY OF Y[I,J,K] * W[K,J,I]
      ARRAY OF Y[I,J,K] - U[I,J,K]
  END FOR
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y:THREED RETURNS INTEGER,INTEGER)
  LET
    X := 1;
    Y,Z := LET
      X := 2;
      Y := 3 IN
    X + Y + X * Y,X * Y + X * Y
    END LET IN
  X * Y + Z,X * Y + Z
  END LET
END FUNCTION
-------------------
At Height:1
WITNESS:1
WITNESS:3
SIZE 1 :- (1,1 aka [1; -1])
SIZE 1 :- (1,3 aka [3; -1])
SIZE 1 :- (1,5 aka [5; -1])
WITNESS:5
-------------------
At Height:2
SIZE 1 :- (1,7 aka [13; 3; 0; 0; 5; 13; 5; 0; 1; 5; -1])
WITNESS:7
(REACHED SENTINEL) WITNESS:11 FOR 3 TREES :- (11,11 aka [11; 3; 0; 0; 5; 11; 5; 0; 1; 5; -1]);(11,10 aka [11; 3; 0; 0; 5; 11; 5; 0; 1; 5; -1]);(11,8 aka [11; 3; 0; 0; 5; 11; 5; 0; 1; 5; -1])
-------------------
At Height:3
SIZE 1 :- (2,9 aka [13; 7; 0; 0; 5; 13; 8; 0; 1; 5; -1])
WITNESS:9
SIZE 1 :- (2,12 aka [13; 10; 0; 0; 5; 13; 11; 0; 1; 5; -1])
WITNESS:12
-------------------
At Height:4
(REACHED SENTINEL) WITNESS:17 FOR 2 TREES :- (11,17 aka [11; 1; 0; 0; 5; 11; 9; 0; 1; 5; -1]);(11,15 aka [11; 1; 0; 0; 5; 11; 9; 0; 1; 5; -1])
-------------------
At Height:5
(REACHED SENTINEL) WITNESS:18 FOR 2 TREES :- (11,18 aka [13; 17; 0; 0; 5; 13; 12; 0; 1; 5; -1]);(11,16 aka [13; 15; 0; 0; 5; 13; 12; 0; 1; 5; -1])
Val-nums
18 -> 18
17 -> 17
16 -> 18
15 -> 17
12 -> 12
11 -> 11
10 -> 11
9 -> 9
8 -> 11
7 -> 7
5 -> 5
3 -> 3
1 -> 1
Output Dot in /tmp/graph-1abbb6.dot
Val-nums
Output Dot in /tmp/graph-441464.dot
Result graph
Graph {
----NODES----
1 0
  Graph {
  ----NODES----
  18 ADD [||] [|0|]
  17 TIMES [||] [||]
  16 ADD [||] [|0|]
  15 TIMES [||] [||]
  12 ADD [||] [||]
  11 TIMES [||] [||]
  10 TIMES [||] [||]
  9 ADD [||] [||]
  8 TIMES [||] [||]
  7 ADD [||] [||]
  5 "3"
  3 "2"
  1 "1"
  BOUNDARY [[], [(18,0);(16,0)], %na=MAIN]
  ----EDGES----
  18:0 -> 0:1 5
  18:0 -> 0:0 5
  17:0 -> 18:0 5
  17:0 -> 16:0 5
  12:0 -> 18:1 5
  12:0 -> 16:1 5
  11:0 -> 12:1 5
  11:0 -> 12:0 5
  11:0 -> 9:1 5
  9:0 -> 17:1 5
  9:0 -> 15:1 5
  7:0 -> 9:0 5
  5:0 -> 11:1 5
  5:0 -> 10:1 5
  5:0 -> 8:1 5
  5:0 -> 7:1 5
  3:0 -> 11:0 5
  3:0 -> 10:0 5
  3:0 -> 8:0 5
  3:0 -> 7:0 5
  1:0 -> 17:0 5
  1:0 -> 15:0 5
  LOCAL-SYM: 
  ARRAY 8;Y;(0,2)
  INTEGRAL;N;(0,0)
  INTEGRAL;M;(0,1)
  } 20
BOUNDARY [[], []]
----TYPEMAP----
15 FUNCTION_TYPE MAIN (ARGS: 14) (RETURNS:11)
14 TUPLE {Type label:5; Next label:13}
13 TUPLE {Type label:5; Next label:12}
12 TUPLE {Type label:9; Next label:0}
11 TUPLE {Type label:5; Next label:10}
10 TUPLE {Type label:5; Next label:0}
9 ARRAY 8
8 ARRAY 7
7 ARRAY 4
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
THREED:9
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
} 2
DEFINE MAIN
TYPE DOUBLE = DOUBLE_REAL;
TYPE THREED = ARRAY [ARRAY [ARRAY [DOUBLE]]]
FUNCTION MAIN (N,M:INTEGER;Y:THREED RETURNS INTEGER,INTEGER)
  LET
    X := 1;
    Y,Z := LET
      X := 2;
      Y := 3 IN
    X + Y + X * Y,X * Y + X * Y
    END LET IN
  X * Y + Z,X * Y + Z
  END LET
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  A,B,C,D
END FUNCTION
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 5; 0; 0; 1; 1; 3; 0; 0; 2; 2; 4; 0; 0; 3; 3; 7; -1])
WITNESS:0
Val-nums
0 -> 0
Output Dot in /tmp/graph-d82134.dot
Val-nums
Output Dot in /tmp/graph-d8bcc4.dot
Result graph
Graph {
----NODES----
1 7
  Graph {
  ----NODES----
  BOUNDARY [[], [(0,3);(0,2);(0,1);(0,0)], %na=UCREATE]
  ----EDGES----
  0:3 -> 0:3 7
  0:2 -> 0:2 4
  0:1 -> 0:1 3
  0:0 -> 0:0 5
  LOCAL-SYM: 
  ARRAY 5;D;(0,3)
  DOUBLE;C;(0,2)
  REAL;B;(0,1)
  INTEGRAL;A;(0,0)
  } 1
BOUNDARY [[], []]
----TYPEMAP----
21 FUNCTION_TYPE UCREATE (ARGS: 20) (RETURNS:16)
20 TUPLE {Type label:5; Next label:19}
19 TUPLE {Type label:3; Next label:18}
18 TUPLE {Type label:4; Next label:17}
17 TUPLE {Type label:7; Next label:0}
16 TUPLE {Type label:12; Next label:15}
15 TUPLE {Type label:12; Next label:14}
14 TUPLE {Type label:12; Next label:13}
13 TUPLE {Type label:12; Next label:0}
12 UNION {Type label:0; Next tag:11; %na=}
11 UNION {Type label:5; Next tag:10; %na=A}
10 UNION {Type label:3; Next tag:9; %na=B}
9 UNION {Type label:4; Next tag:8; %na=C}
8 UNION {Type label:7; Next tag:0; %na=D}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
UN:12
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AR:7
} 2
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  A,B,C,D
END FUNCTION
Output Dot in out.dot
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  A,B
END FUNCTION
-------------------
At Height:1
WITNESS:0
Val-nums
Output Dot in /tmp/graph-31f03c.dot
Val-nums
Output Dot in /tmp/graph-8eb107.dot
Result graph
Graph {
----NODES----
1 3
  Graph {
  ----NODES----
  BOUNDARY [[], [(0,1);(0,0)], %na=UCREATE]
  ----EDGES----
  0:1 -> 0:1 3
  0:0 -> 0:0 5
  LOCAL-SYM: 
  ARRAY 5;D;(0,3)
  DOUBLE;C;(0,2)
  REAL;B;(0,1)
  INTEGRAL;A;(0,0)
  } 1
BOUNDARY [[], []]
----TYPEMAP----
21 FUNCTION_TYPE UCREATE (ARGS: 20) (RETURNS:16)
20 TUPLE {Type label:5; Next label:19}
19 TUPLE {Type label:3; Next label:18}
18 TUPLE {Type label:4; Next label:17}
17 TUPLE {Type label:7; Next label:0}
16 TUPLE {Type label:12; Next label:15}
15 TUPLE {Type label:12; Next label:14}
14 TUPLE {Type label:12; Next label:13}
13 TUPLE {Type label:12; Next label:0}
12 UNION {Type label:0; Next tag:11; %na=}
11 UNION {Type label:5; Next tag:10; %na=A}
10 UNION {Type label:3; Next tag:9; %na=B}
9 UNION {Type label:4; Next tag:8; %na=C}
8 UNION {Type label:7; Next tag:0; %na=D}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
UN:12
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AR:7
} 2
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  A,B
END FUNCTION
Output Dot in out.dot
SIZE 1 :- (1,0 aka [0; 0; 0; 0; 5; 0; 0; 1; 1; 3; -1])
0 -> 0
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  UNION UN [ A:A ],UNION UN [ B:B ],UNION UN [ C:C ],UNION UN [ D:D ]
END FUNCTION
-------------------
At Height:1
SIZE 1 :- (1,0 aka [0; 1; 0; 0; 12; 0; 2; 0; 1; 12; 0; 3; 0; 2; 12; 0; 4; 0; 3; 12; -1])
WITNESS:0
-------------------
At Height:2
SIZE 1 :- (3,1 aka [21; 0; 0; 0; 5; -1])
WITNESS:1
SIZE 1 :- (3,2 aka [21; 0; 1; 0; 3; -1])
WITNESS:2
SIZE 1 :- (3,3 aka [21; 0; 2; 0; 4; -1])
WITNESS:3
SIZE 1 :- (3,4 aka [21; 0; 3; 0; 7; -1])
WITNESS:4
Val-nums
4 -> 4
3 -> 3
2 -> 2
1 -> 1
0 -> 0
Output Dot in /tmp/graph-8580a4.dot
Val-nums
Output Dot in /tmp/graph-5b2d8b.dot
Result graph
Graph {
----NODES----
1 12
  Graph {
  ----NODES----
  4 RBUILD [|D,D|] [|0|]
  3 RBUILD [|C,C|] [|0|]
  2 RBUILD [|B,B|] [|0|]
  1 RBUILD [|A,A|] [|0|]
  BOUNDARY [[(0,3,);(0,2,);(0,1,);(0,0,)], [(4,0);(3,0);(2,0);(1,0)], %na=UCREATE]
  ----EDGES----
  4:0 -> 0:3 12
  3:0 -> 0:2 12
  2:0 -> 0:1 12
  1:0 -> 0:0 12
  0:3 -> 4:0 7
  0:2 -> 3:0 4
  0:1 -> 2:0 3
  0:0 -> 1:0 5
  LOCAL-SYM: 
  ARRAY 5;D;(0,3)
  DOUBLE;C;(0,2)
  REAL;B;(0,1)
  INTEGRAL;A;(0,0)
  } 5
BOUNDARY [[], []]
----TYPEMAP----
21 FUNCTION_TYPE UCREATE (ARGS: 20) (RETURNS:16)
20 TUPLE {Type label:5; Next label:19}
19 TUPLE {Type label:3; Next label:18}
18 TUPLE {Type label:4; Next label:17}
17 TUPLE {Type label:7; Next label:0}
16 TUPLE {Type label:12; Next label:15}
15 TUPLE {Type label:12; Next label:14}
14 TUPLE {Type label:12; Next label:13}
13 TUPLE {Type label:12; Next label:0}
12 UNION {Type label:0; Next tag:11; %na=}
11 UNION {Type label:5; Next tag:10; %na=A}
10 UNION {Type label:3; Next tag:9; %na=B}
9 UNION {Type label:4; Next tag:8; %na=C}
8 UNION {Type label:7; Next tag:0; %na=D}
7 ARRAY 5
6 NULL
5 INTEGRAL
4 DOUBLE
3 REAL
2 CHARACTER
1 BOOLEAN
----TYPENAMES----
UN:12
REAL:3
NULL:6
INTEGRAL:5
DOUBLE:4
CHARACTER:2
BOOLEAN:1
AR:7
} 2
DEFINE MAIN
TYPE AR = ARRAY [INTEGER];
TYPE UN = UNION [A : INTEGER;B : REAL;C : DOUBLE;D : AR]
FUNCTION UCREATE (A:INTEGER;B:REAL;C:DOUBLE;D:AR RETURNS UN,UN,UN,UN)
  UNION UN [ A:A ],UNION UN [ B:B ],UNION UN [ C:C ],UNION UN [ D:D ]
END FUNCTION
Output Dot in out.dot
Unexpected: "," in file: test/union.sis (line 4: char 32..33)
there was an error: Stdlib.Parsing.Parse_error
